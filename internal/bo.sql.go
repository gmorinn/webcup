// Code generated by sqlc. DO NOT EDIT.
// source: bo.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const getBoAllDatas = `-- name: GetBoAllDatas :many
SELECT id, created_at, updated_at, deleted_at, title, description, user_id, img, category FROM data
WHERE deleted_at IS NULL
ORDER BY
  CASE WHEN $1::bool THEN title END asc,
  CASE WHEN $2::bool THEN title END desc,
  CASE WHEN $3::bool THEN description END asc,
  CASE WHEN $4::bool THEN description END desc
LIMIT $6 OFFSET $5
`

type GetBoAllDatasParams struct {
	TitleAsc        bool  `json:"title_asc"`
	TitleDesc       bool  `json:"title_desc"`
	DescriptionAsc  bool  `json:"description_asc"`
	DescriptionDesc bool  `json:"description_desc"`
	Offset          int32 `json:"offset"`
	Limit           int32 `json:"limit"`
}

func (q *Queries) GetBoAllDatas(ctx context.Context, arg GetBoAllDatasParams) ([]Datum, error) {
	rows, err := q.db.QueryContext(ctx, getBoAllDatas,
		arg.TitleAsc,
		arg.TitleDesc,
		arg.DescriptionAsc,
		arg.DescriptionDesc,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Datum{}
	for rows.Next() {
		var i Datum
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Title,
			&i.Description,
			&i.UserID,
			&i.Img,
			&i.Category,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBoAllUsers = `-- name: GetBoAllUsers :many
SELECT id, created_at, updated_at, deleted_at, email, password, firstname, lastname, username, password_confirm_code, role, avatar FROM users
WHERE deleted_at IS NULL
ORDER BY
  CASE WHEN $1::bool THEN firstname END asc,
  CASE WHEN $2::bool THEN firstname END desc,
  CASE WHEN $3::bool THEN username END asc,
  CASE WHEN $4::bool THEN username END desc,
  CASE WHEN $5::bool THEN lastname END asc,
  CASE WHEN $6::bool THEN lastname END desc,
  CASE WHEN $7::bool THEN email END asc,
  CASE WHEN $8::bool THEN email END desc,
  CASE WHEN $9::bool THEN role END asc,
  CASE WHEN $10::bool THEN role END desc
LIMIT $12 OFFSET $11
`

type GetBoAllUsersParams struct {
	FirstnameAsc  bool  `json:"firstname_asc"`
	FirstnameDesc bool  `json:"firstname_desc"`
	UsernameAsc   bool  `json:"username_asc"`
	UsernameDesc  bool  `json:"username_desc"`
	LastnameAsc   bool  `json:"lastname_asc"`
	LastnameDesc  bool  `json:"lastname_desc"`
	EmailAsc      bool  `json:"email_asc"`
	EmailDesc     bool  `json:"email_desc"`
	RoleAsc       bool  `json:"role_asc"`
	RoleDesc      bool  `json:"role_desc"`
	Offset        int32 `json:"offset"`
	Limit         int32 `json:"limit"`
}

func (q *Queries) GetBoAllUsers(ctx context.Context, arg GetBoAllUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getBoAllUsers,
		arg.FirstnameAsc,
		arg.FirstnameDesc,
		arg.UsernameAsc,
		arg.UsernameDesc,
		arg.LastnameAsc,
		arg.LastnameDesc,
		arg.EmailAsc,
		arg.EmailDesc,
		arg.RoleAsc,
		arg.RoleDesc,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Email,
			&i.Password,
			&i.Firstname,
			&i.Lastname,
			&i.Username,
			&i.PasswordConfirmCode,
			&i.Role,
			&i.Avatar,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserBo = `-- name: UpdateUserBo :exec
UPDATE users
SET firstname = $1,
    lastname = $2,
    username = $3,
    email = $4,
    avatar = $5,
    role = $6,
    updated_at = NOW()
WHERE id = $7
`

type UpdateUserBoParams struct {
	Firstname sql.NullString `json:"firstname"`
	Lastname  sql.NullString `json:"lastname"`
	Username  string         `json:"username"`
	Email     string         `json:"email"`
	Avatar    sql.NullString `json:"avatar"`
	Role      Role           `json:"role"`
	ID        uuid.UUID      `json:"id"`
}

func (q *Queries) UpdateUserBo(ctx context.Context, arg UpdateUserBoParams) error {
	_, err := q.db.ExecContext(ctx, updateUserBo,
		arg.Firstname,
		arg.Lastname,
		arg.Username,
		arg.Email,
		arg.Avatar,
		arg.Role,
		arg.ID,
	)
	return err
}
