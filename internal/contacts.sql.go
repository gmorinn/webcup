// Code generated by sqlc. DO NOT EDIT.
// source: contacts.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const countMessage = `-- name: CountMessage :one
SELECT COUNT(*) FROM contacts
WHERE deleted_at IS NULL
`

func (q *Queries) CountMessage(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countMessage)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteMessageByID = `-- name: DeleteMessageByID :exec
UPDATE
    contacts
SET
    deleted_at = NOW()
WHERE 
    id = $1
`

func (q *Queries) DeleteMessageByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteMessageByID, id)
	return err
}

const getMessageByID = `-- name: GetMessageByID :one
SELECT id, created_at, updated_at, deleted_at, email, msg, user_id FROM contacts
WHERE deleted_at IS NULL
AND id = $1
`

func (q *Queries) GetMessageByID(ctx context.Context, id uuid.UUID) (Contact, error) {
	row := q.db.QueryRowContext(ctx, getMessageByID, id)
	var i Contact
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Email,
		&i.Msg,
		&i.UserID,
	)
	return i, err
}

const getMessagesFiltered = `-- name: GetMessagesFiltered :many
SELECT id, created_at, updated_at, deleted_at, email, msg, user_id FROM contacts
WHERE deleted_at IS NULL
ORDER BY
  CASE WHEN $1::bool THEN email END asc,
  CASE WHEN $2::bool THEN email END desc
LIMIT $4 OFFSET $3
`

type GetMessagesFilteredParams struct {
	EmailAsc  bool  `json:"email_asc"`
	EmailDesc bool  `json:"email_desc"`
	Offset    int32 `json:"offset"`
	Limit     int32 `json:"limit"`
}

func (q *Queries) GetMessagesFiltered(ctx context.Context, arg GetMessagesFilteredParams) ([]Contact, error) {
	rows, err := q.db.QueryContext(ctx, getMessagesFiltered,
		arg.EmailAsc,
		arg.EmailDesc,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Contact{}
	for rows.Next() {
		var i Contact
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Email,
			&i.Msg,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertMessage = `-- name: InsertMessage :exec
INSERT INTO contacts (user_id, msg, email) 
VALUES ($1, $2, $3)
`

type InsertMessageParams struct {
	UserID uuid.UUID `json:"user_id"`
	Msg    string    `json:"msg"`
	Email  string    `json:"email"`
}

func (q *Queries) InsertMessage(ctx context.Context, arg InsertMessageParams) error {
	_, err := q.db.ExecContext(ctx, insertMessage, arg.UserID, arg.Msg, arg.Email)
	return err
}
