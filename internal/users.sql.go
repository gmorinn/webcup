// Code generated by sqlc. DO NOT EDIT.
// source: users.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const countUser = `-- name: CountUser :one
SELECT COUNT(*) FROM users
WHERE deleted_at IS NULL
`

func (q *Queries) CountUser(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countUser)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteUserByID = `-- name: DeleteUserByID :exec
UPDATE
    users
SET
    deleted_at = NOW()
WHERE 
    id = $1
`

func (q *Queries) DeleteUserByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUserByID, id)
	return err
}

const getEmailByUserID = `-- name: GetEmailByUserID :one
SELECT email FROM users
WHERE id = $1
AND deleted_at IS NULL
LIMIT 1
`

func (q *Queries) GetEmailByUserID(ctx context.Context, id uuid.UUID) (string, error) {
	row := q.db.QueryRowContext(ctx, getEmailByUserID, id)
	var email string
	err := row.Scan(&email)
	return email, err
}

const getStockByUserID = `-- name: GetStockByUserID :one
SELECT stock FROM users
WHERE id = $1
AND deleted_at IS NULL
LIMIT 1
`

func (q *Queries) GetStockByUserID(ctx context.Context, id uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, getStockByUserID, id)
	var stock int64
	err := row.Scan(&stock)
	return stock, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, created_at, updated_at, deleted_at, email, password, firstname, lastname, username, password_confirm_code, role, stock, avatar FROM users
WHERE id = $1
AND deleted_at IS NULL
LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Email,
		&i.Password,
		&i.Firstname,
		&i.Lastname,
		&i.Username,
		&i.PasswordConfirmCode,
		&i.Role,
		&i.Stock,
		&i.Avatar,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, created_at, updated_at, deleted_at, email, password, firstname, lastname, username, password_confirm_code, role, stock, avatar FROM users
WHERE username = $1
AND deleted_at IS NULL
LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Email,
		&i.Password,
		&i.Firstname,
		&i.Lastname,
		&i.Username,
		&i.PasswordConfirmCode,
		&i.Role,
		&i.Stock,
		&i.Avatar,
	)
	return i, err
}

const getUserRandom = `-- name: GetUserRandom :one
SELECT id, created_at, updated_at, deleted_at, email, password, firstname, lastname, username, password_confirm_code, role, stock, avatar FROM users
WHERE deleted_at IS NULL
LIMIT 1
`

func (q *Queries) GetUserRandom(ctx context.Context) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserRandom)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Email,
		&i.Password,
		&i.Firstname,
		&i.Lastname,
		&i.Username,
		&i.PasswordConfirmCode,
		&i.Role,
		&i.Stock,
		&i.Avatar,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, created_at, updated_at, deleted_at, email, password, firstname, lastname, username, password_confirm_code, role, stock, avatar FROM users
WHERE deleted_at IS NULL
AND (firstname ILIKE $1 OR lastname ILIKE $1 OR email ILIKE $1 OR username ILIKE $1)
LIMIT 5
`

func (q *Queries) ListUsers(ctx context.Context, firstname sql.NullString) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, firstname)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Email,
			&i.Password,
			&i.Firstname,
			&i.Lastname,
			&i.Username,
			&i.PasswordConfirmCode,
			&i.Role,
			&i.Stock,
			&i.Avatar,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsersMostRecent = `-- name: ListUsersMostRecent :many
SELECT id, created_at, updated_at, deleted_at, email, password, firstname, lastname, username, password_confirm_code, role, stock, avatar FROM users
WHERE deleted_at IS NULL
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListUsersMostRecentParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsersMostRecent(ctx context.Context, arg ListUsersMostRecentParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsersMostRecent, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Email,
			&i.Password,
			&i.Firstname,
			&i.Lastname,
			&i.Username,
			&i.PasswordConfirmCode,
			&i.Role,
			&i.Stock,
			&i.Avatar,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAvatarUser = `-- name: UpdateAvatarUser :exec
UPDATE users
SET avatar = $1,
    updated_at = NOW()
WHERE id = $2
`

type UpdateAvatarUserParams struct {
	Avatar sql.NullString `json:"avatar"`
	ID     uuid.UUID      `json:"id"`
}

func (q *Queries) UpdateAvatarUser(ctx context.Context, arg UpdateAvatarUserParams) error {
	_, err := q.db.ExecContext(ctx, updateAvatarUser, arg.Avatar, arg.ID)
	return err
}

const updateDescriptionUser = `-- name: UpdateDescriptionUser :exec
UPDATE users
SET firstname = $1,
    lastname = $2,
    username = $3,
    email = $4,
    updated_at = NOW()
WHERE id = $5
`

type UpdateDescriptionUserParams struct {
	Firstname sql.NullString `json:"firstname"`
	Lastname  sql.NullString `json:"lastname"`
	Username  string         `json:"username"`
	Email     string         `json:"email"`
	ID        uuid.UUID      `json:"id"`
}

func (q *Queries) UpdateDescriptionUser(ctx context.Context, arg UpdateDescriptionUserParams) error {
	_, err := q.db.ExecContext(ctx, updateDescriptionUser,
		arg.Firstname,
		arg.Lastname,
		arg.Username,
		arg.Email,
		arg.ID,
	)
	return err
}

const updateStock = `-- name: UpdateStock :exec
UPDATE users
SET stock = $1,
    updated_at = NOW()
WHERE id = $2
`

type UpdateStockParams struct {
	Stock int64     `json:"stock"`
	ID    uuid.UUID `json:"id"`
}

func (q *Queries) UpdateStock(ctx context.Context, arg UpdateStockParams) error {
	_, err := q.db.ExecContext(ctx, updateStock, arg.Stock, arg.ID)
	return err
}
