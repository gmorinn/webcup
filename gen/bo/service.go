// Code generated by goa v3.7.3, DO NOT EDIT.
//
// bo service
//
// Command:
// $ goa gen webcup/design

package bo

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// bo of the api
type Service interface {
	// Get All users
	GetBoUsers(context.Context, *GetBoUsersPayload) (res *GetBoUsersResult, err error)
	// Get All data
	GetBoData(context.Context, *GetBoDataPayload) (res *GetBoDataResult, err error)
	// Delete one User by ID
	DeleteBoUser(context.Context, *DeleteBoUserPayload) (res *DeleteBoUserResult, err error)
	// Delete many users with IDs send in body
	DeleteBoManyUsers(context.Context, *DeleteBoManyUsersPayload) (res *DeleteBoManyUsersResult, err error)
	// Update one User
	UpdateBoUser(context.Context, *UpdateBoUserPayload) (res *UpdateBoUserResult, err error)
	// Get one User
	GetBoUser(context.Context, *GetBoUserPayload) (res *GetBoUserResult, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// OAuth2Auth implements the authorization logic for the OAuth2 security scheme.
	OAuth2Auth(ctx context.Context, token string, schema *security.OAuth2Scheme) (context.Context, error)
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "bo"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [6]string{"getBoUsers", "getBoData", "deleteBoUser", "deleteBoManyUsers", "updateBoUser", "getBoUser"}

// DeleteBoManyUsersPayload is the payload type of the bo service
// deleteBoManyUsers method.
type DeleteBoManyUsersPayload struct {
	Tab []string
	// JWT used for authentication after Signin/Signup
	JWTToken *string
	// Use to generate Oauth with /authorization
	Oauth *string
}

// DeleteBoManyUsersResult is the result type of the bo service
// deleteBoManyUsers method.
type DeleteBoManyUsersResult struct {
	Success bool
}

// DeleteBoUserPayload is the payload type of the bo service deleteBoUser
// method.
type DeleteBoUserPayload struct {
	ID string
	// JWT used for authentication after Signin/Signup
	JWTToken *string
	// Use to generate Oauth with /authorization
	Oauth *string
}

// DeleteBoUserResult is the result type of the bo service deleteBoUser method.
type DeleteBoUserResult struct {
	Success bool
}

// GetBoDataPayload is the payload type of the bo service getBoData method.
type GetBoDataPayload struct {
	// Offset for pagination
	Offset int32
	// Limit of items listed for pagination
	Limit int32
	// Items order by {field}
	Field string
	// Items order by {field} ASC/DESC
	Direction string
	// JWT used for authentication after Signin/Signup
	JWTToken *string
	// Use to generate Oauth with /authorization
	Oauth *string
}

// GetBoDataResult is the result type of the bo service getBoData method.
type GetBoDataResult struct {
	// All datas
	Data []*ResData
	// total of data
	Count   int64
	Success bool
}

// GetBoUserPayload is the payload type of the bo service getBoUser method.
type GetBoUserPayload struct {
	// Unique ID of the User
	ID string
	// JWT used for authentication after Signin/Signup
	JWTToken *string
	// Use to generate Oauth with /authorization
	Oauth *string
}

// GetBoUserResult is the result type of the bo service getBoUser method.
type GetBoUserResult struct {
	// Result is an object
	User    *ResUser
	Success bool
}

// GetBoUsersPayload is the payload type of the bo service getBoUsers method.
type GetBoUsersPayload struct {
	// Offset for pagination
	Offset int32
	// Limit of items listed for pagination
	Limit int32
	// Items order by {field}
	Field string
	// Items order by {field} ASC/DESC
	Direction string
	// JWT used for authentication after Signin/Signup
	JWTToken *string
	// Use to generate Oauth with /authorization
	Oauth *string
}

// GetBoUsersResult is the result type of the bo service getBoUsers method.
type GetBoUsersResult struct {
	// All users
	Users []*ResUser
	// total of users
	Count   int64
	Success bool
}

type PayloadUser struct {
	Email     string
	Username  string
	Firstname string
	Lastname  string
	// Url of the avatar and stock in db
	Avatar string
	// role of the user
	Role string
}

type ResData struct {
	ID          string
	Title       string
	Description string
	// Url of the logo and stock in db
	Image    string
	Category string
	UserID   string
}

type ResUser struct {
	ID        string
	Firstname string
	Lastname  string
	Username  string
	Email     string
	// User is admin or not
	Role   string
	Avatar string
}

// UpdateBoUserPayload is the payload type of the bo service updateBoUser
// method.
type UpdateBoUserPayload struct {
	ID   string
	User *PayloadUser
	// JWT used for authentication after Signin/Signup
	JWTToken *string
	// Use to generate Oauth with /authorization
	Oauth *string
}

// UpdateBoUserResult is the result type of the bo service updateBoUser method.
type UpdateBoUserResult struct {
	// Result is an Object
	User    *ResUser
	Success bool
}

type UnknownError struct {
	Err       string
	ErrorCode string
	Success   bool
}

// Error returns an error description.
func (e *UnknownError) Error() string {
	return ""
}

// ErrorName returns "unknownError".
func (e *UnknownError) ErrorName() string {
	return "unknown_error"
}

// MakeTimeout builds a goa.ServiceError from an error.
func MakeTimeout(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "timeout",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
		Timeout: true,
	}
}
