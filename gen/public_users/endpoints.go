// Code generated by goa v3.7.3, DO NOT EDIT.
//
// publicUsers endpoints
//
// Command:
// $ goa gen webcup/design

package publicusers

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "publicUsers" service endpoints.
type Endpoints struct {
	GetUserByUsername   goa.Endpoint
	ListUsers           goa.Endpoint
	ListUsersMostRecent goa.Endpoint
}

// NewEndpoints wraps the methods of the "publicUsers" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		GetUserByUsername:   NewGetUserByUsernameEndpoint(s, a.OAuth2Auth),
		ListUsers:           NewListUsersEndpoint(s, a.OAuth2Auth),
		ListUsersMostRecent: NewListUsersMostRecentEndpoint(s, a.OAuth2Auth),
	}
}

// Use applies the given middleware to all the "publicUsers" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.GetUserByUsername = m(e.GetUserByUsername)
	e.ListUsers = m(e.ListUsers)
	e.ListUsersMostRecent = m(e.ListUsersMostRecent)
}

// NewGetUserByUsernameEndpoint returns an endpoint function that calls the
// method "getUserByUsername" of service "publicUsers".
func NewGetUserByUsernameEndpoint(s Service, authOAuth2Fn security.AuthOAuth2Func) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*GetUserByUsernamePayload)
		var err error
		sc := security.OAuth2Scheme{
			Name:           "OAuth2",
			Scopes:         []string{"api:read"},
			RequiredScopes: []string{},
			Flows: []*security.OAuthFlow{
				&security.OAuthFlow{
					Type:       "client_credentials",
					TokenURL:   "/authorization",
					RefreshURL: "/refresh",
				},
			},
		}
		var token string
		if p.Oauth != nil {
			token = *p.Oauth
		}
		ctx, err = authOAuth2Fn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.GetUserByUsername(ctx, p)
	}
}

// NewListUsersEndpoint returns an endpoint function that calls the method
// "listUsers" of service "publicUsers".
func NewListUsersEndpoint(s Service, authOAuth2Fn security.AuthOAuth2Func) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*ListUsersPayload)
		var err error
		sc := security.OAuth2Scheme{
			Name:           "OAuth2",
			Scopes:         []string{"api:read"},
			RequiredScopes: []string{},
			Flows: []*security.OAuthFlow{
				&security.OAuthFlow{
					Type:       "client_credentials",
					TokenURL:   "/authorization",
					RefreshURL: "/refresh",
				},
			},
		}
		var token string
		if p.Oauth != nil {
			token = *p.Oauth
		}
		ctx, err = authOAuth2Fn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.ListUsers(ctx, p)
	}
}

// NewListUsersMostRecentEndpoint returns an endpoint function that calls the
// method "listUsersMostRecent" of service "publicUsers".
func NewListUsersMostRecentEndpoint(s Service, authOAuth2Fn security.AuthOAuth2Func) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*ListUsersMostRecentPayload)
		var err error
		sc := security.OAuth2Scheme{
			Name:           "OAuth2",
			Scopes:         []string{"api:read"},
			RequiredScopes: []string{},
			Flows: []*security.OAuthFlow{
				&security.OAuthFlow{
					Type:       "client_credentials",
					TokenURL:   "/authorization",
					RefreshURL: "/refresh",
				},
			},
		}
		var token string
		if p.Oauth != nil {
			token = *p.Oauth
		}
		ctx, err = authOAuth2Fn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return s.ListUsersMostRecent(ctx, p)
	}
}
