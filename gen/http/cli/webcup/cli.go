// Code generated by goa v3.7.3, DO NOT EDIT.
//
// webcup HTTP client CLI support package
//
// Command:
// $ goa gen webcup/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"
	authc "webcup/gen/http/auth/client"
	boc "webcup/gen/http/bo/client"
	bocontactc "webcup/gen/http/bo_contact/client"
	contactsc "webcup/gen/http/contacts/client"
	datac "webcup/gen/http/data/client"
	filesc "webcup/gen/http/files/client"
	jwttokenc "webcup/gen/http/jwt_token/client"
	oauthc "webcup/gen/http/o_auth/client"
	publicusersc "webcup/gen/http/public_users/client"
	usersc "webcup/gen/http/users/client"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `auth (email-exist|send-confirmation|reset-password)
bo-contact (get-bo-contact|delete-bo-contact|get-bo-contact-by-id|delete-bo-many-contact)
contacts add-message
data (list-data|list-data-most-recent|create-data|update-data|get-data-by-user-id|get-data-by-id)
files (import-file|delete-file)
jwt-token (signup|signin|refresh|signin-bo)
o-auth o-auth
bo (get-bo-users|get-bo-data|delete-bo-user|delete-bo-many-users|update-bo-user|get-bo-user)
public-users (get-user-by-username|list-users|list-users-most-recent)
users (delete-user|update-avatar|update-number-stockage|get-user-by-id|update-description)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` auth email-exist --body '{
      "email": "guillaume@gmail.com"
   }' --oauth "At aut."` + "\n" +
		os.Args[0] + ` bo-contact get-bo-contact --offset 0 --limit 9 --field "name" --direction "asc" --oauth "Enim distinctio veritatis architecto ut neque quod." --jwt-token "Aut quis aut ea."` + "\n" +
		os.Args[0] + ` contacts add-message --body '{
      "msg": "Je reprends l\'app pour un million",
      "user_id": "5dfb0bf7-597a-4250-b7ad-63a43ff59c25"
   }' --oauth "Saepe quia beatae autem reprehenderit." --jwt-token "Modi esse ducimus magnam beatae sapiente."` + "\n" +
		os.Args[0] + ` data list-data --body '{
      "key": "Mars"
   }' --oauth "Id rerum fuga." --jwt-token "Pariatur nisi."` + "\n" +
		os.Args[0] + ` files import-file --body '{
      "content": "SXRhcXVlIHRlbXBvcmUu",
      "filename": "foo.jpg",
      "format": "image/jpeg",
      "h": 8213129504107496369,
      "mime": "Incidunt ipsam asperiores facilis.",
      "size": 7940255785138466612,
      "url": "Enim et omnis deleniti exercitationem.",
      "w": 466048715731699887
   }' --oauth "Corporis sed." --jwt-token "Animi qui corporis aut deserunt asperiores."` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
	filesImportFileEncoderFn filesc.FilesImportFileEncoderFunc,
) (goa.Endpoint, interface{}, error) {
	var (
		authFlags = flag.NewFlagSet("auth", flag.ContinueOnError)

		authEmailExistFlags     = flag.NewFlagSet("email-exist", flag.ExitOnError)
		authEmailExistBodyFlag  = authEmailExistFlags.String("body", "REQUIRED", "")
		authEmailExistOauthFlag = authEmailExistFlags.String("oauth", "", "")

		authSendConfirmationFlags     = flag.NewFlagSet("send-confirmation", flag.ExitOnError)
		authSendConfirmationBodyFlag  = authSendConfirmationFlags.String("body", "REQUIRED", "")
		authSendConfirmationOauthFlag = authSendConfirmationFlags.String("oauth", "", "")

		authResetPasswordFlags     = flag.NewFlagSet("reset-password", flag.ExitOnError)
		authResetPasswordBodyFlag  = authResetPasswordFlags.String("body", "REQUIRED", "")
		authResetPasswordOauthFlag = authResetPasswordFlags.String("oauth", "", "")

		boContactFlags = flag.NewFlagSet("bo-contact", flag.ContinueOnError)

		boContactGetBoContactFlags         = flag.NewFlagSet("get-bo-contact", flag.ExitOnError)
		boContactGetBoContactOffsetFlag    = boContactGetBoContactFlags.String("offset", "REQUIRED", "Offset for pagination")
		boContactGetBoContactLimitFlag     = boContactGetBoContactFlags.String("limit", "REQUIRED", "Limit of items listed for pagination")
		boContactGetBoContactFieldFlag     = boContactGetBoContactFlags.String("field", "name", "")
		boContactGetBoContactDirectionFlag = boContactGetBoContactFlags.String("direction", "asc", "")
		boContactGetBoContactOauthFlag     = boContactGetBoContactFlags.String("oauth", "", "")
		boContactGetBoContactJWTTokenFlag  = boContactGetBoContactFlags.String("jwt-token", "", "")

		boContactDeleteBoContactFlags        = flag.NewFlagSet("delete-bo-contact", flag.ExitOnError)
		boContactDeleteBoContactIDFlag       = boContactDeleteBoContactFlags.String("id", "REQUIRED", "")
		boContactDeleteBoContactOauthFlag    = boContactDeleteBoContactFlags.String("oauth", "", "")
		boContactDeleteBoContactJWTTokenFlag = boContactDeleteBoContactFlags.String("jwt-token", "", "")

		boContactGetBoContactByIDFlags        = flag.NewFlagSet("get-bo-contact-by-id", flag.ExitOnError)
		boContactGetBoContactByIDIDFlag       = boContactGetBoContactByIDFlags.String("id", "REQUIRED", "")
		boContactGetBoContactByIDOauthFlag    = boContactGetBoContactByIDFlags.String("oauth", "", "")
		boContactGetBoContactByIDJWTTokenFlag = boContactGetBoContactByIDFlags.String("jwt-token", "", "")

		boContactDeleteBoManyContactFlags        = flag.NewFlagSet("delete-bo-many-contact", flag.ExitOnError)
		boContactDeleteBoManyContactBodyFlag     = boContactDeleteBoManyContactFlags.String("body", "REQUIRED", "")
		boContactDeleteBoManyContactOauthFlag    = boContactDeleteBoManyContactFlags.String("oauth", "", "")
		boContactDeleteBoManyContactJWTTokenFlag = boContactDeleteBoManyContactFlags.String("jwt-token", "", "")

		contactsFlags = flag.NewFlagSet("contacts", flag.ContinueOnError)

		contactsAddMessageFlags        = flag.NewFlagSet("add-message", flag.ExitOnError)
		contactsAddMessageBodyFlag     = contactsAddMessageFlags.String("body", "REQUIRED", "")
		contactsAddMessageOauthFlag    = contactsAddMessageFlags.String("oauth", "", "")
		contactsAddMessageJWTTokenFlag = contactsAddMessageFlags.String("jwt-token", "", "")

		dataFlags = flag.NewFlagSet("data", flag.ContinueOnError)

		dataListDataFlags        = flag.NewFlagSet("list-data", flag.ExitOnError)
		dataListDataBodyFlag     = dataListDataFlags.String("body", "REQUIRED", "")
		dataListDataOauthFlag    = dataListDataFlags.String("oauth", "", "")
		dataListDataJWTTokenFlag = dataListDataFlags.String("jwt-token", "", "")

		dataListDataMostRecentFlags        = flag.NewFlagSet("list-data-most-recent", flag.ExitOnError)
		dataListDataMostRecentOffsetFlag   = dataListDataMostRecentFlags.String("offset", "REQUIRED", "Offset for pagination")
		dataListDataMostRecentLimitFlag    = dataListDataMostRecentFlags.String("limit", "REQUIRED", "Limit of items listed for pagination")
		dataListDataMostRecentOauthFlag    = dataListDataMostRecentFlags.String("oauth", "", "")
		dataListDataMostRecentJWTTokenFlag = dataListDataMostRecentFlags.String("jwt-token", "", "")

		dataCreateDataFlags        = flag.NewFlagSet("create-data", flag.ExitOnError)
		dataCreateDataBodyFlag     = dataCreateDataFlags.String("body", "REQUIRED", "")
		dataCreateDataOauthFlag    = dataCreateDataFlags.String("oauth", "", "")
		dataCreateDataJWTTokenFlag = dataCreateDataFlags.String("jwt-token", "", "")

		dataUpdateDataFlags        = flag.NewFlagSet("update-data", flag.ExitOnError)
		dataUpdateDataBodyFlag     = dataUpdateDataFlags.String("body", "REQUIRED", "")
		dataUpdateDataIDFlag       = dataUpdateDataFlags.String("id", "REQUIRED", "")
		dataUpdateDataOauthFlag    = dataUpdateDataFlags.String("oauth", "", "")
		dataUpdateDataJWTTokenFlag = dataUpdateDataFlags.String("jwt-token", "", "")

		dataGetDataByUserIDFlags        = flag.NewFlagSet("get-data-by-user-id", flag.ExitOnError)
		dataGetDataByUserIDUserIDFlag   = dataGetDataByUserIDFlags.String("user-id", "REQUIRED", "Unique ID of the user")
		dataGetDataByUserIDOffsetFlag   = dataGetDataByUserIDFlags.String("offset", "REQUIRED", "Offset for pagination")
		dataGetDataByUserIDLimitFlag    = dataGetDataByUserIDFlags.String("limit", "REQUIRED", "Limit of items listed for pagination")
		dataGetDataByUserIDOauthFlag    = dataGetDataByUserIDFlags.String("oauth", "", "")
		dataGetDataByUserIDJWTTokenFlag = dataGetDataByUserIDFlags.String("jwt-token", "", "")

		dataGetDataByIDFlags        = flag.NewFlagSet("get-data-by-id", flag.ExitOnError)
		dataGetDataByIDIDFlag       = dataGetDataByIDFlags.String("id", "REQUIRED", "Unique ID of the data")
		dataGetDataByIDOauthFlag    = dataGetDataByIDFlags.String("oauth", "", "")
		dataGetDataByIDJWTTokenFlag = dataGetDataByIDFlags.String("jwt-token", "", "")

		filesFlags = flag.NewFlagSet("files", flag.ContinueOnError)

		filesImportFileFlags        = flag.NewFlagSet("import-file", flag.ExitOnError)
		filesImportFileBodyFlag     = filesImportFileFlags.String("body", "REQUIRED", "")
		filesImportFileOauthFlag    = filesImportFileFlags.String("oauth", "", "")
		filesImportFileJWTTokenFlag = filesImportFileFlags.String("jwt-token", "", "")

		filesDeleteFileFlags        = flag.NewFlagSet("delete-file", flag.ExitOnError)
		filesDeleteFileBodyFlag     = filesDeleteFileFlags.String("body", "REQUIRED", "")
		filesDeleteFileOauthFlag    = filesDeleteFileFlags.String("oauth", "", "")
		filesDeleteFileJWTTokenFlag = filesDeleteFileFlags.String("jwt-token", "", "")

		jwtTokenFlags = flag.NewFlagSet("jwt-token", flag.ContinueOnError)

		jwtTokenSignupFlags     = flag.NewFlagSet("signup", flag.ExitOnError)
		jwtTokenSignupBodyFlag  = jwtTokenSignupFlags.String("body", "REQUIRED", "")
		jwtTokenSignupOauthFlag = jwtTokenSignupFlags.String("oauth", "", "")

		jwtTokenSigninFlags     = flag.NewFlagSet("signin", flag.ExitOnError)
		jwtTokenSigninBodyFlag  = jwtTokenSigninFlags.String("body", "REQUIRED", "")
		jwtTokenSigninOauthFlag = jwtTokenSigninFlags.String("oauth", "", "")

		jwtTokenRefreshFlags     = flag.NewFlagSet("refresh", flag.ExitOnError)
		jwtTokenRefreshBodyFlag  = jwtTokenRefreshFlags.String("body", "REQUIRED", "")
		jwtTokenRefreshOauthFlag = jwtTokenRefreshFlags.String("oauth", "", "")

		jwtTokenSigninBoFlags     = flag.NewFlagSet("signin-bo", flag.ExitOnError)
		jwtTokenSigninBoBodyFlag  = jwtTokenSigninBoFlags.String("body", "REQUIRED", "")
		jwtTokenSigninBoOauthFlag = jwtTokenSigninBoFlags.String("oauth", "", "")

		oAuthFlags = flag.NewFlagSet("o-auth", flag.ContinueOnError)

		oAuthOAuthFlags    = flag.NewFlagSet("o-auth", flag.ExitOnError)
		oAuthOAuthBodyFlag = oAuthOAuthFlags.String("body", "REQUIRED", "")

		boFlags = flag.NewFlagSet("bo", flag.ContinueOnError)

		boGetBoUsersFlags         = flag.NewFlagSet("get-bo-users", flag.ExitOnError)
		boGetBoUsersOffsetFlag    = boGetBoUsersFlags.String("offset", "REQUIRED", "Offset for pagination")
		boGetBoUsersLimitFlag     = boGetBoUsersFlags.String("limit", "REQUIRED", "Limit of items listed for pagination")
		boGetBoUsersFieldFlag     = boGetBoUsersFlags.String("field", "name", "")
		boGetBoUsersDirectionFlag = boGetBoUsersFlags.String("direction", "asc", "")
		boGetBoUsersOauthFlag     = boGetBoUsersFlags.String("oauth", "", "")
		boGetBoUsersJWTTokenFlag  = boGetBoUsersFlags.String("jwt-token", "", "")

		boGetBoDataFlags         = flag.NewFlagSet("get-bo-data", flag.ExitOnError)
		boGetBoDataOffsetFlag    = boGetBoDataFlags.String("offset", "REQUIRED", "Offset for pagination")
		boGetBoDataLimitFlag     = boGetBoDataFlags.String("limit", "REQUIRED", "Limit of items listed for pagination")
		boGetBoDataFieldFlag     = boGetBoDataFlags.String("field", "name", "")
		boGetBoDataDirectionFlag = boGetBoDataFlags.String("direction", "asc", "")
		boGetBoDataOauthFlag     = boGetBoDataFlags.String("oauth", "", "")
		boGetBoDataJWTTokenFlag  = boGetBoDataFlags.String("jwt-token", "", "")

		boDeleteBoUserFlags        = flag.NewFlagSet("delete-bo-user", flag.ExitOnError)
		boDeleteBoUserIDFlag       = boDeleteBoUserFlags.String("id", "REQUIRED", "")
		boDeleteBoUserOauthFlag    = boDeleteBoUserFlags.String("oauth", "", "")
		boDeleteBoUserJWTTokenFlag = boDeleteBoUserFlags.String("jwt-token", "", "")

		boDeleteBoManyUsersFlags        = flag.NewFlagSet("delete-bo-many-users", flag.ExitOnError)
		boDeleteBoManyUsersBodyFlag     = boDeleteBoManyUsersFlags.String("body", "REQUIRED", "")
		boDeleteBoManyUsersOauthFlag    = boDeleteBoManyUsersFlags.String("oauth", "", "")
		boDeleteBoManyUsersJWTTokenFlag = boDeleteBoManyUsersFlags.String("jwt-token", "", "")

		boUpdateBoUserFlags        = flag.NewFlagSet("update-bo-user", flag.ExitOnError)
		boUpdateBoUserBodyFlag     = boUpdateBoUserFlags.String("body", "REQUIRED", "")
		boUpdateBoUserIDFlag       = boUpdateBoUserFlags.String("id", "REQUIRED", "")
		boUpdateBoUserOauthFlag    = boUpdateBoUserFlags.String("oauth", "", "")
		boUpdateBoUserJWTTokenFlag = boUpdateBoUserFlags.String("jwt-token", "", "")

		boGetBoUserFlags        = flag.NewFlagSet("get-bo-user", flag.ExitOnError)
		boGetBoUserIDFlag       = boGetBoUserFlags.String("id", "REQUIRED", "Unique ID of the User")
		boGetBoUserOauthFlag    = boGetBoUserFlags.String("oauth", "", "")
		boGetBoUserJWTTokenFlag = boGetBoUserFlags.String("jwt-token", "", "")

		publicUsersFlags = flag.NewFlagSet("public-users", flag.ContinueOnError)

		publicUsersGetUserByUsernameFlags        = flag.NewFlagSet("get-user-by-username", flag.ExitOnError)
		publicUsersGetUserByUsernameUsernameFlag = publicUsersGetUserByUsernameFlags.String("username", "REQUIRED", "")
		publicUsersGetUserByUsernameOauthFlag    = publicUsersGetUserByUsernameFlags.String("oauth", "", "")

		publicUsersListUsersFlags     = flag.NewFlagSet("list-users", flag.ExitOnError)
		publicUsersListUsersBodyFlag  = publicUsersListUsersFlags.String("body", "REQUIRED", "")
		publicUsersListUsersOauthFlag = publicUsersListUsersFlags.String("oauth", "", "")

		publicUsersListUsersMostRecentFlags      = flag.NewFlagSet("list-users-most-recent", flag.ExitOnError)
		publicUsersListUsersMostRecentOffsetFlag = publicUsersListUsersMostRecentFlags.String("offset", "REQUIRED", "Offset for pagination")
		publicUsersListUsersMostRecentLimitFlag  = publicUsersListUsersMostRecentFlags.String("limit", "REQUIRED", "Limit of items listed for pagination")
		publicUsersListUsersMostRecentOauthFlag  = publicUsersListUsersMostRecentFlags.String("oauth", "", "")

		usersFlags = flag.NewFlagSet("users", flag.ContinueOnError)

		usersDeleteUserFlags        = flag.NewFlagSet("delete-user", flag.ExitOnError)
		usersDeleteUserIDFlag       = usersDeleteUserFlags.String("id", "REQUIRED", "")
		usersDeleteUserOauthFlag    = usersDeleteUserFlags.String("oauth", "", "")
		usersDeleteUserJWTTokenFlag = usersDeleteUserFlags.String("jwt-token", "", "")

		usersUpdateAvatarFlags        = flag.NewFlagSet("update-avatar", flag.ExitOnError)
		usersUpdateAvatarBodyFlag     = usersUpdateAvatarFlags.String("body", "REQUIRED", "")
		usersUpdateAvatarOauthFlag    = usersUpdateAvatarFlags.String("oauth", "", "")
		usersUpdateAvatarJWTTokenFlag = usersUpdateAvatarFlags.String("jwt-token", "", "")

		usersUpdateNumberStockageFlags        = flag.NewFlagSet("update-number-stockage", flag.ExitOnError)
		usersUpdateNumberStockageBodyFlag     = usersUpdateNumberStockageFlags.String("body", "REQUIRED", "")
		usersUpdateNumberStockageOauthFlag    = usersUpdateNumberStockageFlags.String("oauth", "", "")
		usersUpdateNumberStockageJWTTokenFlag = usersUpdateNumberStockageFlags.String("jwt-token", "", "")

		usersGetUserByIDFlags        = flag.NewFlagSet("get-user-by-id", flag.ExitOnError)
		usersGetUserByIDIDFlag       = usersGetUserByIDFlags.String("id", "REQUIRED", "Unique ID of the User")
		usersGetUserByIDOauthFlag    = usersGetUserByIDFlags.String("oauth", "", "")
		usersGetUserByIDJWTTokenFlag = usersGetUserByIDFlags.String("jwt-token", "", "")

		usersUpdateDescriptionFlags        = flag.NewFlagSet("update-description", flag.ExitOnError)
		usersUpdateDescriptionBodyFlag     = usersUpdateDescriptionFlags.String("body", "REQUIRED", "")
		usersUpdateDescriptionOauthFlag    = usersUpdateDescriptionFlags.String("oauth", "", "")
		usersUpdateDescriptionJWTTokenFlag = usersUpdateDescriptionFlags.String("jwt-token", "", "")
	)
	authFlags.Usage = authUsage
	authEmailExistFlags.Usage = authEmailExistUsage
	authSendConfirmationFlags.Usage = authSendConfirmationUsage
	authResetPasswordFlags.Usage = authResetPasswordUsage

	boContactFlags.Usage = boContactUsage
	boContactGetBoContactFlags.Usage = boContactGetBoContactUsage
	boContactDeleteBoContactFlags.Usage = boContactDeleteBoContactUsage
	boContactGetBoContactByIDFlags.Usage = boContactGetBoContactByIDUsage
	boContactDeleteBoManyContactFlags.Usage = boContactDeleteBoManyContactUsage

	contactsFlags.Usage = contactsUsage
	contactsAddMessageFlags.Usage = contactsAddMessageUsage

	dataFlags.Usage = dataUsage
	dataListDataFlags.Usage = dataListDataUsage
	dataListDataMostRecentFlags.Usage = dataListDataMostRecentUsage
	dataCreateDataFlags.Usage = dataCreateDataUsage
	dataUpdateDataFlags.Usage = dataUpdateDataUsage
	dataGetDataByUserIDFlags.Usage = dataGetDataByUserIDUsage
	dataGetDataByIDFlags.Usage = dataGetDataByIDUsage

	filesFlags.Usage = filesUsage
	filesImportFileFlags.Usage = filesImportFileUsage
	filesDeleteFileFlags.Usage = filesDeleteFileUsage

	jwtTokenFlags.Usage = jwtTokenUsage
	jwtTokenSignupFlags.Usage = jwtTokenSignupUsage
	jwtTokenSigninFlags.Usage = jwtTokenSigninUsage
	jwtTokenRefreshFlags.Usage = jwtTokenRefreshUsage
	jwtTokenSigninBoFlags.Usage = jwtTokenSigninBoUsage

	oAuthFlags.Usage = oAuthUsage
	oAuthOAuthFlags.Usage = oAuthOAuthUsage

	boFlags.Usage = boUsage
	boGetBoUsersFlags.Usage = boGetBoUsersUsage
	boGetBoDataFlags.Usage = boGetBoDataUsage
	boDeleteBoUserFlags.Usage = boDeleteBoUserUsage
	boDeleteBoManyUsersFlags.Usage = boDeleteBoManyUsersUsage
	boUpdateBoUserFlags.Usage = boUpdateBoUserUsage
	boGetBoUserFlags.Usage = boGetBoUserUsage

	publicUsersFlags.Usage = publicUsersUsage
	publicUsersGetUserByUsernameFlags.Usage = publicUsersGetUserByUsernameUsage
	publicUsersListUsersFlags.Usage = publicUsersListUsersUsage
	publicUsersListUsersMostRecentFlags.Usage = publicUsersListUsersMostRecentUsage

	usersFlags.Usage = usersUsage
	usersDeleteUserFlags.Usage = usersDeleteUserUsage
	usersUpdateAvatarFlags.Usage = usersUpdateAvatarUsage
	usersUpdateNumberStockageFlags.Usage = usersUpdateNumberStockageUsage
	usersGetUserByIDFlags.Usage = usersGetUserByIDUsage
	usersUpdateDescriptionFlags.Usage = usersUpdateDescriptionUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "auth":
			svcf = authFlags
		case "bo-contact":
			svcf = boContactFlags
		case "contacts":
			svcf = contactsFlags
		case "data":
			svcf = dataFlags
		case "files":
			svcf = filesFlags
		case "jwt-token":
			svcf = jwtTokenFlags
		case "o-auth":
			svcf = oAuthFlags
		case "bo":
			svcf = boFlags
		case "public-users":
			svcf = publicUsersFlags
		case "users":
			svcf = usersFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "auth":
			switch epn {
			case "email-exist":
				epf = authEmailExistFlags

			case "send-confirmation":
				epf = authSendConfirmationFlags

			case "reset-password":
				epf = authResetPasswordFlags

			}

		case "bo-contact":
			switch epn {
			case "get-bo-contact":
				epf = boContactGetBoContactFlags

			case "delete-bo-contact":
				epf = boContactDeleteBoContactFlags

			case "get-bo-contact-by-id":
				epf = boContactGetBoContactByIDFlags

			case "delete-bo-many-contact":
				epf = boContactDeleteBoManyContactFlags

			}

		case "contacts":
			switch epn {
			case "add-message":
				epf = contactsAddMessageFlags

			}

		case "data":
			switch epn {
			case "list-data":
				epf = dataListDataFlags

			case "list-data-most-recent":
				epf = dataListDataMostRecentFlags

			case "create-data":
				epf = dataCreateDataFlags

			case "update-data":
				epf = dataUpdateDataFlags

			case "get-data-by-user-id":
				epf = dataGetDataByUserIDFlags

			case "get-data-by-id":
				epf = dataGetDataByIDFlags

			}

		case "files":
			switch epn {
			case "import-file":
				epf = filesImportFileFlags

			case "delete-file":
				epf = filesDeleteFileFlags

			}

		case "jwt-token":
			switch epn {
			case "signup":
				epf = jwtTokenSignupFlags

			case "signin":
				epf = jwtTokenSigninFlags

			case "refresh":
				epf = jwtTokenRefreshFlags

			case "signin-bo":
				epf = jwtTokenSigninBoFlags

			}

		case "o-auth":
			switch epn {
			case "o-auth":
				epf = oAuthOAuthFlags

			}

		case "bo":
			switch epn {
			case "get-bo-users":
				epf = boGetBoUsersFlags

			case "get-bo-data":
				epf = boGetBoDataFlags

			case "delete-bo-user":
				epf = boDeleteBoUserFlags

			case "delete-bo-many-users":
				epf = boDeleteBoManyUsersFlags

			case "update-bo-user":
				epf = boUpdateBoUserFlags

			case "get-bo-user":
				epf = boGetBoUserFlags

			}

		case "public-users":
			switch epn {
			case "get-user-by-username":
				epf = publicUsersGetUserByUsernameFlags

			case "list-users":
				epf = publicUsersListUsersFlags

			case "list-users-most-recent":
				epf = publicUsersListUsersMostRecentFlags

			}

		case "users":
			switch epn {
			case "delete-user":
				epf = usersDeleteUserFlags

			case "update-avatar":
				epf = usersUpdateAvatarFlags

			case "update-number-stockage":
				epf = usersUpdateNumberStockageFlags

			case "get-user-by-id":
				epf = usersGetUserByIDFlags

			case "update-description":
				epf = usersUpdateDescriptionFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "auth":
			c := authc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "email-exist":
				endpoint = c.EmailExist()
				data, err = authc.BuildEmailExistPayload(*authEmailExistBodyFlag, *authEmailExistOauthFlag)
			case "send-confirmation":
				endpoint = c.SendConfirmation()
				data, err = authc.BuildSendConfirmationPayload(*authSendConfirmationBodyFlag, *authSendConfirmationOauthFlag)
			case "reset-password":
				endpoint = c.ResetPassword()
				data, err = authc.BuildResetPasswordPayload(*authResetPasswordBodyFlag, *authResetPasswordOauthFlag)
			}
		case "bo-contact":
			c := bocontactc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "get-bo-contact":
				endpoint = c.GetBoContact()
				data, err = bocontactc.BuildGetBoContactPayload(*boContactGetBoContactOffsetFlag, *boContactGetBoContactLimitFlag, *boContactGetBoContactFieldFlag, *boContactGetBoContactDirectionFlag, *boContactGetBoContactOauthFlag, *boContactGetBoContactJWTTokenFlag)
			case "delete-bo-contact":
				endpoint = c.DeleteBoContact()
				data, err = bocontactc.BuildDeleteBoContactPayload(*boContactDeleteBoContactIDFlag, *boContactDeleteBoContactOauthFlag, *boContactDeleteBoContactJWTTokenFlag)
			case "get-bo-contact-by-id":
				endpoint = c.GetBoContactByID()
				data, err = bocontactc.BuildGetBoContactByIDPayload(*boContactGetBoContactByIDIDFlag, *boContactGetBoContactByIDOauthFlag, *boContactGetBoContactByIDJWTTokenFlag)
			case "delete-bo-many-contact":
				endpoint = c.DeleteBoManyContact()
				data, err = bocontactc.BuildDeleteBoManyContactPayload(*boContactDeleteBoManyContactBodyFlag, *boContactDeleteBoManyContactOauthFlag, *boContactDeleteBoManyContactJWTTokenFlag)
			}
		case "contacts":
			c := contactsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "add-message":
				endpoint = c.AddMessage()
				data, err = contactsc.BuildAddMessagePayload(*contactsAddMessageBodyFlag, *contactsAddMessageOauthFlag, *contactsAddMessageJWTTokenFlag)
			}
		case "data":
			c := datac.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list-data":
				endpoint = c.ListData()
				data, err = datac.BuildListDataPayload(*dataListDataBodyFlag, *dataListDataOauthFlag, *dataListDataJWTTokenFlag)
			case "list-data-most-recent":
				endpoint = c.ListDataMostRecent()
				data, err = datac.BuildListDataMostRecentPayload(*dataListDataMostRecentOffsetFlag, *dataListDataMostRecentLimitFlag, *dataListDataMostRecentOauthFlag, *dataListDataMostRecentJWTTokenFlag)
			case "create-data":
				endpoint = c.CreateData()
				data, err = datac.BuildCreateDataPayload(*dataCreateDataBodyFlag, *dataCreateDataOauthFlag, *dataCreateDataJWTTokenFlag)
			case "update-data":
				endpoint = c.UpdateData()
				data, err = datac.BuildUpdateDataPayload(*dataUpdateDataBodyFlag, *dataUpdateDataIDFlag, *dataUpdateDataOauthFlag, *dataUpdateDataJWTTokenFlag)
			case "get-data-by-user-id":
				endpoint = c.GetDataByUserID()
				data, err = datac.BuildGetDataByUserIDPayload(*dataGetDataByUserIDUserIDFlag, *dataGetDataByUserIDOffsetFlag, *dataGetDataByUserIDLimitFlag, *dataGetDataByUserIDOauthFlag, *dataGetDataByUserIDJWTTokenFlag)
			case "get-data-by-id":
				endpoint = c.GetDataByID()
				data, err = datac.BuildGetDataByIDPayload(*dataGetDataByIDIDFlag, *dataGetDataByIDOauthFlag, *dataGetDataByIDJWTTokenFlag)
			}
		case "files":
			c := filesc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "import-file":
				endpoint = c.ImportFile(filesImportFileEncoderFn)
				data, err = filesc.BuildImportFilePayload(*filesImportFileBodyFlag, *filesImportFileOauthFlag, *filesImportFileJWTTokenFlag)
			case "delete-file":
				endpoint = c.DeleteFile()
				data, err = filesc.BuildDeleteFilePayload(*filesDeleteFileBodyFlag, *filesDeleteFileOauthFlag, *filesDeleteFileJWTTokenFlag)
			}
		case "jwt-token":
			c := jwttokenc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "signup":
				endpoint = c.Signup()
				data, err = jwttokenc.BuildSignupPayload(*jwtTokenSignupBodyFlag, *jwtTokenSignupOauthFlag)
			case "signin":
				endpoint = c.Signin()
				data, err = jwttokenc.BuildSigninPayload(*jwtTokenSigninBodyFlag, *jwtTokenSigninOauthFlag)
			case "refresh":
				endpoint = c.Refresh()
				data, err = jwttokenc.BuildRefreshPayload(*jwtTokenRefreshBodyFlag, *jwtTokenRefreshOauthFlag)
			case "signin-bo":
				endpoint = c.SigninBo()
				data, err = jwttokenc.BuildSigninBoPayload(*jwtTokenSigninBoBodyFlag, *jwtTokenSigninBoOauthFlag)
			}
		case "o-auth":
			c := oauthc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "o-auth":
				endpoint = c.OAuth()
				data, err = oauthc.BuildOAuthPayload(*oAuthOAuthBodyFlag)
			}
		case "bo":
			c := boc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "get-bo-users":
				endpoint = c.GetBoUsers()
				data, err = boc.BuildGetBoUsersPayload(*boGetBoUsersOffsetFlag, *boGetBoUsersLimitFlag, *boGetBoUsersFieldFlag, *boGetBoUsersDirectionFlag, *boGetBoUsersOauthFlag, *boGetBoUsersJWTTokenFlag)
			case "get-bo-data":
				endpoint = c.GetBoData()
				data, err = boc.BuildGetBoDataPayload(*boGetBoDataOffsetFlag, *boGetBoDataLimitFlag, *boGetBoDataFieldFlag, *boGetBoDataDirectionFlag, *boGetBoDataOauthFlag, *boGetBoDataJWTTokenFlag)
			case "delete-bo-user":
				endpoint = c.DeleteBoUser()
				data, err = boc.BuildDeleteBoUserPayload(*boDeleteBoUserIDFlag, *boDeleteBoUserOauthFlag, *boDeleteBoUserJWTTokenFlag)
			case "delete-bo-many-users":
				endpoint = c.DeleteBoManyUsers()
				data, err = boc.BuildDeleteBoManyUsersPayload(*boDeleteBoManyUsersBodyFlag, *boDeleteBoManyUsersOauthFlag, *boDeleteBoManyUsersJWTTokenFlag)
			case "update-bo-user":
				endpoint = c.UpdateBoUser()
				data, err = boc.BuildUpdateBoUserPayload(*boUpdateBoUserBodyFlag, *boUpdateBoUserIDFlag, *boUpdateBoUserOauthFlag, *boUpdateBoUserJWTTokenFlag)
			case "get-bo-user":
				endpoint = c.GetBoUser()
				data, err = boc.BuildGetBoUserPayload(*boGetBoUserIDFlag, *boGetBoUserOauthFlag, *boGetBoUserJWTTokenFlag)
			}
		case "public-users":
			c := publicusersc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "get-user-by-username":
				endpoint = c.GetUserByUsername()
				data, err = publicusersc.BuildGetUserByUsernamePayload(*publicUsersGetUserByUsernameUsernameFlag, *publicUsersGetUserByUsernameOauthFlag)
			case "list-users":
				endpoint = c.ListUsers()
				data, err = publicusersc.BuildListUsersPayload(*publicUsersListUsersBodyFlag, *publicUsersListUsersOauthFlag)
			case "list-users-most-recent":
				endpoint = c.ListUsersMostRecent()
				data, err = publicusersc.BuildListUsersMostRecentPayload(*publicUsersListUsersMostRecentOffsetFlag, *publicUsersListUsersMostRecentLimitFlag, *publicUsersListUsersMostRecentOauthFlag)
			}
		case "users":
			c := usersc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "delete-user":
				endpoint = c.DeleteUser()
				data, err = usersc.BuildDeleteUserPayload(*usersDeleteUserIDFlag, *usersDeleteUserOauthFlag, *usersDeleteUserJWTTokenFlag)
			case "update-avatar":
				endpoint = c.UpdateAvatar()
				data, err = usersc.BuildUpdateAvatarPayload(*usersUpdateAvatarBodyFlag, *usersUpdateAvatarOauthFlag, *usersUpdateAvatarJWTTokenFlag)
			case "update-number-stockage":
				endpoint = c.UpdateNumberStockage()
				data, err = usersc.BuildUpdateNumberStockagePayload(*usersUpdateNumberStockageBodyFlag, *usersUpdateNumberStockageOauthFlag, *usersUpdateNumberStockageJWTTokenFlag)
			case "get-user-by-id":
				endpoint = c.GetUserByID()
				data, err = usersc.BuildGetUserByIDPayload(*usersGetUserByIDIDFlag, *usersGetUserByIDOauthFlag, *usersGetUserByIDJWTTokenFlag)
			case "update-description":
				endpoint = c.UpdateDescription()
				data, err = usersc.BuildUpdateDescriptionPayload(*usersUpdateDescriptionBodyFlag, *usersUpdateDescriptionOauthFlag, *usersUpdateDescriptionJWTTokenFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// authUsage displays the usage of the auth command and its subcommands.
func authUsage() {
	fmt.Fprintf(os.Stderr, `Forget password / reset password / send Email Code
Usage:
    %[1]s [globalflags] auth COMMAND [flags]

COMMAND:
    email-exist: Check if email exist in database
    send-confirmation: Check if email exist in database and send code by email to reset password
    reset-password: Reset forget password of the user with the correct confirm code

Additional help:
    %[1]s auth COMMAND --help
`, os.Args[0])
}
func authEmailExistUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] auth email-exist -body JSON -oauth STRING

Check if email exist in database
    -body JSON: 
    -oauth STRING: 

Example:
    %[1]s auth email-exist --body '{
      "email": "guillaume@gmail.com"
   }' --oauth "At aut."
`, os.Args[0])
}

func authSendConfirmationUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] auth send-confirmation -body JSON -oauth STRING

Check if email exist in database and send code by email to reset password
    -body JSON: 
    -oauth STRING: 

Example:
    %[1]s auth send-confirmation --body '{
      "email": "guillaume@gmail.com"
   }' --oauth "Incidunt similique aut voluptatem."
`, os.Args[0])
}

func authResetPasswordUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] auth reset-password -body JSON -oauth STRING

Reset forget password of the user with the correct confirm code
    -body JSON: 
    -oauth STRING: 

Example:
    %[1]s auth reset-password --body '{
      "code": "ZGI5E",
      "confirm_password": "JeSuisUnTest974",
      "email": "guillaume@gmail.com",
      "password": "JeSuisUnTest974"
   }' --oauth "Porro non natus fugiat."
`, os.Args[0])
}

// bo-contactUsage displays the usage of the bo-contact command and its
// subcommands.
func boContactUsage() {
	fmt.Fprintf(os.Stderr, `back office contacts of the api
Usage:
    %[1]s [globalflags] bo-contact COMMAND [flags]

COMMAND:
    get-bo-contact: Get All messages
    delete-bo-contact: Delete one contact by ID
    get-bo-contact-by-id: get one contact by ID
    delete-bo-many-contact: Delete many contact with IDs send in body

Additional help:
    %[1]s bo-contact COMMAND --help
`, os.Args[0])
}
func boContactGetBoContactUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] bo-contact get-bo-contact -offset INT32 -limit INT32 -field STRING -direction STRING -oauth STRING -jwt-token STRING

Get All messages
    -offset INT32: Offset for pagination
    -limit INT32: Limit of items listed for pagination
    -field STRING: 
    -direction STRING: 
    -oauth STRING: 
    -jwt-token STRING: 

Example:
    %[1]s bo-contact get-bo-contact --offset 0 --limit 9 --field "name" --direction "asc" --oauth "Enim distinctio veritatis architecto ut neque quod." --jwt-token "Aut quis aut ea."
`, os.Args[0])
}

func boContactDeleteBoContactUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] bo-contact delete-bo-contact -id STRING -oauth STRING -jwt-token STRING

Delete one contact by ID
    -id STRING: 
    -oauth STRING: 
    -jwt-token STRING: 

Example:
    %[1]s bo-contact delete-bo-contact --id "5dfb0bf7-597a-4250-b7ad-63a43ff59c25" --oauth "Quas sapiente odit ducimus tenetur quos aut." --jwt-token "Sunt quo mollitia."
`, os.Args[0])
}

func boContactGetBoContactByIDUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] bo-contact get-bo-contact-by-id -id STRING -oauth STRING -jwt-token STRING

get one contact by ID
    -id STRING: 
    -oauth STRING: 
    -jwt-token STRING: 

Example:
    %[1]s bo-contact get-bo-contact-by-id --id "5dfb0bf7-597a-4250-b7ad-63a43ff59c25" --oauth "Necessitatibus dolorem animi vero." --jwt-token "Veniam fuga eos repellat tenetur dolorem."
`, os.Args[0])
}

func boContactDeleteBoManyContactUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] bo-contact delete-bo-many-contact -body JSON -oauth STRING -jwt-token STRING

Delete many contact with IDs send in body
    -body JSON: 
    -oauth STRING: 
    -jwt-token STRING: 

Example:
    %[1]s bo-contact delete-bo-many-contact --body '{
      "tab": [
         "Adipisci harum ipsum.",
         "In beatae fugiat unde eos possimus mollitia."
      ]
   }' --oauth "Dolorum rem rerum." --jwt-token "Facere quaerat."
`, os.Args[0])
}

// contactsUsage displays the usage of the contacts command and its subcommands.
func contactsUsage() {
	fmt.Fprintf(os.Stderr, `contacts of the api
Usage:
    %[1]s [globalflags] contacts COMMAND [flags]

COMMAND:
    add-message: user ask for something

Additional help:
    %[1]s contacts COMMAND --help
`, os.Args[0])
}
func contactsAddMessageUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] contacts add-message -body JSON -oauth STRING -jwt-token STRING

user ask for something
    -body JSON: 
    -oauth STRING: 
    -jwt-token STRING: 

Example:
    %[1]s contacts add-message --body '{
      "msg": "Je reprends l\'app pour un million",
      "user_id": "5dfb0bf7-597a-4250-b7ad-63a43ff59c25"
   }' --oauth "Saepe quia beatae autem reprehenderit." --jwt-token "Modi esse ducimus magnam beatae sapiente."
`, os.Args[0])
}

// dataUsage displays the usage of the data command and its subcommands.
func dataUsage() {
	fmt.Fprintf(os.Stderr, `futristics data of the api
Usage:
    %[1]s [globalflags] data COMMAND [flags]

COMMAND:
    list-data: List data for search bar
    list-data-most-recent: List data the most recent
    create-data: Create one data
    update-data: Update one data
    get-data-by-user-id: Get one data user id
    get-data-by-id: Get one data by id

Additional help:
    %[1]s data COMMAND --help
`, os.Args[0])
}
func dataListDataUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] data list-data -body JSON -oauth STRING -jwt-token STRING

List data for search bar
    -body JSON: 
    -oauth STRING: 
    -jwt-token STRING: 

Example:
    %[1]s data list-data --body '{
      "key": "Mars"
   }' --oauth "Id rerum fuga." --jwt-token "Pariatur nisi."
`, os.Args[0])
}

func dataListDataMostRecentUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] data list-data-most-recent -offset INT32 -limit INT32 -oauth STRING -jwt-token STRING

List data the most recent
    -offset INT32: Offset for pagination
    -limit INT32: Limit of items listed for pagination
    -oauth STRING: 
    -jwt-token STRING: 

Example:
    %[1]s data list-data-most-recent --offset 0 --limit 5 --oauth "Molestiae iste sed eos sed." --jwt-token "Totam ut ea."
`, os.Args[0])
}

func dataCreateDataUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] data create-data -body JSON -oauth STRING -jwt-token STRING

Create one data
    -body JSON: 
    -oauth STRING: 
    -jwt-token STRING: 

Example:
    %[1]s data create-data --body '{
      "data": {
         "category": "autre",
         "description": "Unique Air max restant au monde",
         "image": "Minus rerum ea sed non nobis.",
         "title": "Air max360 d\'il y a 10 millions d\'années",
         "user_id": "5dfb0bf7-597a-4250-b7ad-63a43ff59c25"
      }
   }' --oauth "Voluptatibus est officiis earum sint et." --jwt-token "Dolorem assumenda qui commodi qui voluptatibus molestias."
`, os.Args[0])
}

func dataUpdateDataUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] data update-data -body JSON -id STRING -oauth STRING -jwt-token STRING

Update one data
    -body JSON: 
    -id STRING: 
    -oauth STRING: 
    -jwt-token STRING: 

Example:
    %[1]s data update-data --body '{
      "data": {
         "category": "autre",
         "description": "Unique Air max restant au monde",
         "image": "Minus rerum ea sed non nobis.",
         "title": "Air max360 d\'il y a 10 millions d\'années",
         "user_id": "5dfb0bf7-597a-4250-b7ad-63a43ff59c25"
      }
   }' --id "5dfb0bf7-597a-4250-b7ad-63a43ff59c25" --oauth "Nemo dicta voluptas excepturi voluptatem odio quae." --jwt-token "A dolores."
`, os.Args[0])
}

func dataGetDataByUserIDUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] data get-data-by-user-id -user-id STRING -offset INT32 -limit INT32 -oauth STRING -jwt-token STRING

Get one data user id
    -user-id STRING: Unique ID of the user
    -offset INT32: Offset for pagination
    -limit INT32: Limit of items listed for pagination
    -oauth STRING: 
    -jwt-token STRING: 

Example:
    %[1]s data get-data-by-user-id --user-id "5dfb0bf7-597a-4250-b7ad-63a43ff59c25" --offset 0 --limit 5 --oauth "Similique in ratione ratione fuga ut." --jwt-token "Molestiae et."
`, os.Args[0])
}

func dataGetDataByIDUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] data get-data-by-id -id STRING -oauth STRING -jwt-token STRING

Get one data by id
    -id STRING: Unique ID of the data
    -oauth STRING: 
    -jwt-token STRING: 

Example:
    %[1]s data get-data-by-id --id "5dfb0bf7-597a-4250-b7ad-63a43ff59c25" --oauth "Et est laudantium debitis." --jwt-token "Necessitatibus corporis excepturi reprehenderit voluptatum fugiat odit."
`, os.Args[0])
}

// filesUsage displays the usage of the files command and its subcommands.
func filesUsage() {
	fmt.Fprintf(os.Stderr, `files of the api
Usage:
    %[1]s [globalflags] files COMMAND [flags]

COMMAND:
    import-file: Import file
    delete-file: Delete one file by ID

Additional help:
    %[1]s files COMMAND --help
`, os.Args[0])
}
func filesImportFileUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] files import-file -body JSON -oauth STRING -jwt-token STRING

Import file
    -body JSON: 
    -oauth STRING: 
    -jwt-token STRING: 

Example:
    %[1]s files import-file --body '{
      "content": "SXRhcXVlIHRlbXBvcmUu",
      "filename": "foo.jpg",
      "format": "image/jpeg",
      "h": 8213129504107496369,
      "mime": "Incidunt ipsam asperiores facilis.",
      "size": 7940255785138466612,
      "url": "Enim et omnis deleniti exercitationem.",
      "w": 466048715731699887
   }' --oauth "Corporis sed." --jwt-token "Animi qui corporis aut deserunt asperiores."
`, os.Args[0])
}

func filesDeleteFileUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] files delete-file -body JSON -oauth STRING -jwt-token STRING

Delete one file by ID
    -body JSON: 
    -oauth STRING: 
    -jwt-token STRING: 

Example:
    %[1]s files delete-file --body '{
      "url": "/public/uploads/2021/12/2ca51d10-b660-4b2c-b27f-f7a119642885.png"
   }' --oauth "Nam modi tenetur dicta." --jwt-token "Minima libero veniam explicabo non."
`, os.Args[0])
}

// jwt-tokenUsage displays the usage of the jwt-token command and its
// subcommands.
func jwtTokenUsage() {
	fmt.Fprintf(os.Stderr, `Use Token to authenticate. Signin and Signup
Usage:
    %[1]s [globalflags] jwt-token COMMAND [flags]

COMMAND:
    signup: signup to generate jwt token
    signin: signin
    refresh: Refresh Token
    signin-bo: signin for back-office, user needs to be admin

Additional help:
    %[1]s jwt-token COMMAND --help
`, os.Args[0])
}
func jwtTokenSignupUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] jwt-token signup -body JSON -oauth STRING

signup to generate jwt token
    -body JSON: 
    -oauth STRING: 

Example:
    %[1]s jwt-token signup --body '{
      "confirm_password": "JeSuisUnTest974",
      "email": "guillaume@epitech.eu",
      "password": "JeSuisUnTest974",
      "username": "guillaumemoriin"
   }' --oauth "A dolorem veritatis."
`, os.Args[0])
}

func jwtTokenSigninUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] jwt-token signin -body JSON -oauth STRING

signin
    -body JSON: 
    -oauth STRING: 

Example:
    %[1]s jwt-token signin --body '{
      "email": "guillaume@epitech.eu",
      "password": "JeSuisUnTest974"
   }' --oauth "Aliquam labore doloribus quis."
`, os.Args[0])
}

func jwtTokenRefreshUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] jwt-token refresh -body JSON -oauth STRING

Refresh Token
    -body JSON: 
    -oauth STRING: 

Example:
    %[1]s jwt-token refresh --body '{
      "refresh_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ"
   }' --oauth "A et exercitationem autem."
`, os.Args[0])
}

func jwtTokenSigninBoUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] jwt-token signin-bo -body JSON -oauth STRING

signin for back-office, user needs to be admin
    -body JSON: 
    -oauth STRING: 

Example:
    %[1]s jwt-token signin-bo --body '{
      "email": "guillaume@epitech.eu",
      "password": "JeSuisUnTest974"
   }' --oauth "Error consequuntur sint saepe qui ut."
`, os.Args[0])
}

// o-authUsage displays the usage of the o-auth command and its subcommands.
func oAuthUsage() {
	fmt.Fprintf(os.Stderr, `Oauth to authentificate
Usage:
    %[1]s [globalflags] o-auth COMMAND [flags]

COMMAND:
    o-auth: oAuth

Additional help:
    %[1]s o-auth COMMAND --help
`, os.Args[0])
}
func oAuthOAuthUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] o-auth o-auth -body JSON

oAuth
    -body JSON: 

Example:
    %[1]s o-auth o-auth --body '{
      "client_id": "Qui magnam rem labore et.",
      "client_secret": "At optio odio.",
      "grant_type": "Placeat nihil qui provident."
   }'
`, os.Args[0])
}

// boUsage displays the usage of the bo command and its subcommands.
func boUsage() {
	fmt.Fprintf(os.Stderr, `bo of the api
Usage:
    %[1]s [globalflags] bo COMMAND [flags]

COMMAND:
    get-bo-users: Get All users
    get-bo-data: Get All data
    delete-bo-user: Delete one User by ID
    delete-bo-many-users: Delete many users with IDs send in body
    update-bo-user: Update one User
    get-bo-user: Get one User

Additional help:
    %[1]s bo COMMAND --help
`, os.Args[0])
}
func boGetBoUsersUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] bo get-bo-users -offset INT32 -limit INT32 -field STRING -direction STRING -oauth STRING -jwt-token STRING

Get All users
    -offset INT32: Offset for pagination
    -limit INT32: Limit of items listed for pagination
    -field STRING: 
    -direction STRING: 
    -oauth STRING: 
    -jwt-token STRING: 

Example:
    %[1]s bo get-bo-users --offset 0 --limit 9 --field "name" --direction "asc" --oauth "Et iusto consequatur autem aut sit consequuntur." --jwt-token "Mollitia aut incidunt."
`, os.Args[0])
}

func boGetBoDataUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] bo get-bo-data -offset INT32 -limit INT32 -field STRING -direction STRING -oauth STRING -jwt-token STRING

Get All data
    -offset INT32: Offset for pagination
    -limit INT32: Limit of items listed for pagination
    -field STRING: 
    -direction STRING: 
    -oauth STRING: 
    -jwt-token STRING: 

Example:
    %[1]s bo get-bo-data --offset 0 --limit 9 --field "name" --direction "asc" --oauth "Nihil sapiente eos suscipit." --jwt-token "Aliquid id doloremque enim et quia vel."
`, os.Args[0])
}

func boDeleteBoUserUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] bo delete-bo-user -id STRING -oauth STRING -jwt-token STRING

Delete one User by ID
    -id STRING: 
    -oauth STRING: 
    -jwt-token STRING: 

Example:
    %[1]s bo delete-bo-user --id "5dfb0bf7-597a-4250-b7ad-63a43ff59c25" --oauth "Eos soluta sed." --jwt-token "Necessitatibus sint."
`, os.Args[0])
}

func boDeleteBoManyUsersUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] bo delete-bo-many-users -body JSON -oauth STRING -jwt-token STRING

Delete many users with IDs send in body
    -body JSON: 
    -oauth STRING: 
    -jwt-token STRING: 

Example:
    %[1]s bo delete-bo-many-users --body '{
      "tab": [
         "Et et quidem quae quos est.",
         "Sapiente consequuntur aut est alias eaque cupiditate.",
         "Architecto vel soluta necessitatibus animi quaerat architecto."
      ]
   }' --oauth "Autem repellendus eum provident." --jwt-token "Qui pariatur enim."
`, os.Args[0])
}

func boUpdateBoUserUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] bo update-bo-user -body JSON -id STRING -oauth STRING -jwt-token STRING

Update one User
    -body JSON: 
    -id STRING: 
    -oauth STRING: 
    -jwt-token STRING: 

Example:
    %[1]s bo update-bo-user --body '{
      "user": {
         "avatar": "Laborum ea cum ad ipsam facere.",
         "email": "guillaume@gmail.com",
         "firstname": "Guillaume",
         "lastname": "Morin",
         "role": "admin",
         "username": "guillaumemoriin"
      }
   }' --id "5dfb0bf7-597a-4250-b7ad-63a43ff59c25" --oauth "Molestiae esse exercitationem ut quia." --jwt-token "Magni maiores."
`, os.Args[0])
}

func boGetBoUserUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] bo get-bo-user -id STRING -oauth STRING -jwt-token STRING

Get one User
    -id STRING: Unique ID of the User
    -oauth STRING: 
    -jwt-token STRING: 

Example:
    %[1]s bo get-bo-user --id "5dfb0bf7-597a-4250-b7ad-63a43ff59c25" --oauth "Voluptas adipisci omnis sunt quos ratione fuga." --jwt-token "Consequatur laborum perspiciatis fugiat sit dolorum aliquam."
`, os.Args[0])
}

// public-usersUsage displays the usage of the public-users command and its
// subcommands.
func publicUsersUsage() {
	fmt.Fprintf(os.Stderr, `public route of users
Usage:
    %[1]s [globalflags] public-users COMMAND [flags]

COMMAND:
    get-user-by-username: Get one User by username
    list-users: List users for search bar
    list-users-most-recent: List users the most recent

Additional help:
    %[1]s public-users COMMAND --help
`, os.Args[0])
}
func publicUsersGetUserByUsernameUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] public-users get-user-by-username -username STRING -oauth STRING

Get one User by username
    -username STRING: 
    -oauth STRING: 

Example:
    %[1]s public-users get-user-by-username --username "guillaumemoriin" --oauth "Optio suscipit."
`, os.Args[0])
}

func publicUsersListUsersUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] public-users list-users -body JSON -oauth STRING

List users for search bar
    -body JSON: 
    -oauth STRING: 

Example:
    %[1]s public-users list-users --body '{
      "key": "guillaumemoriin"
   }' --oauth "Et dolores nisi quia quis."
`, os.Args[0])
}

func publicUsersListUsersMostRecentUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] public-users list-users-most-recent -offset INT32 -limit INT32 -oauth STRING

List users the most recent
    -offset INT32: Offset for pagination
    -limit INT32: Limit of items listed for pagination
    -oauth STRING: 

Example:
    %[1]s public-users list-users-most-recent --offset 0 --limit 5 --oauth "Est quos ad libero voluptas aspernatur enim."
`, os.Args[0])
}

// usersUsage displays the usage of the users command and its subcommands.
func usersUsage() {
	fmt.Fprintf(os.Stderr, `users of the api
Usage:
    %[1]s [globalflags] users COMMAND [flags]

COMMAND:
    delete-user: Delete one User by ID
    update-avatar: Update avatar
    update-number-stockage: Update number stockage
    get-user-by-id: Get one User
    update-description: Update main info like email, username, firstname, lastname

Additional help:
    %[1]s users COMMAND --help
`, os.Args[0])
}
func usersDeleteUserUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] users delete-user -id STRING -oauth STRING -jwt-token STRING

Delete one User by ID
    -id STRING: 
    -oauth STRING: 
    -jwt-token STRING: 

Example:
    %[1]s users delete-user --id "5dfb0bf7-597a-4250-b7ad-63a43ff59c25" --oauth "Dolores fugit est consequatur." --jwt-token "Minima consequatur nesciunt ut."
`, os.Args[0])
}

func usersUpdateAvatarUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] users update-avatar -body JSON -oauth STRING -jwt-token STRING

Update avatar
    -body JSON: 
    -oauth STRING: 
    -jwt-token STRING: 

Example:
    %[1]s users update-avatar --body '{
      "avatar": "Cumque quia optio rerum.",
      "id": "5dfb0bf7-597a-4250-b7ad-63a43ff59c25"
   }' --oauth "Facere ipsam ipsum." --jwt-token "Totam quia perspiciatis dolorum."
`, os.Args[0])
}

func usersUpdateNumberStockageUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] users update-number-stockage -body JSON -oauth STRING -jwt-token STRING

Update number stockage
    -body JSON: 
    -oauth STRING: 
    -jwt-token STRING: 

Example:
    %[1]s users update-number-stockage --body '{
      "id": "5dfb0bf7-597a-4250-b7ad-63a43ff59c25",
      "number": 2285170554064599612
   }' --oauth "Eveniet velit aperiam." --jwt-token "Natus dolor eaque modi."
`, os.Args[0])
}

func usersGetUserByIDUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] users get-user-by-id -id STRING -oauth STRING -jwt-token STRING

Get one User
    -id STRING: Unique ID of the User
    -oauth STRING: 
    -jwt-token STRING: 

Example:
    %[1]s users get-user-by-id --id "5dfb0bf7-597a-4250-b7ad-63a43ff59c25" --oauth "Est illo maiores." --jwt-token "Deserunt mollitia maxime eius."
`, os.Args[0])
}

func usersUpdateDescriptionUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] users update-description -body JSON -oauth STRING -jwt-token STRING

Update main info like email, username, firstname, lastname
    -body JSON: 
    -oauth STRING: 
    -jwt-token STRING: 

Example:
    %[1]s users update-description --body '{
      "email": "guillaume@gmail.com",
      "firstname": "Guillaume",
      "id": "5dfb0bf7-597a-4250-b7ad-63a43ff59c25",
      "lastname": "Morin",
      "username": "guillaumemoriin"
   }' --oauth "Id omnis sit consequatur beatae." --jwt-token "Dolorem nisi accusantium molestiae quibusdam laudantium."
`, os.Args[0])
}
