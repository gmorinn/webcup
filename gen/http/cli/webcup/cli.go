// Code generated by goa v3.7.3, DO NOT EDIT.
//
// webcup HTTP client CLI support package
//
// Command:
// $ goa gen webcup/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"
	authc "webcup/gen/http/auth/client"
	contactsc "webcup/gen/http/contacts/client"
	filesc "webcup/gen/http/files/client"
	jwttokenc "webcup/gen/http/jwt_token/client"
	oauthc "webcup/gen/http/o_auth/client"
	publicusersc "webcup/gen/http/public_users/client"
	usersc "webcup/gen/http/users/client"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `auth (email-exist|send-confirmation|reset-password)
contacts add-message
files (import-file|delete-file)
jwt-token (signup|signin|refresh)
o-auth o-auth
public-users (get-user-by-username|list-users|list-users-most-recent)
users (delete-user|get-user-by-id|update-description)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` auth email-exist --body '{
      "email": "guillaume@gmail.com"
   }' --oauth "Et mollitia enim vel ipsa nostrum aut."` + "\n" +
		os.Args[0] + ` contacts add-message --body '{
      "msg": "Je reprends l\'app pour un million",
      "user_id": "5dfb0bf7-597a-4250-b7ad-63a43ff59c25"
   }' --oauth "Enim delectus." --jwt-token "Quidem totam."` + "\n" +
		os.Args[0] + ` files import-file --body '{
      "content": "SWxsbyBxdW8gYWxpcXVpZCBhbWV0IG5vYmlzLg==",
      "filename": "foo.jpg",
      "format": "image/jpeg",
      "h": 3954212567730331431,
      "mime": "Vel mollitia.",
      "size": 3028238973827103103,
      "url": "Autem vero dolorem aperiam cum reprehenderit ad.",
      "w": 6083434384460884878
   }' --oauth "Aut cumque quibusdam." --jwt-token "Suscipit ipsam quam sint quia."` + "\n" +
		os.Args[0] + ` jwt-token signup --body '{
      "confirm_password": "JeSuisUnTest974",
      "email": "guillaume@epitech.eu",
      "password": "JeSuisUnTest974",
      "username": "guillaumemoriin"
   }' --oauth "Dolor dicta natus assumenda ut et."` + "\n" +
		os.Args[0] + ` o-auth o-auth --body '{
      "client_id": "Impedit ut molestiae eveniet omnis omnis.",
      "client_secret": "Amet est quidem quidem voluptatem.",
      "grant_type": "Saepe perferendis."
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
	filesImportFileEncoderFn filesc.FilesImportFileEncoderFunc,
) (goa.Endpoint, interface{}, error) {
	var (
		authFlags = flag.NewFlagSet("auth", flag.ContinueOnError)

		authEmailExistFlags     = flag.NewFlagSet("email-exist", flag.ExitOnError)
		authEmailExistBodyFlag  = authEmailExistFlags.String("body", "REQUIRED", "")
		authEmailExistOauthFlag = authEmailExistFlags.String("oauth", "", "")

		authSendConfirmationFlags     = flag.NewFlagSet("send-confirmation", flag.ExitOnError)
		authSendConfirmationBodyFlag  = authSendConfirmationFlags.String("body", "REQUIRED", "")
		authSendConfirmationOauthFlag = authSendConfirmationFlags.String("oauth", "", "")

		authResetPasswordFlags     = flag.NewFlagSet("reset-password", flag.ExitOnError)
		authResetPasswordBodyFlag  = authResetPasswordFlags.String("body", "REQUIRED", "")
		authResetPasswordOauthFlag = authResetPasswordFlags.String("oauth", "", "")

		contactsFlags = flag.NewFlagSet("contacts", flag.ContinueOnError)

		contactsAddMessageFlags        = flag.NewFlagSet("add-message", flag.ExitOnError)
		contactsAddMessageBodyFlag     = contactsAddMessageFlags.String("body", "REQUIRED", "")
		contactsAddMessageOauthFlag    = contactsAddMessageFlags.String("oauth", "", "")
		contactsAddMessageJWTTokenFlag = contactsAddMessageFlags.String("jwt-token", "", "")

		filesFlags = flag.NewFlagSet("files", flag.ContinueOnError)

		filesImportFileFlags        = flag.NewFlagSet("import-file", flag.ExitOnError)
		filesImportFileBodyFlag     = filesImportFileFlags.String("body", "REQUIRED", "")
		filesImportFileOauthFlag    = filesImportFileFlags.String("oauth", "", "")
		filesImportFileJWTTokenFlag = filesImportFileFlags.String("jwt-token", "", "")

		filesDeleteFileFlags        = flag.NewFlagSet("delete-file", flag.ExitOnError)
		filesDeleteFileBodyFlag     = filesDeleteFileFlags.String("body", "REQUIRED", "")
		filesDeleteFileOauthFlag    = filesDeleteFileFlags.String("oauth", "", "")
		filesDeleteFileJWTTokenFlag = filesDeleteFileFlags.String("jwt-token", "", "")

		jwtTokenFlags = flag.NewFlagSet("jwt-token", flag.ContinueOnError)

		jwtTokenSignupFlags     = flag.NewFlagSet("signup", flag.ExitOnError)
		jwtTokenSignupBodyFlag  = jwtTokenSignupFlags.String("body", "REQUIRED", "")
		jwtTokenSignupOauthFlag = jwtTokenSignupFlags.String("oauth", "", "")

		jwtTokenSigninFlags     = flag.NewFlagSet("signin", flag.ExitOnError)
		jwtTokenSigninBodyFlag  = jwtTokenSigninFlags.String("body", "REQUIRED", "")
		jwtTokenSigninOauthFlag = jwtTokenSigninFlags.String("oauth", "", "")

		jwtTokenRefreshFlags     = flag.NewFlagSet("refresh", flag.ExitOnError)
		jwtTokenRefreshBodyFlag  = jwtTokenRefreshFlags.String("body", "REQUIRED", "")
		jwtTokenRefreshOauthFlag = jwtTokenRefreshFlags.String("oauth", "", "")

		oAuthFlags = flag.NewFlagSet("o-auth", flag.ContinueOnError)

		oAuthOAuthFlags    = flag.NewFlagSet("o-auth", flag.ExitOnError)
		oAuthOAuthBodyFlag = oAuthOAuthFlags.String("body", "REQUIRED", "")

		publicUsersFlags = flag.NewFlagSet("public-users", flag.ContinueOnError)

		publicUsersGetUserByUsernameFlags        = flag.NewFlagSet("get-user-by-username", flag.ExitOnError)
		publicUsersGetUserByUsernameUsernameFlag = publicUsersGetUserByUsernameFlags.String("username", "REQUIRED", "")
		publicUsersGetUserByUsernameOauthFlag    = publicUsersGetUserByUsernameFlags.String("oauth", "", "")

		publicUsersListUsersFlags     = flag.NewFlagSet("list-users", flag.ExitOnError)
		publicUsersListUsersBodyFlag  = publicUsersListUsersFlags.String("body", "REQUIRED", "")
		publicUsersListUsersOauthFlag = publicUsersListUsersFlags.String("oauth", "", "")

		publicUsersListUsersMostRecentFlags      = flag.NewFlagSet("list-users-most-recent", flag.ExitOnError)
		publicUsersListUsersMostRecentOffsetFlag = publicUsersListUsersMostRecentFlags.String("offset", "REQUIRED", "Offset for pagination")
		publicUsersListUsersMostRecentLimitFlag  = publicUsersListUsersMostRecentFlags.String("limit", "REQUIRED", "Limit of items listed for pagination")
		publicUsersListUsersMostRecentOauthFlag  = publicUsersListUsersMostRecentFlags.String("oauth", "", "")

		usersFlags = flag.NewFlagSet("users", flag.ContinueOnError)

		usersDeleteUserFlags        = flag.NewFlagSet("delete-user", flag.ExitOnError)
		usersDeleteUserIDFlag       = usersDeleteUserFlags.String("id", "REQUIRED", "")
		usersDeleteUserOauthFlag    = usersDeleteUserFlags.String("oauth", "", "")
		usersDeleteUserJWTTokenFlag = usersDeleteUserFlags.String("jwt-token", "", "")

		usersGetUserByIDFlags        = flag.NewFlagSet("get-user-by-id", flag.ExitOnError)
		usersGetUserByIDIDFlag       = usersGetUserByIDFlags.String("id", "REQUIRED", "Unique ID of the User")
		usersGetUserByIDOauthFlag    = usersGetUserByIDFlags.String("oauth", "", "")
		usersGetUserByIDJWTTokenFlag = usersGetUserByIDFlags.String("jwt-token", "", "")

		usersUpdateDescriptionFlags        = flag.NewFlagSet("update-description", flag.ExitOnError)
		usersUpdateDescriptionBodyFlag     = usersUpdateDescriptionFlags.String("body", "REQUIRED", "")
		usersUpdateDescriptionOauthFlag    = usersUpdateDescriptionFlags.String("oauth", "", "")
		usersUpdateDescriptionJWTTokenFlag = usersUpdateDescriptionFlags.String("jwt-token", "", "")
	)
	authFlags.Usage = authUsage
	authEmailExistFlags.Usage = authEmailExistUsage
	authSendConfirmationFlags.Usage = authSendConfirmationUsage
	authResetPasswordFlags.Usage = authResetPasswordUsage

	contactsFlags.Usage = contactsUsage
	contactsAddMessageFlags.Usage = contactsAddMessageUsage

	filesFlags.Usage = filesUsage
	filesImportFileFlags.Usage = filesImportFileUsage
	filesDeleteFileFlags.Usage = filesDeleteFileUsage

	jwtTokenFlags.Usage = jwtTokenUsage
	jwtTokenSignupFlags.Usage = jwtTokenSignupUsage
	jwtTokenSigninFlags.Usage = jwtTokenSigninUsage
	jwtTokenRefreshFlags.Usage = jwtTokenRefreshUsage

	oAuthFlags.Usage = oAuthUsage
	oAuthOAuthFlags.Usage = oAuthOAuthUsage

	publicUsersFlags.Usage = publicUsersUsage
	publicUsersGetUserByUsernameFlags.Usage = publicUsersGetUserByUsernameUsage
	publicUsersListUsersFlags.Usage = publicUsersListUsersUsage
	publicUsersListUsersMostRecentFlags.Usage = publicUsersListUsersMostRecentUsage

	usersFlags.Usage = usersUsage
	usersDeleteUserFlags.Usage = usersDeleteUserUsage
	usersGetUserByIDFlags.Usage = usersGetUserByIDUsage
	usersUpdateDescriptionFlags.Usage = usersUpdateDescriptionUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "auth":
			svcf = authFlags
		case "contacts":
			svcf = contactsFlags
		case "files":
			svcf = filesFlags
		case "jwt-token":
			svcf = jwtTokenFlags
		case "o-auth":
			svcf = oAuthFlags
		case "public-users":
			svcf = publicUsersFlags
		case "users":
			svcf = usersFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "auth":
			switch epn {
			case "email-exist":
				epf = authEmailExistFlags

			case "send-confirmation":
				epf = authSendConfirmationFlags

			case "reset-password":
				epf = authResetPasswordFlags

			}

		case "contacts":
			switch epn {
			case "add-message":
				epf = contactsAddMessageFlags

			}

		case "files":
			switch epn {
			case "import-file":
				epf = filesImportFileFlags

			case "delete-file":
				epf = filesDeleteFileFlags

			}

		case "jwt-token":
			switch epn {
			case "signup":
				epf = jwtTokenSignupFlags

			case "signin":
				epf = jwtTokenSigninFlags

			case "refresh":
				epf = jwtTokenRefreshFlags

			}

		case "o-auth":
			switch epn {
			case "o-auth":
				epf = oAuthOAuthFlags

			}

		case "public-users":
			switch epn {
			case "get-user-by-username":
				epf = publicUsersGetUserByUsernameFlags

			case "list-users":
				epf = publicUsersListUsersFlags

			case "list-users-most-recent":
				epf = publicUsersListUsersMostRecentFlags

			}

		case "users":
			switch epn {
			case "delete-user":
				epf = usersDeleteUserFlags

			case "get-user-by-id":
				epf = usersGetUserByIDFlags

			case "update-description":
				epf = usersUpdateDescriptionFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "auth":
			c := authc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "email-exist":
				endpoint = c.EmailExist()
				data, err = authc.BuildEmailExistPayload(*authEmailExistBodyFlag, *authEmailExistOauthFlag)
			case "send-confirmation":
				endpoint = c.SendConfirmation()
				data, err = authc.BuildSendConfirmationPayload(*authSendConfirmationBodyFlag, *authSendConfirmationOauthFlag)
			case "reset-password":
				endpoint = c.ResetPassword()
				data, err = authc.BuildResetPasswordPayload(*authResetPasswordBodyFlag, *authResetPasswordOauthFlag)
			}
		case "contacts":
			c := contactsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "add-message":
				endpoint = c.AddMessage()
				data, err = contactsc.BuildAddMessagePayload(*contactsAddMessageBodyFlag, *contactsAddMessageOauthFlag, *contactsAddMessageJWTTokenFlag)
			}
		case "files":
			c := filesc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "import-file":
				endpoint = c.ImportFile(filesImportFileEncoderFn)
				data, err = filesc.BuildImportFilePayload(*filesImportFileBodyFlag, *filesImportFileOauthFlag, *filesImportFileJWTTokenFlag)
			case "delete-file":
				endpoint = c.DeleteFile()
				data, err = filesc.BuildDeleteFilePayload(*filesDeleteFileBodyFlag, *filesDeleteFileOauthFlag, *filesDeleteFileJWTTokenFlag)
			}
		case "jwt-token":
			c := jwttokenc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "signup":
				endpoint = c.Signup()
				data, err = jwttokenc.BuildSignupPayload(*jwtTokenSignupBodyFlag, *jwtTokenSignupOauthFlag)
			case "signin":
				endpoint = c.Signin()
				data, err = jwttokenc.BuildSigninPayload(*jwtTokenSigninBodyFlag, *jwtTokenSigninOauthFlag)
			case "refresh":
				endpoint = c.Refresh()
				data, err = jwttokenc.BuildRefreshPayload(*jwtTokenRefreshBodyFlag, *jwtTokenRefreshOauthFlag)
			}
		case "o-auth":
			c := oauthc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "o-auth":
				endpoint = c.OAuth()
				data, err = oauthc.BuildOAuthPayload(*oAuthOAuthBodyFlag)
			}
		case "public-users":
			c := publicusersc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "get-user-by-username":
				endpoint = c.GetUserByUsername()
				data, err = publicusersc.BuildGetUserByUsernamePayload(*publicUsersGetUserByUsernameUsernameFlag, *publicUsersGetUserByUsernameOauthFlag)
			case "list-users":
				endpoint = c.ListUsers()
				data, err = publicusersc.BuildListUsersPayload(*publicUsersListUsersBodyFlag, *publicUsersListUsersOauthFlag)
			case "list-users-most-recent":
				endpoint = c.ListUsersMostRecent()
				data, err = publicusersc.BuildListUsersMostRecentPayload(*publicUsersListUsersMostRecentOffsetFlag, *publicUsersListUsersMostRecentLimitFlag, *publicUsersListUsersMostRecentOauthFlag)
			}
		case "users":
			c := usersc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "delete-user":
				endpoint = c.DeleteUser()
				data, err = usersc.BuildDeleteUserPayload(*usersDeleteUserIDFlag, *usersDeleteUserOauthFlag, *usersDeleteUserJWTTokenFlag)
			case "get-user-by-id":
				endpoint = c.GetUserByID()
				data, err = usersc.BuildGetUserByIDPayload(*usersGetUserByIDIDFlag, *usersGetUserByIDOauthFlag, *usersGetUserByIDJWTTokenFlag)
			case "update-description":
				endpoint = c.UpdateDescription()
				data, err = usersc.BuildUpdateDescriptionPayload(*usersUpdateDescriptionBodyFlag, *usersUpdateDescriptionOauthFlag, *usersUpdateDescriptionJWTTokenFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// authUsage displays the usage of the auth command and its subcommands.
func authUsage() {
	fmt.Fprintf(os.Stderr, `Forget password / reset password / send Email Code
Usage:
    %[1]s [globalflags] auth COMMAND [flags]

COMMAND:
    email-exist: Check if email exist in database
    send-confirmation: Check if email exist in database and send code by email to reset password
    reset-password: Reset forget password of the user with the correct confirm code

Additional help:
    %[1]s auth COMMAND --help
`, os.Args[0])
}
func authEmailExistUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] auth email-exist -body JSON -oauth STRING

Check if email exist in database
    -body JSON: 
    -oauth STRING: 

Example:
    %[1]s auth email-exist --body '{
      "email": "guillaume@gmail.com"
   }' --oauth "Et mollitia enim vel ipsa nostrum aut."
`, os.Args[0])
}

func authSendConfirmationUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] auth send-confirmation -body JSON -oauth STRING

Check if email exist in database and send code by email to reset password
    -body JSON: 
    -oauth STRING: 

Example:
    %[1]s auth send-confirmation --body '{
      "email": "guillaume@gmail.com"
   }' --oauth "Rerum a unde amet nesciunt voluptates voluptatem."
`, os.Args[0])
}

func authResetPasswordUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] auth reset-password -body JSON -oauth STRING

Reset forget password of the user with the correct confirm code
    -body JSON: 
    -oauth STRING: 

Example:
    %[1]s auth reset-password --body '{
      "code": "ZGI5E",
      "confirm_password": "JeSuisUnTest974",
      "email": "guillaume@gmail.com",
      "password": "JeSuisUnTest974"
   }' --oauth "Ipsa consectetur."
`, os.Args[0])
}

// contactsUsage displays the usage of the contacts command and its subcommands.
func contactsUsage() {
	fmt.Fprintf(os.Stderr, `contacts of the api
Usage:
    %[1]s [globalflags] contacts COMMAND [flags]

COMMAND:
    add-message: user ask for something

Additional help:
    %[1]s contacts COMMAND --help
`, os.Args[0])
}
func contactsAddMessageUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] contacts add-message -body JSON -oauth STRING -jwt-token STRING

user ask for something
    -body JSON: 
    -oauth STRING: 
    -jwt-token STRING: 

Example:
    %[1]s contacts add-message --body '{
      "msg": "Je reprends l\'app pour un million",
      "user_id": "5dfb0bf7-597a-4250-b7ad-63a43ff59c25"
   }' --oauth "Enim delectus." --jwt-token "Quidem totam."
`, os.Args[0])
}

// filesUsage displays the usage of the files command and its subcommands.
func filesUsage() {
	fmt.Fprintf(os.Stderr, `files of the api
Usage:
    %[1]s [globalflags] files COMMAND [flags]

COMMAND:
    import-file: Import file
    delete-file: Delete one file by ID

Additional help:
    %[1]s files COMMAND --help
`, os.Args[0])
}
func filesImportFileUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] files import-file -body JSON -oauth STRING -jwt-token STRING

Import file
    -body JSON: 
    -oauth STRING: 
    -jwt-token STRING: 

Example:
    %[1]s files import-file --body '{
      "content": "SWxsbyBxdW8gYWxpcXVpZCBhbWV0IG5vYmlzLg==",
      "filename": "foo.jpg",
      "format": "image/jpeg",
      "h": 3954212567730331431,
      "mime": "Vel mollitia.",
      "size": 3028238973827103103,
      "url": "Autem vero dolorem aperiam cum reprehenderit ad.",
      "w": 6083434384460884878
   }' --oauth "Aut cumque quibusdam." --jwt-token "Suscipit ipsam quam sint quia."
`, os.Args[0])
}

func filesDeleteFileUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] files delete-file -body JSON -oauth STRING -jwt-token STRING

Delete one file by ID
    -body JSON: 
    -oauth STRING: 
    -jwt-token STRING: 

Example:
    %[1]s files delete-file --body '{
      "url": "/public/uploads/2021/12/2ca51d10-b660-4b2c-b27f-f7a119642885.png"
   }' --oauth "Libero rerum voluptatem vitae perferendis maxime repellendus." --jwt-token "Quo magni tempore quisquam."
`, os.Args[0])
}

// jwt-tokenUsage displays the usage of the jwt-token command and its
// subcommands.
func jwtTokenUsage() {
	fmt.Fprintf(os.Stderr, `Use Token to authenticate. Signin and Signup
Usage:
    %[1]s [globalflags] jwt-token COMMAND [flags]

COMMAND:
    signup: signup to generate jwt token
    signin: signin
    refresh: Refresh Token

Additional help:
    %[1]s jwt-token COMMAND --help
`, os.Args[0])
}
func jwtTokenSignupUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] jwt-token signup -body JSON -oauth STRING

signup to generate jwt token
    -body JSON: 
    -oauth STRING: 

Example:
    %[1]s jwt-token signup --body '{
      "confirm_password": "JeSuisUnTest974",
      "email": "guillaume@epitech.eu",
      "password": "JeSuisUnTest974",
      "username": "guillaumemoriin"
   }' --oauth "Dolor dicta natus assumenda ut et."
`, os.Args[0])
}

func jwtTokenSigninUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] jwt-token signin -body JSON -oauth STRING

signin
    -body JSON: 
    -oauth STRING: 

Example:
    %[1]s jwt-token signin --body '{
      "email": "guillaume@epitech.eu",
      "password": "JeSuisUnTest974"
   }' --oauth "Itaque placeat repellendus eum impedit."
`, os.Args[0])
}

func jwtTokenRefreshUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] jwt-token refresh -body JSON -oauth STRING

Refresh Token
    -body JSON: 
    -oauth STRING: 

Example:
    %[1]s jwt-token refresh --body '{
      "refresh_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ"
   }' --oauth "Qui velit qui voluptatem sit quam et."
`, os.Args[0])
}

// o-authUsage displays the usage of the o-auth command and its subcommands.
func oAuthUsage() {
	fmt.Fprintf(os.Stderr, `Oauth to authentificate
Usage:
    %[1]s [globalflags] o-auth COMMAND [flags]

COMMAND:
    o-auth: oAuth

Additional help:
    %[1]s o-auth COMMAND --help
`, os.Args[0])
}
func oAuthOAuthUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] o-auth o-auth -body JSON

oAuth
    -body JSON: 

Example:
    %[1]s o-auth o-auth --body '{
      "client_id": "Impedit ut molestiae eveniet omnis omnis.",
      "client_secret": "Amet est quidem quidem voluptatem.",
      "grant_type": "Saepe perferendis."
   }'
`, os.Args[0])
}

// public-usersUsage displays the usage of the public-users command and its
// subcommands.
func publicUsersUsage() {
	fmt.Fprintf(os.Stderr, `public route of users
Usage:
    %[1]s [globalflags] public-users COMMAND [flags]

COMMAND:
    get-user-by-username: Get one User by username
    list-users: List users for search bar
    list-users-most-recent: List users the most recent

Additional help:
    %[1]s public-users COMMAND --help
`, os.Args[0])
}
func publicUsersGetUserByUsernameUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] public-users get-user-by-username -username STRING -oauth STRING

Get one User by username
    -username STRING: 
    -oauth STRING: 

Example:
    %[1]s public-users get-user-by-username --username "guillaumemoriin" --oauth "Explicabo minima nam et repellendus ut et."
`, os.Args[0])
}

func publicUsersListUsersUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] public-users list-users -body JSON -oauth STRING

List users for search bar
    -body JSON: 
    -oauth STRING: 

Example:
    %[1]s public-users list-users --body '{
      "key": "guillaumemoriin"
   }' --oauth "Ducimus omnis temporibus cupiditate vitae."
`, os.Args[0])
}

func publicUsersListUsersMostRecentUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] public-users list-users-most-recent -offset INT32 -limit INT32 -oauth STRING

List users the most recent
    -offset INT32: Offset for pagination
    -limit INT32: Limit of items listed for pagination
    -oauth STRING: 

Example:
    %[1]s public-users list-users-most-recent --offset 0 --limit 5 --oauth "Aliquam explicabo ratione sit dolor."
`, os.Args[0])
}

// usersUsage displays the usage of the users command and its subcommands.
func usersUsage() {
	fmt.Fprintf(os.Stderr, `users of the api
Usage:
    %[1]s [globalflags] users COMMAND [flags]

COMMAND:
    delete-user: Delete one User by ID
    get-user-by-id: Get one User
    update-description: Update main info like email, username, firstname, lastname

Additional help:
    %[1]s users COMMAND --help
`, os.Args[0])
}
func usersDeleteUserUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] users delete-user -id STRING -oauth STRING -jwt-token STRING

Delete one User by ID
    -id STRING: 
    -oauth STRING: 
    -jwt-token STRING: 

Example:
    %[1]s users delete-user --id "5dfb0bf7-597a-4250-b7ad-63a43ff59c25" --oauth "Ipsa nisi quaerat." --jwt-token "Omnis quia quia."
`, os.Args[0])
}

func usersGetUserByIDUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] users get-user-by-id -id STRING -oauth STRING -jwt-token STRING

Get one User
    -id STRING: Unique ID of the User
    -oauth STRING: 
    -jwt-token STRING: 

Example:
    %[1]s users get-user-by-id --id "5dfb0bf7-597a-4250-b7ad-63a43ff59c25" --oauth "Ab perferendis sit aut enim nisi." --jwt-token "Cum ullam qui ut."
`, os.Args[0])
}

func usersUpdateDescriptionUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] users update-description -body JSON -oauth STRING -jwt-token STRING

Update main info like email, username, firstname, lastname
    -body JSON: 
    -oauth STRING: 
    -jwt-token STRING: 

Example:
    %[1]s users update-description --body '{
      "email": "guillaume@gmail.com",
      "firstname": "Guillaume",
      "id": "5dfb0bf7-597a-4250-b7ad-63a43ff59c25",
      "lastname": "Morin",
      "username": "guillaumemoriin"
   }' --oauth "Quis ab velit pariatur mollitia quisquam blanditiis." --jwt-token "Cumque at aut eveniet quibusdam."
`, os.Args[0])
}
