// Code generated by goa v3.7.3, DO NOT EDIT.
//
// contacts HTTP client encoders and decoders
//
// Command:
// $ goa gen webcup/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	contacts "webcup/gen/contacts"

	goahttp "goa.design/goa/v3/http"
)

// BuildAddMessageRequest instantiates a HTTP request object with method and
// path set to call the "contacts" service "addMessage" endpoint
func (c *Client) BuildAddMessageRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AddMessageContactsPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("contacts", "addMessage", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeAddMessageRequest returns an encoder for requests sent to the contacts
// addMessage server.
func EncodeAddMessageRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*contacts.AddMessagePayload)
		if !ok {
			return goahttp.ErrInvalidType("contacts", "addMessage", "*contacts.AddMessagePayload", v)
		}
		if p.Oauth != nil {
			head := *p.Oauth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.JWTToken != nil {
			head := *p.JWTToken
			req.Header.Set("jwtToken", head)
		}
		body := NewAddMessageRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("contacts", "addMessage", err)
		}
		return nil
	}
}

// DecodeAddMessageResponse returns a decoder for responses returned by the
// contacts addMessage endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeAddMessageResponse may return the following errors:
//	- "unknown_error" (type *contacts.UnknownError): http.StatusInternalServerError
//	- error: internal error
func DecodeAddMessageResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body AddMessageResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("contacts", "addMessage", err)
			}
			err = ValidateAddMessageResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("contacts", "addMessage", err)
			}
			res := NewAddMessageResultCreated(&body)
			return res, nil
		case http.StatusInternalServerError:
			var (
				body AddMessageUnknownErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("contacts", "addMessage", err)
			}
			err = ValidateAddMessageUnknownErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("contacts", "addMessage", err)
			}
			return nil, NewAddMessageUnknownError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("contacts", "addMessage", resp.StatusCode, string(body))
		}
	}
}
