// Code generated by goa v3.7.3, DO NOT EDIT.
//
// data HTTP client CLI support package
//
// Command:
// $ goa gen webcup/design

package client

import (
	"encoding/json"
	"fmt"
	"strconv"
	data "webcup/gen/data"

	goa "goa.design/goa/v3/pkg"
)

// BuildListDataPayload builds the payload for the data listData endpoint from
// CLI flags.
func BuildListDataPayload(dataListDataBody string, dataListDataOauth string, dataListDataJWTToken string) (*data.ListDataPayload, error) {
	var err error
	var body ListDataRequestBody
	{
		err = json.Unmarshal([]byte(dataListDataBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"key\": \"Mars\"\n   }'")
		}
	}
	var oauth *string
	{
		if dataListDataOauth != "" {
			oauth = &dataListDataOauth
		}
	}
	var jwtToken *string
	{
		if dataListDataJWTToken != "" {
			jwtToken = &dataListDataJWTToken
		}
	}
	v := &data.ListDataPayload{
		Key: body.Key,
	}
	v.Oauth = oauth
	v.JWTToken = jwtToken

	return v, nil
}

// BuildListDataMostRecentPayload builds the payload for the data
// listDataMostRecent endpoint from CLI flags.
func BuildListDataMostRecentPayload(dataListDataMostRecentOffset string, dataListDataMostRecentLimit string, dataListDataMostRecentOauth string, dataListDataMostRecentJWTToken string) (*data.ListDataMostRecentPayload, error) {
	var err error
	var offset int32
	{
		var v int64
		v, err = strconv.ParseInt(dataListDataMostRecentOffset, 10, 32)
		offset = int32(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for offset, must be INT32")
		}
		if offset < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("offset", offset, 0, true))
		}
		if err != nil {
			return nil, err
		}
	}
	var limit int32
	{
		var v int64
		v, err = strconv.ParseInt(dataListDataMostRecentLimit, 10, 32)
		limit = int32(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for limit, must be INT32")
		}
		if limit < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("limit", limit, 0, true))
		}
		if err != nil {
			return nil, err
		}
	}
	var oauth *string
	{
		if dataListDataMostRecentOauth != "" {
			oauth = &dataListDataMostRecentOauth
		}
	}
	var jwtToken *string
	{
		if dataListDataMostRecentJWTToken != "" {
			jwtToken = &dataListDataMostRecentJWTToken
		}
	}
	v := &data.ListDataMostRecentPayload{}
	v.Offset = offset
	v.Limit = limit
	v.Oauth = oauth
	v.JWTToken = jwtToken

	return v, nil
}

// BuildCreateDataPayload builds the payload for the data createData endpoint
// from CLI flags.
func BuildCreateDataPayload(dataCreateDataBody string, dataCreateDataOauth string, dataCreateDataJWTToken string) (*data.CreateDataPayload, error) {
	var err error
	var body CreateDataRequestBody
	{
		err = json.Unmarshal([]byte(dataCreateDataBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"data\": {\n         \"category\": \"animals\",\n         \"description\": \"Unique Air max restant au monde\",\n         \"image\": \"Saepe omnis.\",\n         \"title\": \"Air max360 d\\'il y a 10 millions d\\'années\",\n         \"user_id\": \"5dfb0bf7-597a-4250-b7ad-63a43ff59c25\"\n      }\n   }'")
		}
		if body.Data == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("data", "body"))
		}
		if body.Data != nil {
			if err2 := ValidatePayloadDataRequestBody(body.Data); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		if err != nil {
			return nil, err
		}
	}
	var oauth *string
	{
		if dataCreateDataOauth != "" {
			oauth = &dataCreateDataOauth
		}
	}
	var jwtToken *string
	{
		if dataCreateDataJWTToken != "" {
			jwtToken = &dataCreateDataJWTToken
		}
	}
	v := &data.CreateDataPayload{}
	if body.Data != nil {
		v.Data = marshalPayloadDataRequestBodyToDataPayloadData(body.Data)
	}
	v.Oauth = oauth
	v.JWTToken = jwtToken

	return v, nil
}

// BuildUpdateDataPayload builds the payload for the data updateData endpoint
// from CLI flags.
func BuildUpdateDataPayload(dataUpdateDataBody string, dataUpdateDataID string, dataUpdateDataOauth string, dataUpdateDataJWTToken string) (*data.UpdateDataPayload, error) {
	var err error
	var body UpdateDataRequestBody
	{
		err = json.Unmarshal([]byte(dataUpdateDataBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"data\": {\n         \"category\": \"animals\",\n         \"description\": \"Unique Air max restant au monde\",\n         \"image\": \"Saepe omnis.\",\n         \"title\": \"Air max360 d\\'il y a 10 millions d\\'années\",\n         \"user_id\": \"5dfb0bf7-597a-4250-b7ad-63a43ff59c25\"\n      }\n   }'")
		}
		if body.Data == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("data", "body"))
		}
		if body.Data != nil {
			if err2 := ValidatePayloadDataRequestBody(body.Data); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		if err != nil {
			return nil, err
		}
	}
	var id string
	{
		id = dataUpdateDataID
		err = goa.MergeErrors(err, goa.ValidateFormat("id", id, goa.FormatUUID))

		if err != nil {
			return nil, err
		}
	}
	var oauth *string
	{
		if dataUpdateDataOauth != "" {
			oauth = &dataUpdateDataOauth
		}
	}
	var jwtToken *string
	{
		if dataUpdateDataJWTToken != "" {
			jwtToken = &dataUpdateDataJWTToken
		}
	}
	v := &data.UpdateDataPayload{}
	if body.Data != nil {
		v.Data = marshalPayloadDataRequestBodyToDataPayloadData(body.Data)
	}
	v.ID = id
	v.Oauth = oauth
	v.JWTToken = jwtToken

	return v, nil
}

// BuildGetDataByUserIDPayload builds the payload for the data getDataByUserID
// endpoint from CLI flags.
func BuildGetDataByUserIDPayload(dataGetDataByUserIDUserID string, dataGetDataByUserIDOauth string, dataGetDataByUserIDJWTToken string) (*data.GetDataByUserIDPayload, error) {
	var err error
	var userID string
	{
		userID = dataGetDataByUserIDUserID
		err = goa.MergeErrors(err, goa.ValidateFormat("userID", userID, goa.FormatUUID))

		if err != nil {
			return nil, err
		}
	}
	var oauth *string
	{
		if dataGetDataByUserIDOauth != "" {
			oauth = &dataGetDataByUserIDOauth
		}
	}
	var jwtToken *string
	{
		if dataGetDataByUserIDJWTToken != "" {
			jwtToken = &dataGetDataByUserIDJWTToken
		}
	}
	v := &data.GetDataByUserIDPayload{}
	v.UserID = userID
	v.Oauth = oauth
	v.JWTToken = jwtToken

	return v, nil
}

// BuildGetDataByIDPayload builds the payload for the data getDataByID endpoint
// from CLI flags.
func BuildGetDataByIDPayload(dataGetDataByIDID string, dataGetDataByIDOauth string, dataGetDataByIDJWTToken string) (*data.GetDataByIDPayload, error) {
	var err error
	var id string
	{
		id = dataGetDataByIDID
		err = goa.MergeErrors(err, goa.ValidateFormat("id", id, goa.FormatUUID))

		if err != nil {
			return nil, err
		}
	}
	var oauth *string
	{
		if dataGetDataByIDOauth != "" {
			oauth = &dataGetDataByIDOauth
		}
	}
	var jwtToken *string
	{
		if dataGetDataByIDJWTToken != "" {
			jwtToken = &dataGetDataByIDJWTToken
		}
	}
	v := &data.GetDataByIDPayload{}
	v.ID = id
	v.Oauth = oauth
	v.JWTToken = jwtToken

	return v, nil
}
