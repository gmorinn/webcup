// Code generated by goa v3.7.3, DO NOT EDIT.
//
// data HTTP client encoders and decoders
//
// Command:
// $ goa gen webcup/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	data "webcup/gen/data"

	goahttp "goa.design/goa/v3/http"
)

// BuildListDataMostRecentRequest instantiates a HTTP request object with
// method and path set to call the "data" service "listDataMostRecent" endpoint
func (c *Client) BuildListDataMostRecentRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		offset int32
		limit  int32
	)
	{
		p, ok := v.(*data.ListDataMostRecentPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("data", "listDataMostRecent", "*data.ListDataMostRecentPayload", v)
		}
		offset = p.Offset
		limit = p.Limit
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListDataMostRecentDataPath(offset, limit)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("data", "listDataMostRecent", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListDataMostRecentRequest returns an encoder for requests sent to the
// data listDataMostRecent server.
func EncodeListDataMostRecentRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*data.ListDataMostRecentPayload)
		if !ok {
			return goahttp.ErrInvalidType("data", "listDataMostRecent", "*data.ListDataMostRecentPayload", v)
		}
		if p.Oauth != nil {
			head := *p.Oauth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.JWTToken != nil {
			head := *p.JWTToken
			req.Header.Set("jwtToken", head)
		}
		return nil
	}
}

// DecodeListDataMostRecentResponse returns a decoder for responses returned by
// the data listDataMostRecent endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeListDataMostRecentResponse may return the following errors:
//	- "unknown_error" (type *data.UnknownError): http.StatusInternalServerError
//	- error: internal error
func DecodeListDataMostRecentResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListDataMostRecentResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("data", "listDataMostRecent", err)
			}
			err = ValidateListDataMostRecentResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("data", "listDataMostRecent", err)
			}
			res := NewListDataMostRecentResultOK(&body)
			return res, nil
		case http.StatusInternalServerError:
			var (
				body ListDataMostRecentUnknownErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("data", "listDataMostRecent", err)
			}
			err = ValidateListDataMostRecentUnknownErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("data", "listDataMostRecent", err)
			}
			return nil, NewListDataMostRecentUnknownError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("data", "listDataMostRecent", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateDataRequest instantiates a HTTP request object with method and
// path set to call the "data" service "createData" endpoint
func (c *Client) BuildCreateDataRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateDataDataPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("data", "createData", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateDataRequest returns an encoder for requests sent to the data
// createData server.
func EncodeCreateDataRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*data.CreateDataPayload)
		if !ok {
			return goahttp.ErrInvalidType("data", "createData", "*data.CreateDataPayload", v)
		}
		if p.Oauth != nil {
			head := *p.Oauth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.JWTToken != nil {
			head := *p.JWTToken
			req.Header.Set("jwtToken", head)
		}
		body := NewCreateDataRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("data", "createData", err)
		}
		return nil
	}
}

// DecodeCreateDataResponse returns a decoder for responses returned by the
// data createData endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeCreateDataResponse may return the following errors:
//	- "unknown_error" (type *data.UnknownError): http.StatusInternalServerError
//	- error: internal error
func DecodeCreateDataResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body CreateDataResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("data", "createData", err)
			}
			err = ValidateCreateDataResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("data", "createData", err)
			}
			res := NewCreateDataResultCreated(&body)
			return res, nil
		case http.StatusInternalServerError:
			var (
				body CreateDataUnknownErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("data", "createData", err)
			}
			err = ValidateCreateDataUnknownErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("data", "createData", err)
			}
			return nil, NewCreateDataUnknownError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("data", "createData", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateDataRequest instantiates a HTTP request object with method and
// path set to call the "data" service "updateData" endpoint
func (c *Client) BuildUpdateDataRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*data.UpdateDataPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("data", "updateData", "*data.UpdateDataPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateDataDataPath(id)}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("data", "updateData", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateDataRequest returns an encoder for requests sent to the data
// updateData server.
func EncodeUpdateDataRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*data.UpdateDataPayload)
		if !ok {
			return goahttp.ErrInvalidType("data", "updateData", "*data.UpdateDataPayload", v)
		}
		if p.Oauth != nil {
			head := *p.Oauth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.JWTToken != nil {
			head := *p.JWTToken
			req.Header.Set("jwtToken", head)
		}
		body := NewUpdateDataRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("data", "updateData", err)
		}
		return nil
	}
}

// DecodeUpdateDataResponse returns a decoder for responses returned by the
// data updateData endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeUpdateDataResponse may return the following errors:
//	- "unknown_error" (type *data.UnknownError): http.StatusInternalServerError
//	- error: internal error
func DecodeUpdateDataResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpdateDataResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("data", "updateData", err)
			}
			err = ValidateUpdateDataResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("data", "updateData", err)
			}
			res := NewUpdateDataResultOK(&body)
			return res, nil
		case http.StatusInternalServerError:
			var (
				body UpdateDataUnknownErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("data", "updateData", err)
			}
			err = ValidateUpdateDataUnknownErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("data", "updateData", err)
			}
			return nil, NewUpdateDataUnknownError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("data", "updateData", resp.StatusCode, string(body))
		}
	}
}

// BuildGetDataByUserIDRequest instantiates a HTTP request object with method
// and path set to call the "data" service "getDataByUserID" endpoint
func (c *Client) BuildGetDataByUserIDRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		userID string
	)
	{
		p, ok := v.(*data.GetDataByUserIDPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("data", "getDataByUserID", "*data.GetDataByUserIDPayload", v)
		}
		userID = p.UserID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetDataByUserIDDataPath(userID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("data", "getDataByUserID", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetDataByUserIDRequest returns an encoder for requests sent to the
// data getDataByUserID server.
func EncodeGetDataByUserIDRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*data.GetDataByUserIDPayload)
		if !ok {
			return goahttp.ErrInvalidType("data", "getDataByUserID", "*data.GetDataByUserIDPayload", v)
		}
		if p.Oauth != nil {
			head := *p.Oauth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.JWTToken != nil {
			head := *p.JWTToken
			req.Header.Set("jwtToken", head)
		}
		return nil
	}
}

// DecodeGetDataByUserIDResponse returns a decoder for responses returned by
// the data getDataByUserID endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeGetDataByUserIDResponse may return the following errors:
//	- "unknown_error" (type *data.UnknownError): http.StatusInternalServerError
//	- error: internal error
func DecodeGetDataByUserIDResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetDataByUserIDResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("data", "getDataByUserID", err)
			}
			err = ValidateGetDataByUserIDResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("data", "getDataByUserID", err)
			}
			res := NewGetDataByUserIDResultOK(&body)
			return res, nil
		case http.StatusInternalServerError:
			var (
				body GetDataByUserIDUnknownErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("data", "getDataByUserID", err)
			}
			err = ValidateGetDataByUserIDUnknownErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("data", "getDataByUserID", err)
			}
			return nil, NewGetDataByUserIDUnknownError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("data", "getDataByUserID", resp.StatusCode, string(body))
		}
	}
}

// BuildGetDataByIDRequest instantiates a HTTP request object with method and
// path set to call the "data" service "getDataByID" endpoint
func (c *Client) BuildGetDataByIDRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*data.GetDataByIDPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("data", "getDataByID", "*data.GetDataByIDPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetDataByIDDataPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("data", "getDataByID", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetDataByIDRequest returns an encoder for requests sent to the data
// getDataByID server.
func EncodeGetDataByIDRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*data.GetDataByIDPayload)
		if !ok {
			return goahttp.ErrInvalidType("data", "getDataByID", "*data.GetDataByIDPayload", v)
		}
		if p.Oauth != nil {
			head := *p.Oauth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.JWTToken != nil {
			head := *p.JWTToken
			req.Header.Set("jwtToken", head)
		}
		return nil
	}
}

// DecodeGetDataByIDResponse returns a decoder for responses returned by the
// data getDataByID endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeGetDataByIDResponse may return the following errors:
//	- "unknown_error" (type *data.UnknownError): http.StatusInternalServerError
//	- error: internal error
func DecodeGetDataByIDResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetDataByIDResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("data", "getDataByID", err)
			}
			err = ValidateGetDataByIDResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("data", "getDataByID", err)
			}
			res := NewGetDataByIDResultOK(&body)
			return res, nil
		case http.StatusInternalServerError:
			var (
				body GetDataByIDUnknownErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("data", "getDataByID", err)
			}
			err = ValidateGetDataByIDUnknownErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("data", "getDataByID", err)
			}
			return nil, NewGetDataByIDUnknownError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("data", "getDataByID", resp.StatusCode, string(body))
		}
	}
}

// unmarshalResDataResponseBodyToDataResData builds a value of type
// *data.ResData from a value of type *ResDataResponseBody.
func unmarshalResDataResponseBodyToDataResData(v *ResDataResponseBody) *data.ResData {
	res := &data.ResData{
		ID:          *v.ID,
		Title:       *v.Title,
		Description: *v.Description,
		Image:       *v.Image,
		Category:    *v.Category,
		UserID:      *v.UserID,
	}

	return res
}

// marshalDataPayloadDataToPayloadDataRequestBody builds a value of type
// *PayloadDataRequestBody from a value of type *data.PayloadData.
func marshalDataPayloadDataToPayloadDataRequestBody(v *data.PayloadData) *PayloadDataRequestBody {
	res := &PayloadDataRequestBody{
		Title:       v.Title,
		Description: v.Description,
		Image:       v.Image,
		Category:    v.Category,
		UserID:      v.UserID,
	}

	return res
}

// marshalPayloadDataRequestBodyToDataPayloadData builds a value of type
// *data.PayloadData from a value of type *PayloadDataRequestBody.
func marshalPayloadDataRequestBodyToDataPayloadData(v *PayloadDataRequestBody) *data.PayloadData {
	res := &data.PayloadData{
		Title:       v.Title,
		Description: v.Description,
		Image:       v.Image,
		Category:    v.Category,
		UserID:      v.UserID,
	}

	return res
}
