// Code generated by goa v3.7.3, DO NOT EDIT.
//
// data client HTTP transport
//
// Command:
// $ goa gen webcup/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the data service endpoint HTTP clients.
type Client struct {
	// ListDataMostRecent Doer is the HTTP client used to make requests to the
	// listDataMostRecent endpoint.
	ListDataMostRecentDoer goahttp.Doer

	// CreateData Doer is the HTTP client used to make requests to the createData
	// endpoint.
	CreateDataDoer goahttp.Doer

	// UpdateData Doer is the HTTP client used to make requests to the updateData
	// endpoint.
	UpdateDataDoer goahttp.Doer

	// GetDataByUserID Doer is the HTTP client used to make requests to the
	// getDataByUserID endpoint.
	GetDataByUserIDDoer goahttp.Doer

	// GetDataByID Doer is the HTTP client used to make requests to the getDataByID
	// endpoint.
	GetDataByIDDoer goahttp.Doer

	// CORS Doer is the HTTP client used to make requests to the  endpoint.
	CORSDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the data service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		ListDataMostRecentDoer: doer,
		CreateDataDoer:         doer,
		UpdateDataDoer:         doer,
		GetDataByUserIDDoer:    doer,
		GetDataByIDDoer:        doer,
		CORSDoer:               doer,
		RestoreResponseBody:    restoreBody,
		scheme:                 scheme,
		host:                   host,
		decoder:                dec,
		encoder:                enc,
	}
}

// ListDataMostRecent returns an endpoint that makes HTTP requests to the data
// service listDataMostRecent server.
func (c *Client) ListDataMostRecent() goa.Endpoint {
	var (
		encodeRequest  = EncodeListDataMostRecentRequest(c.encoder)
		decodeResponse = DecodeListDataMostRecentResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildListDataMostRecentRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListDataMostRecentDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("data", "listDataMostRecent", err)
		}
		return decodeResponse(resp)
	}
}

// CreateData returns an endpoint that makes HTTP requests to the data service
// createData server.
func (c *Client) CreateData() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateDataRequest(c.encoder)
		decodeResponse = DecodeCreateDataResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildCreateDataRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateDataDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("data", "createData", err)
		}
		return decodeResponse(resp)
	}
}

// UpdateData returns an endpoint that makes HTTP requests to the data service
// updateData server.
func (c *Client) UpdateData() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateDataRequest(c.encoder)
		decodeResponse = DecodeUpdateDataResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildUpdateDataRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateDataDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("data", "updateData", err)
		}
		return decodeResponse(resp)
	}
}

// GetDataByUserID returns an endpoint that makes HTTP requests to the data
// service getDataByUserID server.
func (c *Client) GetDataByUserID() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetDataByUserIDRequest(c.encoder)
		decodeResponse = DecodeGetDataByUserIDResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetDataByUserIDRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetDataByUserIDDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("data", "getDataByUserID", err)
		}
		return decodeResponse(resp)
	}
}

// GetDataByID returns an endpoint that makes HTTP requests to the data service
// getDataByID server.
func (c *Client) GetDataByID() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetDataByIDRequest(c.encoder)
		decodeResponse = DecodeGetDataByIDResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetDataByIDRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetDataByIDDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("data", "getDataByID", err)
		}
		return decodeResponse(resp)
	}
}
