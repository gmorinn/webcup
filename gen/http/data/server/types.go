// Code generated by goa v3.7.3, DO NOT EDIT.
//
// data HTTP server types
//
// Command:
// $ goa gen webcup/design

package server

import (
	"unicode/utf8"
	data "webcup/gen/data"

	goa "goa.design/goa/v3/pkg"
)

// ListDataRequestBody is the type of the "data" service "listData" endpoint
// HTTP request body.
type ListDataRequestBody struct {
	Key *string `form:"key,omitempty" json:"key,omitempty" xml:"key,omitempty"`
}

// CreateDataRequestBody is the type of the "data" service "createData"
// endpoint HTTP request body.
type CreateDataRequestBody struct {
	Data *PayloadDataRequestBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
}

// UpdateDataRequestBody is the type of the "data" service "updateData"
// endpoint HTTP request body.
type UpdateDataRequestBody struct {
	Data *PayloadDataRequestBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
}

// ListDataResponseBody is the type of the "data" service "listData" endpoint
// HTTP response body.
type ListDataResponseBody struct {
	// Result is an an array of user
	Data    []*ResDataResponseBody `form:"data" json:"data" xml:"data"`
	Success bool                   `form:"success" json:"success" xml:"success"`
}

// ListDataMostRecentResponseBody is the type of the "data" service
// "listDataMostRecent" endpoint HTTP response body.
type ListDataMostRecentResponseBody struct {
	// Result is an an array of data
	Data    []*ResDataResponseBody `form:"data" json:"data" xml:"data"`
	Success bool                   `form:"success" json:"success" xml:"success"`
	// total of datas
	Count int64 `form:"count" json:"count" xml:"count"`
}

// CreateDataResponseBody is the type of the "data" service "createData"
// endpoint HTTP response body.
type CreateDataResponseBody struct {
	// Result is an object
	Data    *ResDataResponseBody `form:"data" json:"data" xml:"data"`
	Success bool                 `form:"success" json:"success" xml:"success"`
}

// UpdateDataResponseBody is the type of the "data" service "updateData"
// endpoint HTTP response body.
type UpdateDataResponseBody struct {
	// Result is an Object
	Data    *ResDataResponseBody `form:"data" json:"data" xml:"data"`
	Success bool                 `form:"success" json:"success" xml:"success"`
}

// GetDataByUserIDResponseBody is the type of the "data" service
// "getDataByUserID" endpoint HTTP response body.
type GetDataByUserIDResponseBody struct {
	// Result is an object
	Data    []*ResDataResponseBody `form:"data" json:"data" xml:"data"`
	Success bool                   `form:"success" json:"success" xml:"success"`
	// total of datas
	Count int64 `form:"count" json:"count" xml:"count"`
}

// GetDataByIDResponseBody is the type of the "data" service "getDataByID"
// endpoint HTTP response body.
type GetDataByIDResponseBody struct {
	// Result is an object
	Data    *ResDataResponseBody `form:"data" json:"data" xml:"data"`
	Success bool                 `form:"success" json:"success" xml:"success"`
}

// ListDataUnknownErrorResponseBody is the type of the "data" service
// "listData" endpoint HTTP response body for the "unknown_error" error.
type ListDataUnknownErrorResponseBody struct {
	Err       string `form:"err" json:"err" xml:"err"`
	ErrorCode string `form:"error_code" json:"error_code" xml:"error_code"`
	Success   bool   `form:"success" json:"success" xml:"success"`
}

// ListDataMostRecentUnknownErrorResponseBody is the type of the "data" service
// "listDataMostRecent" endpoint HTTP response body for the "unknown_error"
// error.
type ListDataMostRecentUnknownErrorResponseBody struct {
	Err       string `form:"err" json:"err" xml:"err"`
	ErrorCode string `form:"error_code" json:"error_code" xml:"error_code"`
	Success   bool   `form:"success" json:"success" xml:"success"`
}

// CreateDataUnknownErrorResponseBody is the type of the "data" service
// "createData" endpoint HTTP response body for the "unknown_error" error.
type CreateDataUnknownErrorResponseBody struct {
	Err       string `form:"err" json:"err" xml:"err"`
	ErrorCode string `form:"error_code" json:"error_code" xml:"error_code"`
	Success   bool   `form:"success" json:"success" xml:"success"`
}

// UpdateDataUnknownErrorResponseBody is the type of the "data" service
// "updateData" endpoint HTTP response body for the "unknown_error" error.
type UpdateDataUnknownErrorResponseBody struct {
	Err       string `form:"err" json:"err" xml:"err"`
	ErrorCode string `form:"error_code" json:"error_code" xml:"error_code"`
	Success   bool   `form:"success" json:"success" xml:"success"`
}

// GetDataByUserIDUnknownErrorResponseBody is the type of the "data" service
// "getDataByUserID" endpoint HTTP response body for the "unknown_error" error.
type GetDataByUserIDUnknownErrorResponseBody struct {
	Err       string `form:"err" json:"err" xml:"err"`
	ErrorCode string `form:"error_code" json:"error_code" xml:"error_code"`
	Success   bool   `form:"success" json:"success" xml:"success"`
}

// GetDataByIDUnknownErrorResponseBody is the type of the "data" service
// "getDataByID" endpoint HTTP response body for the "unknown_error" error.
type GetDataByIDUnknownErrorResponseBody struct {
	Err       string `form:"err" json:"err" xml:"err"`
	ErrorCode string `form:"error_code" json:"error_code" xml:"error_code"`
	Success   bool   `form:"success" json:"success" xml:"success"`
}

// ResDataResponseBody is used to define fields on response body types.
type ResDataResponseBody struct {
	ID          string `form:"id" json:"id" xml:"id"`
	Title       string `form:"title" json:"title" xml:"title"`
	Description string `form:"description" json:"description" xml:"description"`
	// Url of the logo and stock in db
	Image    string `form:"image" json:"image" xml:"image"`
	Category string `form:"category" json:"category" xml:"category"`
	UserID   string `form:"user_id" json:"user_id" xml:"user_id"`
}

// PayloadDataRequestBody is used to define fields on request body types.
type PayloadDataRequestBody struct {
	Title       *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Url of the logo and stock in db
	Image    *string `form:"image,omitempty" json:"image,omitempty" xml:"image,omitempty"`
	Category *string `form:"category,omitempty" json:"category,omitempty" xml:"category,omitempty"`
	UserID   *string `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
}

// NewListDataResponseBody builds the HTTP response body from the result of the
// "listData" endpoint of the "data" service.
func NewListDataResponseBody(res *data.ListDataResult) *ListDataResponseBody {
	body := &ListDataResponseBody{
		Success: res.Success,
	}
	if res.Data != nil {
		body.Data = make([]*ResDataResponseBody, len(res.Data))
		for i, val := range res.Data {
			body.Data[i] = marshalDataResDataToResDataResponseBody(val)
		}
	}
	return body
}

// NewListDataMostRecentResponseBody builds the HTTP response body from the
// result of the "listDataMostRecent" endpoint of the "data" service.
func NewListDataMostRecentResponseBody(res *data.ListDataMostRecentResult) *ListDataMostRecentResponseBody {
	body := &ListDataMostRecentResponseBody{
		Success: res.Success,
		Count:   res.Count,
	}
	if res.Data != nil {
		body.Data = make([]*ResDataResponseBody, len(res.Data))
		for i, val := range res.Data {
			body.Data[i] = marshalDataResDataToResDataResponseBody(val)
		}
	}
	return body
}

// NewCreateDataResponseBody builds the HTTP response body from the result of
// the "createData" endpoint of the "data" service.
func NewCreateDataResponseBody(res *data.CreateDataResult) *CreateDataResponseBody {
	body := &CreateDataResponseBody{
		Success: res.Success,
	}
	if res.Data != nil {
		body.Data = marshalDataResDataToResDataResponseBody(res.Data)
	}
	return body
}

// NewUpdateDataResponseBody builds the HTTP response body from the result of
// the "updateData" endpoint of the "data" service.
func NewUpdateDataResponseBody(res *data.UpdateDataResult) *UpdateDataResponseBody {
	body := &UpdateDataResponseBody{
		Success: res.Success,
	}
	if res.Data != nil {
		body.Data = marshalDataResDataToResDataResponseBody(res.Data)
	}
	return body
}

// NewGetDataByUserIDResponseBody builds the HTTP response body from the result
// of the "getDataByUserID" endpoint of the "data" service.
func NewGetDataByUserIDResponseBody(res *data.GetDataByUserIDResult) *GetDataByUserIDResponseBody {
	body := &GetDataByUserIDResponseBody{
		Success: res.Success,
		Count:   res.Count,
	}
	if res.Data != nil {
		body.Data = make([]*ResDataResponseBody, len(res.Data))
		for i, val := range res.Data {
			body.Data[i] = marshalDataResDataToResDataResponseBody(val)
		}
	}
	return body
}

// NewGetDataByIDResponseBody builds the HTTP response body from the result of
// the "getDataByID" endpoint of the "data" service.
func NewGetDataByIDResponseBody(res *data.GetDataByIDResult) *GetDataByIDResponseBody {
	body := &GetDataByIDResponseBody{
		Success: res.Success,
	}
	if res.Data != nil {
		body.Data = marshalDataResDataToResDataResponseBody(res.Data)
	}
	return body
}

// NewListDataUnknownErrorResponseBody builds the HTTP response body from the
// result of the "listData" endpoint of the "data" service.
func NewListDataUnknownErrorResponseBody(res *data.UnknownError) *ListDataUnknownErrorResponseBody {
	body := &ListDataUnknownErrorResponseBody{
		Err:       res.Err,
		ErrorCode: res.ErrorCode,
		Success:   res.Success,
	}
	return body
}

// NewListDataMostRecentUnknownErrorResponseBody builds the HTTP response body
// from the result of the "listDataMostRecent" endpoint of the "data" service.
func NewListDataMostRecentUnknownErrorResponseBody(res *data.UnknownError) *ListDataMostRecentUnknownErrorResponseBody {
	body := &ListDataMostRecentUnknownErrorResponseBody{
		Err:       res.Err,
		ErrorCode: res.ErrorCode,
		Success:   res.Success,
	}
	return body
}

// NewCreateDataUnknownErrorResponseBody builds the HTTP response body from the
// result of the "createData" endpoint of the "data" service.
func NewCreateDataUnknownErrorResponseBody(res *data.UnknownError) *CreateDataUnknownErrorResponseBody {
	body := &CreateDataUnknownErrorResponseBody{
		Err:       res.Err,
		ErrorCode: res.ErrorCode,
		Success:   res.Success,
	}
	return body
}

// NewUpdateDataUnknownErrorResponseBody builds the HTTP response body from the
// result of the "updateData" endpoint of the "data" service.
func NewUpdateDataUnknownErrorResponseBody(res *data.UnknownError) *UpdateDataUnknownErrorResponseBody {
	body := &UpdateDataUnknownErrorResponseBody{
		Err:       res.Err,
		ErrorCode: res.ErrorCode,
		Success:   res.Success,
	}
	return body
}

// NewGetDataByUserIDUnknownErrorResponseBody builds the HTTP response body
// from the result of the "getDataByUserID" endpoint of the "data" service.
func NewGetDataByUserIDUnknownErrorResponseBody(res *data.UnknownError) *GetDataByUserIDUnknownErrorResponseBody {
	body := &GetDataByUserIDUnknownErrorResponseBody{
		Err:       res.Err,
		ErrorCode: res.ErrorCode,
		Success:   res.Success,
	}
	return body
}

// NewGetDataByIDUnknownErrorResponseBody builds the HTTP response body from
// the result of the "getDataByID" endpoint of the "data" service.
func NewGetDataByIDUnknownErrorResponseBody(res *data.UnknownError) *GetDataByIDUnknownErrorResponseBody {
	body := &GetDataByIDUnknownErrorResponseBody{
		Err:       res.Err,
		ErrorCode: res.ErrorCode,
		Success:   res.Success,
	}
	return body
}

// NewListDataPayload builds a data service listData endpoint payload.
func NewListDataPayload(body *ListDataRequestBody, oauth *string, jwtToken *string) *data.ListDataPayload {
	v := &data.ListDataPayload{
		Key: *body.Key,
	}
	v.Oauth = oauth
	v.JWTToken = jwtToken

	return v
}

// NewListDataMostRecentPayload builds a data service listDataMostRecent
// endpoint payload.
func NewListDataMostRecentPayload(offset int32, limit int32, oauth *string, jwtToken *string) *data.ListDataMostRecentPayload {
	v := &data.ListDataMostRecentPayload{}
	v.Offset = offset
	v.Limit = limit
	v.Oauth = oauth
	v.JWTToken = jwtToken

	return v
}

// NewCreateDataPayload builds a data service createData endpoint payload.
func NewCreateDataPayload(body *CreateDataRequestBody, oauth *string, jwtToken *string) *data.CreateDataPayload {
	v := &data.CreateDataPayload{}
	v.Data = unmarshalPayloadDataRequestBodyToDataPayloadData(body.Data)
	v.Oauth = oauth
	v.JWTToken = jwtToken

	return v
}

// NewUpdateDataPayload builds a data service updateData endpoint payload.
func NewUpdateDataPayload(body *UpdateDataRequestBody, id string, oauth *string, jwtToken *string) *data.UpdateDataPayload {
	v := &data.UpdateDataPayload{}
	v.Data = unmarshalPayloadDataRequestBodyToDataPayloadData(body.Data)
	v.ID = id
	v.Oauth = oauth
	v.JWTToken = jwtToken

	return v
}

// NewGetDataByUserIDPayload builds a data service getDataByUserID endpoint
// payload.
func NewGetDataByUserIDPayload(userID string, offset int32, limit int32, oauth *string, jwtToken *string) *data.GetDataByUserIDPayload {
	v := &data.GetDataByUserIDPayload{}
	v.UserID = userID
	v.Offset = offset
	v.Limit = limit
	v.Oauth = oauth
	v.JWTToken = jwtToken

	return v
}

// NewGetDataByIDPayload builds a data service getDataByID endpoint payload.
func NewGetDataByIDPayload(id string, oauth *string, jwtToken *string) *data.GetDataByIDPayload {
	v := &data.GetDataByIDPayload{}
	v.ID = id
	v.Oauth = oauth
	v.JWTToken = jwtToken

	return v
}

// ValidateListDataRequestBody runs the validations defined on
// ListDataRequestBody
func ValidateListDataRequestBody(body *ListDataRequestBody) (err error) {
	if body.Key == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("key", "body"))
	}
	return
}

// ValidateCreateDataRequestBody runs the validations defined on
// CreateDataRequestBody
func ValidateCreateDataRequestBody(body *CreateDataRequestBody) (err error) {
	if body.Data == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("data", "body"))
	}
	if body.Data != nil {
		if err2 := ValidatePayloadDataRequestBody(body.Data); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateUpdateDataRequestBody runs the validations defined on
// UpdateDataRequestBody
func ValidateUpdateDataRequestBody(body *UpdateDataRequestBody) (err error) {
	if body.Data == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("data", "body"))
	}
	if body.Data != nil {
		if err2 := ValidatePayloadDataRequestBody(body.Data); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidatePayloadDataRequestBody runs the validations defined on
// payloadDataRequestBody
func ValidatePayloadDataRequestBody(body *PayloadDataRequestBody) (err error) {
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Category == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("category", "body"))
	}
	if body.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user_id", "body"))
	}
	if body.Title != nil {
		if utf8.RuneCountInString(*body.Title) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.title", *body.Title, utf8.RuneCountInString(*body.Title), 3, true))
		}
	}
	if body.Title != nil {
		if utf8.RuneCountInString(*body.Title) > 20 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.title", *body.Title, utf8.RuneCountInString(*body.Title), 20, false))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 2, true))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 500 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 500, false))
		}
	}
	if body.Category != nil {
		if !(*body.Category == "robotics" || *body.Category == "space" || *body.Category == "brain" || *body.Category == "animals" || *body.Category == "autre") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.category", *body.Category, []interface{}{"robotics", "space", "brain", "animals", "autre"}))
		}
	}
	if body.UserID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.user_id", *body.UserID, goa.FormatUUID))
	}
	return
}
