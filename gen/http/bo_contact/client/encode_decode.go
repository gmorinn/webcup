// Code generated by goa v3.7.3, DO NOT EDIT.
//
// boContact HTTP client encoders and decoders
//
// Command:
// $ goa gen webcup/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	bocontact "webcup/gen/bo_contact"

	goahttp "goa.design/goa/v3/http"
)

// BuildGetBoContactRequest instantiates a HTTP request object with method and
// path set to call the "boContact" service "getBoContact" endpoint
func (c *Client) BuildGetBoContactRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		offset int32
		limit  int32
	)
	{
		p, ok := v.(*bocontact.GetBoContactPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("boContact", "getBoContact", "*bocontact.GetBoContactPayload", v)
		}
		offset = p.Offset
		limit = p.Limit
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetBoContactBoContactPath(offset, limit)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("boContact", "getBoContact", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetBoContactRequest returns an encoder for requests sent to the
// boContact getBoContact server.
func EncodeGetBoContactRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*bocontact.GetBoContactPayload)
		if !ok {
			return goahttp.ErrInvalidType("boContact", "getBoContact", "*bocontact.GetBoContactPayload", v)
		}
		if p.Oauth != nil {
			head := *p.Oauth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.JWTToken != nil {
			head := *p.JWTToken
			req.Header.Set("jwtToken", head)
		}
		values := req.URL.Query()
		values.Add("field", p.Field)
		values.Add("direction", p.Direction)
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeGetBoContactResponse returns a decoder for responses returned by the
// boContact getBoContact endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeGetBoContactResponse may return the following errors:
//	- "unknown_error" (type *bocontact.UnknownError): http.StatusInternalServerError
//	- error: internal error
func DecodeGetBoContactResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetBoContactResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("boContact", "getBoContact", err)
			}
			err = ValidateGetBoContactResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("boContact", "getBoContact", err)
			}
			res := NewGetBoContactResultOK(&body)
			return res, nil
		case http.StatusInternalServerError:
			var (
				body GetBoContactUnknownErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("boContact", "getBoContact", err)
			}
			err = ValidateGetBoContactUnknownErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("boContact", "getBoContact", err)
			}
			return nil, NewGetBoContactUnknownError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("boContact", "getBoContact", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteBoContactRequest instantiates a HTTP request object with method
// and path set to call the "boContact" service "deleteBoContact" endpoint
func (c *Client) BuildDeleteBoContactRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*bocontact.DeleteBoContactPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("boContact", "deleteBoContact", "*bocontact.DeleteBoContactPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteBoContactBoContactPath(id)}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("boContact", "deleteBoContact", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteBoContactRequest returns an encoder for requests sent to the
// boContact deleteBoContact server.
func EncodeDeleteBoContactRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*bocontact.DeleteBoContactPayload)
		if !ok {
			return goahttp.ErrInvalidType("boContact", "deleteBoContact", "*bocontact.DeleteBoContactPayload", v)
		}
		if p.Oauth != nil {
			head := *p.Oauth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.JWTToken != nil {
			head := *p.JWTToken
			req.Header.Set("jwtToken", head)
		}
		return nil
	}
}

// DecodeDeleteBoContactResponse returns a decoder for responses returned by
// the boContact deleteBoContact endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeDeleteBoContactResponse may return the following errors:
//	- "unknown_error" (type *bocontact.UnknownError): http.StatusInternalServerError
//	- error: internal error
func DecodeDeleteBoContactResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body DeleteBoContactResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("boContact", "deleteBoContact", err)
			}
			err = ValidateDeleteBoContactResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("boContact", "deleteBoContact", err)
			}
			res := NewDeleteBoContactResultOK(&body)
			return res, nil
		case http.StatusInternalServerError:
			var (
				body DeleteBoContactUnknownErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("boContact", "deleteBoContact", err)
			}
			err = ValidateDeleteBoContactUnknownErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("boContact", "deleteBoContact", err)
			}
			return nil, NewDeleteBoContactUnknownError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("boContact", "deleteBoContact", resp.StatusCode, string(body))
		}
	}
}

// BuildGetBoContactByIDRequest instantiates a HTTP request object with method
// and path set to call the "boContact" service "getBoContactByID" endpoint
func (c *Client) BuildGetBoContactByIDRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*bocontact.GetBoContactByIDPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("boContact", "getBoContactByID", "*bocontact.GetBoContactByIDPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetBoContactByIDBoContactPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("boContact", "getBoContactByID", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetBoContactByIDRequest returns an encoder for requests sent to the
// boContact getBoContactByID server.
func EncodeGetBoContactByIDRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*bocontact.GetBoContactByIDPayload)
		if !ok {
			return goahttp.ErrInvalidType("boContact", "getBoContactByID", "*bocontact.GetBoContactByIDPayload", v)
		}
		if p.Oauth != nil {
			head := *p.Oauth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.JWTToken != nil {
			head := *p.JWTToken
			req.Header.Set("jwtToken", head)
		}
		return nil
	}
}

// DecodeGetBoContactByIDResponse returns a decoder for responses returned by
// the boContact getBoContactByID endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeGetBoContactByIDResponse may return the following errors:
//	- "unknown_error" (type *bocontact.UnknownError): http.StatusInternalServerError
//	- error: internal error
func DecodeGetBoContactByIDResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetBoContactByIDResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("boContact", "getBoContactByID", err)
			}
			err = ValidateGetBoContactByIDResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("boContact", "getBoContactByID", err)
			}
			res := NewGetBoContactByIDResultOK(&body)
			return res, nil
		case http.StatusInternalServerError:
			var (
				body GetBoContactByIDUnknownErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("boContact", "getBoContactByID", err)
			}
			err = ValidateGetBoContactByIDUnknownErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("boContact", "getBoContactByID", err)
			}
			return nil, NewGetBoContactByIDUnknownError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("boContact", "getBoContactByID", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteBoManyContactRequest instantiates a HTTP request object with
// method and path set to call the "boContact" service "deleteBoManyContact"
// endpoint
func (c *Client) BuildDeleteBoManyContactRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteBoManyContactBoContactPath()}
	req, err := http.NewRequest("PATCH", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("boContact", "deleteBoManyContact", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteBoManyContactRequest returns an encoder for requests sent to the
// boContact deleteBoManyContact server.
func EncodeDeleteBoManyContactRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*bocontact.DeleteBoManyContactPayload)
		if !ok {
			return goahttp.ErrInvalidType("boContact", "deleteBoManyContact", "*bocontact.DeleteBoManyContactPayload", v)
		}
		if p.Oauth != nil {
			head := *p.Oauth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.JWTToken != nil {
			head := *p.JWTToken
			req.Header.Set("jwtToken", head)
		}
		body := NewDeleteBoManyContactRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("boContact", "deleteBoManyContact", err)
		}
		return nil
	}
}

// DecodeDeleteBoManyContactResponse returns a decoder for responses returned
// by the boContact deleteBoManyContact endpoint. restoreBody controls whether
// the response body should be restored after having been read.
// DecodeDeleteBoManyContactResponse may return the following errors:
//	- "unknown_error" (type *bocontact.UnknownError): http.StatusInternalServerError
//	- error: internal error
func DecodeDeleteBoManyContactResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body DeleteBoManyContactResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("boContact", "deleteBoManyContact", err)
			}
			err = ValidateDeleteBoManyContactResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("boContact", "deleteBoManyContact", err)
			}
			res := NewDeleteBoManyContactResultOK(&body)
			return res, nil
		case http.StatusInternalServerError:
			var (
				body DeleteBoManyContactUnknownErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("boContact", "deleteBoManyContact", err)
			}
			err = ValidateDeleteBoManyContactUnknownErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("boContact", "deleteBoManyContact", err)
			}
			return nil, NewDeleteBoManyContactUnknownError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("boContact", "deleteBoManyContact", resp.StatusCode, string(body))
		}
	}
}

// unmarshalResContactResponseBodyToBocontactResContact builds a value of type
// *bocontact.ResContact from a value of type *ResContactResponseBody.
func unmarshalResContactResponseBodyToBocontactResContact(v *ResContactResponseBody) *bocontact.ResContact {
	res := &bocontact.ResContact{
		ID:      *v.ID,
		UserID:  *v.UserID,
		Email:   *v.Email,
		Message: *v.Message,
	}

	return res
}
