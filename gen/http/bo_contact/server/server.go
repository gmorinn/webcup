// Code generated by goa v3.7.3, DO NOT EDIT.
//
// boContact HTTP server
//
// Command:
// $ goa gen webcup/design

package server

import (
	"context"
	"net/http"
	"regexp"
	bocontact "webcup/gen/bo_contact"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
	"goa.design/plugins/v3/cors"
)

// Server lists the boContact service endpoint HTTP handlers.
type Server struct {
	Mounts              []*MountPoint
	GetBoContact        http.Handler
	DeleteBoContact     http.Handler
	GetBoContactByID    http.Handler
	DeleteBoManyContact http.Handler
	CORS                http.Handler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the design.
type ErrorNamer interface {
	ErrorName() string
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the boContact service endpoints using
// the provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *bocontact.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"GetBoContact", "GET", "/v1/bo/contacts/messages/{offset}/{limit}"},
			{"DeleteBoContact", "PUT", "/v1/bo/contacts/remove/{id}"},
			{"GetBoContactByID", "GET", "/v1/bo/contacts/{id}"},
			{"DeleteBoManyContact", "PATCH", "/v1/bo/contacts/remove"},
			{"CORS", "OPTIONS", "/v1/bo/contacts/messages/{offset}/{limit}"},
			{"CORS", "OPTIONS", "/v1/bo/contacts/remove/{id}"},
			{"CORS", "OPTIONS", "/v1/bo/contacts/{id}"},
			{"CORS", "OPTIONS", "/v1/bo/contacts/remove"},
		},
		GetBoContact:        NewGetBoContactHandler(e.GetBoContact, mux, decoder, encoder, errhandler, formatter),
		DeleteBoContact:     NewDeleteBoContactHandler(e.DeleteBoContact, mux, decoder, encoder, errhandler, formatter),
		GetBoContactByID:    NewGetBoContactByIDHandler(e.GetBoContactByID, mux, decoder, encoder, errhandler, formatter),
		DeleteBoManyContact: NewDeleteBoManyContactHandler(e.DeleteBoManyContact, mux, decoder, encoder, errhandler, formatter),
		CORS:                NewCORSHandler(),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "boContact" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.GetBoContact = m(s.GetBoContact)
	s.DeleteBoContact = m(s.DeleteBoContact)
	s.GetBoContactByID = m(s.GetBoContactByID)
	s.DeleteBoManyContact = m(s.DeleteBoManyContact)
	s.CORS = m(s.CORS)
}

// Mount configures the mux to serve the boContact endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountGetBoContactHandler(mux, h.GetBoContact)
	MountDeleteBoContactHandler(mux, h.DeleteBoContact)
	MountGetBoContactByIDHandler(mux, h.GetBoContactByID)
	MountDeleteBoManyContactHandler(mux, h.DeleteBoManyContact)
	MountCORSHandler(mux, h.CORS)
}

// Mount configures the mux to serve the boContact endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountGetBoContactHandler configures the mux to serve the "boContact" service
// "getBoContact" endpoint.
func MountGetBoContactHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleBoContactOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/v1/bo/contacts/messages/{offset}/{limit}", f)
}

// NewGetBoContactHandler creates a HTTP handler which loads the HTTP request
// and calls the "boContact" service "getBoContact" endpoint.
func NewGetBoContactHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetBoContactRequest(mux, decoder)
		encodeResponse = EncodeGetBoContactResponse(encoder)
		encodeError    = EncodeGetBoContactError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "getBoContact")
		ctx = context.WithValue(ctx, goa.ServiceKey, "boContact")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeleteBoContactHandler configures the mux to serve the "boContact"
// service "deleteBoContact" endpoint.
func MountDeleteBoContactHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleBoContactOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/v1/bo/contacts/remove/{id}", f)
}

// NewDeleteBoContactHandler creates a HTTP handler which loads the HTTP
// request and calls the "boContact" service "deleteBoContact" endpoint.
func NewDeleteBoContactHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteBoContactRequest(mux, decoder)
		encodeResponse = EncodeDeleteBoContactResponse(encoder)
		encodeError    = EncodeDeleteBoContactError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "deleteBoContact")
		ctx = context.WithValue(ctx, goa.ServiceKey, "boContact")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetBoContactByIDHandler configures the mux to serve the "boContact"
// service "getBoContactByID" endpoint.
func MountGetBoContactByIDHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleBoContactOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/v1/bo/contacts/{id}", f)
}

// NewGetBoContactByIDHandler creates a HTTP handler which loads the HTTP
// request and calls the "boContact" service "getBoContactByID" endpoint.
func NewGetBoContactByIDHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetBoContactByIDRequest(mux, decoder)
		encodeResponse = EncodeGetBoContactByIDResponse(encoder)
		encodeError    = EncodeGetBoContactByIDError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "getBoContactByID")
		ctx = context.WithValue(ctx, goa.ServiceKey, "boContact")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeleteBoManyContactHandler configures the mux to serve the "boContact"
// service "deleteBoManyContact" endpoint.
func MountDeleteBoManyContactHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleBoContactOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PATCH", "/v1/bo/contacts/remove", f)
}

// NewDeleteBoManyContactHandler creates a HTTP handler which loads the HTTP
// request and calls the "boContact" service "deleteBoManyContact" endpoint.
func NewDeleteBoManyContactHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteBoManyContactRequest(mux, decoder)
		encodeResponse = EncodeDeleteBoManyContactResponse(encoder)
		encodeError    = EncodeDeleteBoManyContactError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "deleteBoManyContact")
		ctx = context.WithValue(ctx, goa.ServiceKey, "boContact")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCORSHandler configures the mux to serve the CORS endpoints for the
// service boContact.
func MountCORSHandler(mux goahttp.Muxer, h http.Handler) {
	h = HandleBoContactOrigin(h)
	mux.Handle("OPTIONS", "/v1/bo/contacts/messages/{offset}/{limit}", h.ServeHTTP)
	mux.Handle("OPTIONS", "/v1/bo/contacts/remove/{id}", h.ServeHTTP)
	mux.Handle("OPTIONS", "/v1/bo/contacts/{id}", h.ServeHTTP)
	mux.Handle("OPTIONS", "/v1/bo/contacts/remove", h.ServeHTTP)
}

// NewCORSHandler creates a HTTP handler which returns a simple 200 response.
func NewCORSHandler() http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(200)
	})
}

// HandleBoContactOrigin applies the CORS response headers corresponding to the
// origin for the service boContact.
func HandleBoContactOrigin(h http.Handler) http.Handler {
	spec0 := regexp.MustCompile(".*team-gm.re.*")
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		origin := r.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			h.ServeHTTP(w, r)
			return
		}
		if cors.MatchOriginRegexp(origin, spec0) {
			w.Header().Set("Access-Control-Allow-Origin", origin)
			w.Header().Set("Vary", "Origin")
			w.Header().Set("Access-Control-Expose-Headers", "Content-Type, Origin")
			w.Header().Set("Access-Control-Max-Age", "600")
			w.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := r.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				w.Header().Set("Access-Control-Allow-Methods", "POST, GET, PUT, OPTIONS, DELETE, PATCH")
				w.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type, jwtToken, Origin")
			}
			h.ServeHTTP(w, r)
			return
		}
		h.ServeHTTP(w, r)
		return
	})
}
