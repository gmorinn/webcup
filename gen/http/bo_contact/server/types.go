// Code generated by goa v3.7.3, DO NOT EDIT.
//
// boContact HTTP server types
//
// Command:
// $ goa gen webcup/design

package server

import (
	bocontact "webcup/gen/bo_contact"

	goa "goa.design/goa/v3/pkg"
)

// DeleteBoManyContactRequestBody is the type of the "boContact" service
// "deleteBoManyContact" endpoint HTTP request body.
type DeleteBoManyContactRequestBody struct {
	Tab []string `form:"tab,omitempty" json:"tab,omitempty" xml:"tab,omitempty"`
}

// GetBoContactResponseBody is the type of the "boContact" service
// "getBoContact" endpoint HTTP response body.
type GetBoContactResponseBody struct {
	// All messages
	Contacts []*ResContactResponseBody `form:"contacts" json:"contacts" xml:"contacts"`
	// total of messages
	Count   int64 `form:"count" json:"count" xml:"count"`
	Success bool  `form:"success" json:"success" xml:"success"`
}

// DeleteBoContactResponseBody is the type of the "boContact" service
// "deleteBoContact" endpoint HTTP response body.
type DeleteBoContactResponseBody struct {
	Success bool `form:"success" json:"success" xml:"success"`
}

// GetBoContactByIDResponseBody is the type of the "boContact" service
// "getBoContactByID" endpoint HTTP response body.
type GetBoContactByIDResponseBody struct {
	Success bool `form:"success" json:"success" xml:"success"`
	// One message
	Contact *ResContactResponseBody `form:"contact,omitempty" json:"contact,omitempty" xml:"contact,omitempty"`
}

// DeleteBoManyContactResponseBody is the type of the "boContact" service
// "deleteBoManyContact" endpoint HTTP response body.
type DeleteBoManyContactResponseBody struct {
	Success bool `form:"success" json:"success" xml:"success"`
}

// GetBoContactUnknownErrorResponseBody is the type of the "boContact" service
// "getBoContact" endpoint HTTP response body for the "unknown_error" error.
type GetBoContactUnknownErrorResponseBody struct {
	Err       string `form:"err" json:"err" xml:"err"`
	ErrorCode string `form:"error_code" json:"error_code" xml:"error_code"`
	Success   bool   `form:"success" json:"success" xml:"success"`
}

// DeleteBoContactUnknownErrorResponseBody is the type of the "boContact"
// service "deleteBoContact" endpoint HTTP response body for the
// "unknown_error" error.
type DeleteBoContactUnknownErrorResponseBody struct {
	Err       string `form:"err" json:"err" xml:"err"`
	ErrorCode string `form:"error_code" json:"error_code" xml:"error_code"`
	Success   bool   `form:"success" json:"success" xml:"success"`
}

// GetBoContactByIDUnknownErrorResponseBody is the type of the "boContact"
// service "getBoContactByID" endpoint HTTP response body for the
// "unknown_error" error.
type GetBoContactByIDUnknownErrorResponseBody struct {
	Err       string `form:"err" json:"err" xml:"err"`
	ErrorCode string `form:"error_code" json:"error_code" xml:"error_code"`
	Success   bool   `form:"success" json:"success" xml:"success"`
}

// DeleteBoManyContactUnknownErrorResponseBody is the type of the "boContact"
// service "deleteBoManyContact" endpoint HTTP response body for the
// "unknown_error" error.
type DeleteBoManyContactUnknownErrorResponseBody struct {
	Err       string `form:"err" json:"err" xml:"err"`
	ErrorCode string `form:"error_code" json:"error_code" xml:"error_code"`
	Success   bool   `form:"success" json:"success" xml:"success"`
}

// ResContactResponseBody is used to define fields on response body types.
type ResContactResponseBody struct {
	ID      string `form:"id" json:"id" xml:"id"`
	UserID  string `form:"user_id" json:"user_id" xml:"user_id"`
	Email   string `form:"email" json:"email" xml:"email"`
	Message string `form:"message" json:"message" xml:"message"`
}

// NewGetBoContactResponseBody builds the HTTP response body from the result of
// the "getBoContact" endpoint of the "boContact" service.
func NewGetBoContactResponseBody(res *bocontact.GetBoContactResult) *GetBoContactResponseBody {
	body := &GetBoContactResponseBody{
		Count:   res.Count,
		Success: res.Success,
	}
	if res.Contacts != nil {
		body.Contacts = make([]*ResContactResponseBody, len(res.Contacts))
		for i, val := range res.Contacts {
			body.Contacts[i] = marshalBocontactResContactToResContactResponseBody(val)
		}
	}
	return body
}

// NewDeleteBoContactResponseBody builds the HTTP response body from the result
// of the "deleteBoContact" endpoint of the "boContact" service.
func NewDeleteBoContactResponseBody(res *bocontact.DeleteBoContactResult) *DeleteBoContactResponseBody {
	body := &DeleteBoContactResponseBody{
		Success: res.Success,
	}
	return body
}

// NewGetBoContactByIDResponseBody builds the HTTP response body from the
// result of the "getBoContactByID" endpoint of the "boContact" service.
func NewGetBoContactByIDResponseBody(res *bocontact.GetBoContactByIDResult) *GetBoContactByIDResponseBody {
	body := &GetBoContactByIDResponseBody{
		Success: res.Success,
	}
	if res.Contact != nil {
		body.Contact = marshalBocontactResContactToResContactResponseBody(res.Contact)
	}
	return body
}

// NewDeleteBoManyContactResponseBody builds the HTTP response body from the
// result of the "deleteBoManyContact" endpoint of the "boContact" service.
func NewDeleteBoManyContactResponseBody(res *bocontact.DeleteBoManyContactResult) *DeleteBoManyContactResponseBody {
	body := &DeleteBoManyContactResponseBody{
		Success: res.Success,
	}
	return body
}

// NewGetBoContactUnknownErrorResponseBody builds the HTTP response body from
// the result of the "getBoContact" endpoint of the "boContact" service.
func NewGetBoContactUnknownErrorResponseBody(res *bocontact.UnknownError) *GetBoContactUnknownErrorResponseBody {
	body := &GetBoContactUnknownErrorResponseBody{
		Err:       res.Err,
		ErrorCode: res.ErrorCode,
		Success:   res.Success,
	}
	return body
}

// NewDeleteBoContactUnknownErrorResponseBody builds the HTTP response body
// from the result of the "deleteBoContact" endpoint of the "boContact" service.
func NewDeleteBoContactUnknownErrorResponseBody(res *bocontact.UnknownError) *DeleteBoContactUnknownErrorResponseBody {
	body := &DeleteBoContactUnknownErrorResponseBody{
		Err:       res.Err,
		ErrorCode: res.ErrorCode,
		Success:   res.Success,
	}
	return body
}

// NewGetBoContactByIDUnknownErrorResponseBody builds the HTTP response body
// from the result of the "getBoContactByID" endpoint of the "boContact"
// service.
func NewGetBoContactByIDUnknownErrorResponseBody(res *bocontact.UnknownError) *GetBoContactByIDUnknownErrorResponseBody {
	body := &GetBoContactByIDUnknownErrorResponseBody{
		Err:       res.Err,
		ErrorCode: res.ErrorCode,
		Success:   res.Success,
	}
	return body
}

// NewDeleteBoManyContactUnknownErrorResponseBody builds the HTTP response body
// from the result of the "deleteBoManyContact" endpoint of the "boContact"
// service.
func NewDeleteBoManyContactUnknownErrorResponseBody(res *bocontact.UnknownError) *DeleteBoManyContactUnknownErrorResponseBody {
	body := &DeleteBoManyContactUnknownErrorResponseBody{
		Err:       res.Err,
		ErrorCode: res.ErrorCode,
		Success:   res.Success,
	}
	return body
}

// NewGetBoContactPayload builds a boContact service getBoContact endpoint
// payload.
func NewGetBoContactPayload(offset int32, limit int32, field string, direction string, oauth *string, jwtToken *string) *bocontact.GetBoContactPayload {
	v := &bocontact.GetBoContactPayload{}
	v.Offset = offset
	v.Limit = limit
	v.Field = field
	v.Direction = direction
	v.Oauth = oauth
	v.JWTToken = jwtToken

	return v
}

// NewDeleteBoContactPayload builds a boContact service deleteBoContact
// endpoint payload.
func NewDeleteBoContactPayload(id string, oauth *string, jwtToken *string) *bocontact.DeleteBoContactPayload {
	v := &bocontact.DeleteBoContactPayload{}
	v.ID = id
	v.Oauth = oauth
	v.JWTToken = jwtToken

	return v
}

// NewGetBoContactByIDPayload builds a boContact service getBoContactByID
// endpoint payload.
func NewGetBoContactByIDPayload(id string, oauth *string, jwtToken *string) *bocontact.GetBoContactByIDPayload {
	v := &bocontact.GetBoContactByIDPayload{}
	v.ID = id
	v.Oauth = oauth
	v.JWTToken = jwtToken

	return v
}

// NewDeleteBoManyContactPayload builds a boContact service deleteBoManyContact
// endpoint payload.
func NewDeleteBoManyContactPayload(body *DeleteBoManyContactRequestBody, oauth *string, jwtToken *string) *bocontact.DeleteBoManyContactPayload {
	v := &bocontact.DeleteBoManyContactPayload{}
	v.Tab = make([]string, len(body.Tab))
	for i, val := range body.Tab {
		v.Tab[i] = val
	}
	v.Oauth = oauth
	v.JWTToken = jwtToken

	return v
}

// ValidateDeleteBoManyContactRequestBody runs the validations defined on
// DeleteBoManyContactRequestBody
func ValidateDeleteBoManyContactRequestBody(body *DeleteBoManyContactRequestBody) (err error) {
	if body.Tab == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("tab", "body"))
	}
	return
}
