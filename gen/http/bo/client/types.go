// Code generated by goa v3.7.3, DO NOT EDIT.
//
// bo HTTP client types
//
// Command:
// $ goa gen webcup/design

package client

import (
	"unicode/utf8"
	bo "webcup/gen/bo"

	goa "goa.design/goa/v3/pkg"
)

// DeleteBoManyUsersRequestBody is the type of the "bo" service
// "deleteBoManyUsers" endpoint HTTP request body.
type DeleteBoManyUsersRequestBody struct {
	Tab []string `form:"tab" json:"tab" xml:"tab"`
}

// UpdateBoUserRequestBody is the type of the "bo" service "updateBoUser"
// endpoint HTTP request body.
type UpdateBoUserRequestBody struct {
	User *PayloadUserRequestBody `form:"user" json:"user" xml:"user"`
}

// GetBoUsersResponseBody is the type of the "bo" service "getBoUsers" endpoint
// HTTP response body.
type GetBoUsersResponseBody struct {
	// All users
	Users []*ResUserResponseBody `form:"users,omitempty" json:"users,omitempty" xml:"users,omitempty"`
	// total of users
	Count   *int64 `form:"count,omitempty" json:"count,omitempty" xml:"count,omitempty"`
	Success *bool  `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
}

// DeleteBoUserResponseBody is the type of the "bo" service "deleteBoUser"
// endpoint HTTP response body.
type DeleteBoUserResponseBody struct {
	Success *bool `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
}

// DeleteBoManyUsersResponseBody is the type of the "bo" service
// "deleteBoManyUsers" endpoint HTTP response body.
type DeleteBoManyUsersResponseBody struct {
	Success *bool `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
}

// UpdateBoUserResponseBody is the type of the "bo" service "updateBoUser"
// endpoint HTTP response body.
type UpdateBoUserResponseBody struct {
	// Result is an Object
	User    *ResUserResponseBody `form:"user,omitempty" json:"user,omitempty" xml:"user,omitempty"`
	Success *bool                `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
}

// GetBoUserResponseBody is the type of the "bo" service "getBoUser" endpoint
// HTTP response body.
type GetBoUserResponseBody struct {
	// Result is an object
	User    *ResUserResponseBody `form:"user,omitempty" json:"user,omitempty" xml:"user,omitempty"`
	Success *bool                `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
}

// GetBoUsersUnknownErrorResponseBody is the type of the "bo" service
// "getBoUsers" endpoint HTTP response body for the "unknown_error" error.
type GetBoUsersUnknownErrorResponseBody struct {
	Err       *string `form:"err,omitempty" json:"err,omitempty" xml:"err,omitempty"`
	ErrorCode *string `form:"error_code,omitempty" json:"error_code,omitempty" xml:"error_code,omitempty"`
	Success   *bool   `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
}

// DeleteBoUserUnknownErrorResponseBody is the type of the "bo" service
// "deleteBoUser" endpoint HTTP response body for the "unknown_error" error.
type DeleteBoUserUnknownErrorResponseBody struct {
	Err       *string `form:"err,omitempty" json:"err,omitempty" xml:"err,omitempty"`
	ErrorCode *string `form:"error_code,omitempty" json:"error_code,omitempty" xml:"error_code,omitempty"`
	Success   *bool   `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
}

// DeleteBoManyUsersUnknownErrorResponseBody is the type of the "bo" service
// "deleteBoManyUsers" endpoint HTTP response body for the "unknown_error"
// error.
type DeleteBoManyUsersUnknownErrorResponseBody struct {
	Err       *string `form:"err,omitempty" json:"err,omitempty" xml:"err,omitempty"`
	ErrorCode *string `form:"error_code,omitempty" json:"error_code,omitempty" xml:"error_code,omitempty"`
	Success   *bool   `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
}

// UpdateBoUserUnknownErrorResponseBody is the type of the "bo" service
// "updateBoUser" endpoint HTTP response body for the "unknown_error" error.
type UpdateBoUserUnknownErrorResponseBody struct {
	Err       *string `form:"err,omitempty" json:"err,omitempty" xml:"err,omitempty"`
	ErrorCode *string `form:"error_code,omitempty" json:"error_code,omitempty" xml:"error_code,omitempty"`
	Success   *bool   `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
}

// GetBoUserUnknownErrorResponseBody is the type of the "bo" service
// "getBoUser" endpoint HTTP response body for the "unknown_error" error.
type GetBoUserUnknownErrorResponseBody struct {
	Err       *string `form:"err,omitempty" json:"err,omitempty" xml:"err,omitempty"`
	ErrorCode *string `form:"error_code,omitempty" json:"error_code,omitempty" xml:"error_code,omitempty"`
	Success   *bool   `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
}

// ResUserResponseBody is used to define fields on response body types.
type ResUserResponseBody struct {
	ID        *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Firstname *string `form:"firstname,omitempty" json:"firstname,omitempty" xml:"firstname,omitempty"`
	Lastname  *string `form:"lastname,omitempty" json:"lastname,omitempty" xml:"lastname,omitempty"`
	Username  *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	Email     *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// User is admin or not
	Role   *string `form:"role,omitempty" json:"role,omitempty" xml:"role,omitempty"`
	Avatar *string `form:"avatar,omitempty" json:"avatar,omitempty" xml:"avatar,omitempty"`
}

// PayloadUserRequestBody is used to define fields on request body types.
type PayloadUserRequestBody struct {
	Email     string `form:"email" json:"email" xml:"email"`
	Username  string `form:"username" json:"username" xml:"username"`
	Firstname string `form:"firstname" json:"firstname" xml:"firstname"`
	Lastname  string `form:"lastname" json:"lastname" xml:"lastname"`
	// Url of the avatar and stock in db
	Avatar string `form:"avatar" json:"avatar" xml:"avatar"`
	// role of the user
	Role string `form:"role" json:"role" xml:"role"`
}

// NewDeleteBoManyUsersRequestBody builds the HTTP request body from the
// payload of the "deleteBoManyUsers" endpoint of the "bo" service.
func NewDeleteBoManyUsersRequestBody(p *bo.DeleteBoManyUsersPayload) *DeleteBoManyUsersRequestBody {
	body := &DeleteBoManyUsersRequestBody{}
	if p.Tab != nil {
		body.Tab = make([]string, len(p.Tab))
		for i, val := range p.Tab {
			body.Tab[i] = val
		}
	}
	return body
}

// NewUpdateBoUserRequestBody builds the HTTP request body from the payload of
// the "updateBoUser" endpoint of the "bo" service.
func NewUpdateBoUserRequestBody(p *bo.UpdateBoUserPayload) *UpdateBoUserRequestBody {
	body := &UpdateBoUserRequestBody{}
	if p.User != nil {
		body.User = marshalBoPayloadUserToPayloadUserRequestBody(p.User)
	}
	return body
}

// NewGetBoUsersResultOK builds a "bo" service "getBoUsers" endpoint result
// from a HTTP "OK" response.
func NewGetBoUsersResultOK(body *GetBoUsersResponseBody) *bo.GetBoUsersResult {
	v := &bo.GetBoUsersResult{
		Count:   *body.Count,
		Success: *body.Success,
	}
	v.Users = make([]*bo.ResUser, len(body.Users))
	for i, val := range body.Users {
		v.Users[i] = unmarshalResUserResponseBodyToBoResUser(val)
	}

	return v
}

// NewGetBoUsersUnknownError builds a bo service getBoUsers endpoint
// unknown_error error.
func NewGetBoUsersUnknownError(body *GetBoUsersUnknownErrorResponseBody) *bo.UnknownError {
	v := &bo.UnknownError{
		Err:       *body.Err,
		ErrorCode: *body.ErrorCode,
		Success:   *body.Success,
	}

	return v
}

// NewDeleteBoUserResultOK builds a "bo" service "deleteBoUser" endpoint result
// from a HTTP "OK" response.
func NewDeleteBoUserResultOK(body *DeleteBoUserResponseBody) *bo.DeleteBoUserResult {
	v := &bo.DeleteBoUserResult{
		Success: *body.Success,
	}

	return v
}

// NewDeleteBoUserUnknownError builds a bo service deleteBoUser endpoint
// unknown_error error.
func NewDeleteBoUserUnknownError(body *DeleteBoUserUnknownErrorResponseBody) *bo.UnknownError {
	v := &bo.UnknownError{
		Err:       *body.Err,
		ErrorCode: *body.ErrorCode,
		Success:   *body.Success,
	}

	return v
}

// NewDeleteBoManyUsersResultOK builds a "bo" service "deleteBoManyUsers"
// endpoint result from a HTTP "OK" response.
func NewDeleteBoManyUsersResultOK(body *DeleteBoManyUsersResponseBody) *bo.DeleteBoManyUsersResult {
	v := &bo.DeleteBoManyUsersResult{
		Success: *body.Success,
	}

	return v
}

// NewDeleteBoManyUsersUnknownError builds a bo service deleteBoManyUsers
// endpoint unknown_error error.
func NewDeleteBoManyUsersUnknownError(body *DeleteBoManyUsersUnknownErrorResponseBody) *bo.UnknownError {
	v := &bo.UnknownError{
		Err:       *body.Err,
		ErrorCode: *body.ErrorCode,
		Success:   *body.Success,
	}

	return v
}

// NewUpdateBoUserResultOK builds a "bo" service "updateBoUser" endpoint result
// from a HTTP "OK" response.
func NewUpdateBoUserResultOK(body *UpdateBoUserResponseBody) *bo.UpdateBoUserResult {
	v := &bo.UpdateBoUserResult{
		Success: *body.Success,
	}
	v.User = unmarshalResUserResponseBodyToBoResUser(body.User)

	return v
}

// NewUpdateBoUserUnknownError builds a bo service updateBoUser endpoint
// unknown_error error.
func NewUpdateBoUserUnknownError(body *UpdateBoUserUnknownErrorResponseBody) *bo.UnknownError {
	v := &bo.UnknownError{
		Err:       *body.Err,
		ErrorCode: *body.ErrorCode,
		Success:   *body.Success,
	}

	return v
}

// NewGetBoUserResultOK builds a "bo" service "getBoUser" endpoint result from
// a HTTP "OK" response.
func NewGetBoUserResultOK(body *GetBoUserResponseBody) *bo.GetBoUserResult {
	v := &bo.GetBoUserResult{
		Success: *body.Success,
	}
	v.User = unmarshalResUserResponseBodyToBoResUser(body.User)

	return v
}

// NewGetBoUserUnknownError builds a bo service getBoUser endpoint
// unknown_error error.
func NewGetBoUserUnknownError(body *GetBoUserUnknownErrorResponseBody) *bo.UnknownError {
	v := &bo.UnknownError{
		Err:       *body.Err,
		ErrorCode: *body.ErrorCode,
		Success:   *body.Success,
	}

	return v
}

// ValidateGetBoUsersResponseBody runs the validations defined on
// GetBoUsersResponseBody
func ValidateGetBoUsersResponseBody(body *GetBoUsersResponseBody) (err error) {
	if body.Users == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("users", "body"))
	}
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	if body.Count == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("count", "body"))
	}
	for _, e := range body.Users {
		if e != nil {
			if err2 := ValidateResUserResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateDeleteBoUserResponseBody runs the validations defined on
// DeleteBoUserResponseBody
func ValidateDeleteBoUserResponseBody(body *DeleteBoUserResponseBody) (err error) {
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	return
}

// ValidateDeleteBoManyUsersResponseBody runs the validations defined on
// DeleteBoManyUsersResponseBody
func ValidateDeleteBoManyUsersResponseBody(body *DeleteBoManyUsersResponseBody) (err error) {
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	return
}

// ValidateUpdateBoUserResponseBody runs the validations defined on
// UpdateBoUserResponseBody
func ValidateUpdateBoUserResponseBody(body *UpdateBoUserResponseBody) (err error) {
	if body.User == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user", "body"))
	}
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	if body.User != nil {
		if err2 := ValidateResUserResponseBody(body.User); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateGetBoUserResponseBody runs the validations defined on
// GetBoUserResponseBody
func ValidateGetBoUserResponseBody(body *GetBoUserResponseBody) (err error) {
	if body.User == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user", "body"))
	}
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	if body.User != nil {
		if err2 := ValidateResUserResponseBody(body.User); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateGetBoUsersUnknownErrorResponseBody runs the validations defined on
// getBoUsers_unknown_error_response_body
func ValidateGetBoUsersUnknownErrorResponseBody(body *GetBoUsersUnknownErrorResponseBody) (err error) {
	if body.Err == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("err", "body"))
	}
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	if body.ErrorCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("error_code", "body"))
	}
	return
}

// ValidateDeleteBoUserUnknownErrorResponseBody runs the validations defined on
// deleteBoUser_unknown_error_response_body
func ValidateDeleteBoUserUnknownErrorResponseBody(body *DeleteBoUserUnknownErrorResponseBody) (err error) {
	if body.Err == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("err", "body"))
	}
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	if body.ErrorCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("error_code", "body"))
	}
	return
}

// ValidateDeleteBoManyUsersUnknownErrorResponseBody runs the validations
// defined on deleteBoManyUsers_unknown_error_response_body
func ValidateDeleteBoManyUsersUnknownErrorResponseBody(body *DeleteBoManyUsersUnknownErrorResponseBody) (err error) {
	if body.Err == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("err", "body"))
	}
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	if body.ErrorCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("error_code", "body"))
	}
	return
}

// ValidateUpdateBoUserUnknownErrorResponseBody runs the validations defined on
// updateBoUser_unknown_error_response_body
func ValidateUpdateBoUserUnknownErrorResponseBody(body *UpdateBoUserUnknownErrorResponseBody) (err error) {
	if body.Err == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("err", "body"))
	}
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	if body.ErrorCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("error_code", "body"))
	}
	return
}

// ValidateGetBoUserUnknownErrorResponseBody runs the validations defined on
// getBoUser_unknown_error_response_body
func ValidateGetBoUserUnknownErrorResponseBody(body *GetBoUserUnknownErrorResponseBody) (err error) {
	if body.Err == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("err", "body"))
	}
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	if body.ErrorCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("error_code", "body"))
	}
	return
}

// ValidateResUserResponseBody runs the validations defined on
// resUserResponseBody
func ValidateResUserResponseBody(body *ResUserResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	if body.Firstname == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("firstname", "body"))
	}
	if body.Lastname == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("lastname", "body"))
	}
	if body.Avatar == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("avatar", "body"))
	}
	if body.Role == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("role", "body"))
	}
	return
}

// ValidatePayloadUserRequestBody runs the validations defined on
// payloadUserRequestBody
func ValidatePayloadUserRequestBody(body *PayloadUserRequestBody) (err error) {
	err = goa.MergeErrors(err, goa.ValidateFormat("body.email", body.Email, goa.FormatEmail))

	err = goa.MergeErrors(err, goa.ValidatePattern("body.username", body.Username, "^[a-z0-9_\\-]+$"))
	if utf8.RuneCountInString(body.Username) < 2 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.username", body.Username, utf8.RuneCountInString(body.Username), 2, true))
	}
	if utf8.RuneCountInString(body.Username) > 20 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.username", body.Username, utf8.RuneCountInString(body.Username), 20, false))
	}
	if utf8.RuneCountInString(body.Firstname) < 3 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.firstname", body.Firstname, utf8.RuneCountInString(body.Firstname), 3, true))
	}
	if utf8.RuneCountInString(body.Firstname) > 20 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.firstname", body.Firstname, utf8.RuneCountInString(body.Firstname), 20, false))
	}
	if utf8.RuneCountInString(body.Lastname) < 3 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.lastname", body.Lastname, utf8.RuneCountInString(body.Lastname), 3, true))
	}
	if utf8.RuneCountInString(body.Lastname) > 20 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.lastname", body.Lastname, utf8.RuneCountInString(body.Lastname), 20, false))
	}
	if !(body.Role == "admin" || body.Role == "user" || body.Role == "pro") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.role", body.Role, []interface{}{"admin", "user", "pro"}))
	}
	return
}
