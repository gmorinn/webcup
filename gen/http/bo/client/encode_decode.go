// Code generated by goa v3.7.3, DO NOT EDIT.
//
// bo HTTP client encoders and decoders
//
// Command:
// $ goa gen webcup/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	bo "webcup/gen/bo"

	goahttp "goa.design/goa/v3/http"
)

// BuildGetBoUsersRequest instantiates a HTTP request object with method and
// path set to call the "bo" service "getBoUsers" endpoint
func (c *Client) BuildGetBoUsersRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		offset int32
		limit  int32
	)
	{
		p, ok := v.(*bo.GetBoUsersPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("bo", "getBoUsers", "*bo.GetBoUsersPayload", v)
		}
		offset = p.Offset
		limit = p.Limit
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetBoUsersBoPath(offset, limit)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("bo", "getBoUsers", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetBoUsersRequest returns an encoder for requests sent to the bo
// getBoUsers server.
func EncodeGetBoUsersRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*bo.GetBoUsersPayload)
		if !ok {
			return goahttp.ErrInvalidType("bo", "getBoUsers", "*bo.GetBoUsersPayload", v)
		}
		if p.Oauth != nil {
			head := *p.Oauth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.JWTToken != nil {
			head := *p.JWTToken
			req.Header.Set("jwtToken", head)
		}
		values := req.URL.Query()
		values.Add("field", p.Field)
		values.Add("direction", p.Direction)
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeGetBoUsersResponse returns a decoder for responses returned by the bo
// getBoUsers endpoint. restoreBody controls whether the response body should
// be restored after having been read.
// DecodeGetBoUsersResponse may return the following errors:
//	- "unknown_error" (type *bo.UnknownError): http.StatusInternalServerError
//	- error: internal error
func DecodeGetBoUsersResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetBoUsersResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("bo", "getBoUsers", err)
			}
			err = ValidateGetBoUsersResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("bo", "getBoUsers", err)
			}
			res := NewGetBoUsersResultOK(&body)
			return res, nil
		case http.StatusInternalServerError:
			var (
				body GetBoUsersUnknownErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("bo", "getBoUsers", err)
			}
			err = ValidateGetBoUsersUnknownErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("bo", "getBoUsers", err)
			}
			return nil, NewGetBoUsersUnknownError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("bo", "getBoUsers", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteBoUserRequest instantiates a HTTP request object with method and
// path set to call the "bo" service "deleteBoUser" endpoint
func (c *Client) BuildDeleteBoUserRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*bo.DeleteBoUserPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("bo", "deleteBoUser", "*bo.DeleteBoUserPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteBoUserBoPath(id)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("bo", "deleteBoUser", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteBoUserRequest returns an encoder for requests sent to the bo
// deleteBoUser server.
func EncodeDeleteBoUserRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*bo.DeleteBoUserPayload)
		if !ok {
			return goahttp.ErrInvalidType("bo", "deleteBoUser", "*bo.DeleteBoUserPayload", v)
		}
		if p.Oauth != nil {
			head := *p.Oauth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.JWTToken != nil {
			head := *p.JWTToken
			req.Header.Set("jwtToken", head)
		}
		return nil
	}
}

// DecodeDeleteBoUserResponse returns a decoder for responses returned by the
// bo deleteBoUser endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeDeleteBoUserResponse may return the following errors:
//	- "unknown_error" (type *bo.UnknownError): http.StatusInternalServerError
//	- error: internal error
func DecodeDeleteBoUserResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body DeleteBoUserResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("bo", "deleteBoUser", err)
			}
			err = ValidateDeleteBoUserResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("bo", "deleteBoUser", err)
			}
			res := NewDeleteBoUserResultOK(&body)
			return res, nil
		case http.StatusInternalServerError:
			var (
				body DeleteBoUserUnknownErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("bo", "deleteBoUser", err)
			}
			err = ValidateDeleteBoUserUnknownErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("bo", "deleteBoUser", err)
			}
			return nil, NewDeleteBoUserUnknownError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("bo", "deleteBoUser", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteBoManyUsersRequest instantiates a HTTP request object with method
// and path set to call the "bo" service "deleteBoManyUsers" endpoint
func (c *Client) BuildDeleteBoManyUsersRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteBoManyUsersBoPath()}
	req, err := http.NewRequest("PATCH", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("bo", "deleteBoManyUsers", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteBoManyUsersRequest returns an encoder for requests sent to the
// bo deleteBoManyUsers server.
func EncodeDeleteBoManyUsersRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*bo.DeleteBoManyUsersPayload)
		if !ok {
			return goahttp.ErrInvalidType("bo", "deleteBoManyUsers", "*bo.DeleteBoManyUsersPayload", v)
		}
		if p.Oauth != nil {
			head := *p.Oauth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.JWTToken != nil {
			head := *p.JWTToken
			req.Header.Set("jwtToken", head)
		}
		body := NewDeleteBoManyUsersRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("bo", "deleteBoManyUsers", err)
		}
		return nil
	}
}

// DecodeDeleteBoManyUsersResponse returns a decoder for responses returned by
// the bo deleteBoManyUsers endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeDeleteBoManyUsersResponse may return the following errors:
//	- "unknown_error" (type *bo.UnknownError): http.StatusInternalServerError
//	- error: internal error
func DecodeDeleteBoManyUsersResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body DeleteBoManyUsersResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("bo", "deleteBoManyUsers", err)
			}
			err = ValidateDeleteBoManyUsersResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("bo", "deleteBoManyUsers", err)
			}
			res := NewDeleteBoManyUsersResultOK(&body)
			return res, nil
		case http.StatusInternalServerError:
			var (
				body DeleteBoManyUsersUnknownErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("bo", "deleteBoManyUsers", err)
			}
			err = ValidateDeleteBoManyUsersUnknownErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("bo", "deleteBoManyUsers", err)
			}
			return nil, NewDeleteBoManyUsersUnknownError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("bo", "deleteBoManyUsers", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateBoUserRequest instantiates a HTTP request object with method and
// path set to call the "bo" service "updateBoUser" endpoint
func (c *Client) BuildUpdateBoUserRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*bo.UpdateBoUserPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("bo", "updateBoUser", "*bo.UpdateBoUserPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateBoUserBoPath(id)}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("bo", "updateBoUser", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateBoUserRequest returns an encoder for requests sent to the bo
// updateBoUser server.
func EncodeUpdateBoUserRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*bo.UpdateBoUserPayload)
		if !ok {
			return goahttp.ErrInvalidType("bo", "updateBoUser", "*bo.UpdateBoUserPayload", v)
		}
		if p.Oauth != nil {
			head := *p.Oauth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.JWTToken != nil {
			head := *p.JWTToken
			req.Header.Set("jwtToken", head)
		}
		body := NewUpdateBoUserRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("bo", "updateBoUser", err)
		}
		return nil
	}
}

// DecodeUpdateBoUserResponse returns a decoder for responses returned by the
// bo updateBoUser endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeUpdateBoUserResponse may return the following errors:
//	- "unknown_error" (type *bo.UnknownError): http.StatusInternalServerError
//	- error: internal error
func DecodeUpdateBoUserResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpdateBoUserResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("bo", "updateBoUser", err)
			}
			err = ValidateUpdateBoUserResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("bo", "updateBoUser", err)
			}
			res := NewUpdateBoUserResultOK(&body)
			return res, nil
		case http.StatusInternalServerError:
			var (
				body UpdateBoUserUnknownErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("bo", "updateBoUser", err)
			}
			err = ValidateUpdateBoUserUnknownErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("bo", "updateBoUser", err)
			}
			return nil, NewUpdateBoUserUnknownError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("bo", "updateBoUser", resp.StatusCode, string(body))
		}
	}
}

// BuildGetBoUserRequest instantiates a HTTP request object with method and
// path set to call the "bo" service "getBoUser" endpoint
func (c *Client) BuildGetBoUserRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*bo.GetBoUserPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("bo", "getBoUser", "*bo.GetBoUserPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetBoUserBoPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("bo", "getBoUser", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetBoUserRequest returns an encoder for requests sent to the bo
// getBoUser server.
func EncodeGetBoUserRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*bo.GetBoUserPayload)
		if !ok {
			return goahttp.ErrInvalidType("bo", "getBoUser", "*bo.GetBoUserPayload", v)
		}
		if p.Oauth != nil {
			head := *p.Oauth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		if p.JWTToken != nil {
			head := *p.JWTToken
			req.Header.Set("jwtToken", head)
		}
		return nil
	}
}

// DecodeGetBoUserResponse returns a decoder for responses returned by the bo
// getBoUser endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeGetBoUserResponse may return the following errors:
//	- "unknown_error" (type *bo.UnknownError): http.StatusInternalServerError
//	- error: internal error
func DecodeGetBoUserResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetBoUserResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("bo", "getBoUser", err)
			}
			err = ValidateGetBoUserResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("bo", "getBoUser", err)
			}
			res := NewGetBoUserResultOK(&body)
			return res, nil
		case http.StatusInternalServerError:
			var (
				body GetBoUserUnknownErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("bo", "getBoUser", err)
			}
			err = ValidateGetBoUserUnknownErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("bo", "getBoUser", err)
			}
			return nil, NewGetBoUserUnknownError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("bo", "getBoUser", resp.StatusCode, string(body))
		}
	}
}

// unmarshalResUserResponseBodyToBoResUser builds a value of type *bo.ResUser
// from a value of type *ResUserResponseBody.
func unmarshalResUserResponseBodyToBoResUser(v *ResUserResponseBody) *bo.ResUser {
	res := &bo.ResUser{
		ID:        *v.ID,
		Firstname: *v.Firstname,
		Lastname:  *v.Lastname,
		Username:  *v.Username,
		Email:     *v.Email,
		Role:      *v.Role,
		Avatar:    *v.Avatar,
	}

	return res
}

// marshalBoPayloadUserToPayloadUserRequestBody builds a value of type
// *PayloadUserRequestBody from a value of type *bo.PayloadUser.
func marshalBoPayloadUserToPayloadUserRequestBody(v *bo.PayloadUser) *PayloadUserRequestBody {
	res := &PayloadUserRequestBody{
		Email:     v.Email,
		Username:  v.Username,
		Firstname: v.Firstname,
		Lastname:  v.Lastname,
		Avatar:    v.Avatar,
		Role:      v.Role,
	}

	return res
}

// marshalPayloadUserRequestBodyToBoPayloadUser builds a value of type
// *bo.PayloadUser from a value of type *PayloadUserRequestBody.
func marshalPayloadUserRequestBodyToBoPayloadUser(v *PayloadUserRequestBody) *bo.PayloadUser {
	res := &bo.PayloadUser{
		Email:     v.Email,
		Username:  v.Username,
		Firstname: v.Firstname,
		Lastname:  v.Lastname,
		Avatar:    v.Avatar,
		Role:      v.Role,
	}

	return res
}
