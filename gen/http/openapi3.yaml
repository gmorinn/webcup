openapi: 3.0.3
info:
  title: webcup
  description: Best API REST building with GoaDesign
  contact:
    name: Guillaume MORIN
    url: https://guillaume-morin.fr/
    email: guillaume.morin@epitech.eu
  license:
    name: GOA X GM
    url: https://guillaume-morin.fr/
  version: "1.0"
servers:
- url: http://:0
paths:
  /authorization:
    post:
      tags:
      - oAuth
      summary: oAuth oAuth
      description: oAuth
      operationId: oAuth#oAuth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OAuthRequestBody'
            example:
              client_id: Qui magnam rem labore et.
              client_secret: At optio odio.
              grant_type: Placeat nihil qui provident.
      responses:
        "201":
          description: Created response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthResponse'
              example:
                access_token: Quis saepe debitis natus suscipit facilis.
                expires_in: 390020134996762234
                success: true
                token_type: Non commodi sed quam quidem.
        "400":
          description: Bad Request response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthResponse'
              example:
                access_token: Voluptas consequatur ipsam ex voluptas.
                expires_in: 7621774887186459645
                success: false
                token_type: Sunt aut ipsum ea et.
        "401":
          description: 'unauthorized: Unauthorized response.'
          content:
            application/json:
              schema:
                type: string
                example: Ratione odit hic dolorem.
        "403":
          description: 'oauth_error: Forbidden response.'
          content:
            application/json:
              schema:
                type: string
                example: Animi quisquam quas minus consectetur voluptatibus.
        "500":
          description: 'unknown_error: Error not identified (500)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
  /bo/signin:
    post:
      tags:
      - jwtToken
      summary: signinBo jwtToken
      description: signin for back-office, user needs to be admin
      operationId: jwtToken#signinBo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SigninRequestBody'
            example:
              email: guillaume@epitech.eu
              password: JeSuisUnTest974
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sign'
              example:
                access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
                refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
                success: false
        "500":
          description: 'unknown_error: Error not identified (500)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
      security:
      - OAuth2_header_Authorization:
        - api:read
  /openapi.json:
    get:
      tags:
      - openapi
      summary: Download openapi3.json
      description: Postman generated by Goa
      operationId: openapi#/openapi.json
      responses:
        "200":
          description: File downloaded
      externalDocs:
        description: cd Public && live-server to see the Documentation of the API
        url: http://127.0.0.1:8080/
  /public/{*path}:
    get:
      tags:
      - fileapi
      summary: Download bin/public
      description: Serve static content.
      operationId: fileapi#/public/{*path}
      parameters:
      - name: path
        in: path
        description: Relative file path
        required: true
      responses:
        "200":
          description: File not found
        "404":
          description: File not found
  /resfresh:
    post:
      tags:
      - jwtToken
      summary: refresh jwtToken
      description: Refresh Token
      operationId: jwtToken#refresh
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshRequestBody'
            example:
              refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sign'
              example:
                access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
                refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
                success: false
        "500":
          description: 'unknown_error: Error not identified (500)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
      security:
      - OAuth2_header_Authorization:
        - api:read
  /signin:
    post:
      tags:
      - jwtToken
      summary: signin jwtToken
      description: signin
      operationId: jwtToken#signin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SigninRequestBody'
            example:
              email: guillaume@epitech.eu
              password: JeSuisUnTest974
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sign'
              example:
                access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
                refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
                success: true
        "500":
          description: 'unknown_error: Error not identified (500)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
      security:
      - OAuth2_header_Authorization:
        - api:read
  /signup:
    post:
      tags:
      - jwtToken
      summary: signup jwtToken
      description: signup to generate jwt token
      operationId: jwtToken#signup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequestBody'
            example:
              confirm_password: JeSuisUnTest974
              email: guillaume@epitech.eu
              password: JeSuisUnTest974
              username: guillaumemoriin
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sign'
              example:
                access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
                refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
                success: false
        "500":
          description: 'unknown_error: Error not identified (500)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
      security:
      - OAuth2_header_Authorization:
        - api:read
  /v1/bo/contacts/{id}:
    get:
      tags:
      - boContact
      summary: getBoContactByID boContact
      description: get one contact by ID
      operationId: boContact#getBoContactByID
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          format: uuid
        example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
      - name: jwtToken
        in: header
        description: Jwt token
        allowEmptyValue: true
        schema:
          type: string
          description: Jwt token
          example: "Bearer \U000708E7\U000BB83D\U00029014"
          pattern: ^Bearer [^ ]+$
        example: "Bearer \U000C518F\U00107C83\U0008CE64"
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBoContactByIDResponseBody'
              example:
                contact:
                  email: guillaume@gmail.com
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  message: Vous embauchez ?
                  user_id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                success: true
        "500":
          description: 'unknown_error: Error not identified (500)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
      security:
      - OAuth2_header_Authorization:
        - api:read
        jwt_header_jwtToken:
        - api:read
        - api:write
  /v1/bo/contacts/messages/{offset}/{limit}:
    get:
      tags:
      - boContact
      summary: getBoContact boContact
      description: Get All messages
      operationId: boContact#getBoContact
      parameters:
      - name: field
        in: query
        description: Items order by {field}
        allowEmptyValue: true
        schema:
          type: string
          description: Items order by {field}
          default: name
          example: name
        example: name
      - name: direction
        in: query
        description: Items order by {field} ASC/DESC
        allowEmptyValue: true
        schema:
          type: string
          description: Items order by {field} ASC/DESC
          default: asc
          example: asc
          enum:
          - asc
          - desc
        example: asc
      - name: offset
        in: path
        description: Offset for pagination
        required: true
        schema:
          type: integer
          description: Offset for pagination
          example: 0
          format: int32
        example: 0
      - name: limit
        in: path
        description: Limit of items listed for pagination
        required: true
        schema:
          type: integer
          description: Limit of items listed for pagination
          example: 9
          format: int32
        example: 9
      - name: jwtToken
        in: header
        description: Jwt token
        allowEmptyValue: true
        schema:
          type: string
          description: Jwt token
          example: "Bearer \U000DF0C7\U00050969\U0005BB0F\U00040D2F"
          pattern: ^Bearer [^ ]+$
        example: "Bearer \U00094B2E\U000AC949\U0004CDE6\U00028764\U000B7D56"
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBoContactResponseBody'
              example:
                contacts:
                - email: guillaume@gmail.com
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  message: Vous embauchez ?
                  user_id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                - email: guillaume@gmail.com
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  message: Vous embauchez ?
                  user_id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                - email: guillaume@gmail.com
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  message: Vous embauchez ?
                  user_id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                count: 7122203880607118907
                success: true
        "500":
          description: 'unknown_error: Error not identified (500)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
      security:
      - OAuth2_header_Authorization:
        - api:read
        jwt_header_jwtToken:
        - api:read
        - api:write
  /v1/bo/contacts/remove:
    patch:
      tags:
      - boContact
      summary: deleteBoManyContact boContact
      description: Delete many contact with IDs send in body
      operationId: boContact#deleteBoManyContact
      parameters:
      - name: jwtToken
        in: header
        description: Jwt token
        allowEmptyValue: true
        schema:
          type: string
          description: Jwt token
          example: "Bearer \U0002CFAC\U000E8A7A\U000D114D\U00100513\U0002BF78"
          pattern: ^Bearer [^ ]+$
        example: "Bearer \U0001EFE7\U00064D0B\U0006EC04\U0009B0FE\U000E3B6C"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteBoManyContactRequestBody'
            example:
              tab:
              - Adipisci harum ipsum.
              - In beatae fugiat unde eos possimus mollitia.
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResetPasswordResponseBody'
              example:
                success: false
        "500":
          description: 'unknown_error: Error not identified (500)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
      security:
      - OAuth2_header_Authorization:
        - api:read
        jwt_header_jwtToken:
        - api:read
        - api:write
  /v1/bo/contacts/remove/{id}:
    put:
      tags:
      - boContact
      summary: deleteBoContact boContact
      description: Delete one contact by ID
      operationId: boContact#deleteBoContact
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          format: uuid
        example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
      - name: jwtToken
        in: header
        description: Jwt token
        allowEmptyValue: true
        schema:
          type: string
          description: Jwt token
          example: "Bearer \U000EA3C4\U000CC528\U0002A1AB\U00073DFA\U000F48C0\U000911AF"
          pattern: ^Bearer [^ ]+$
        example: "Bearer \U0003705F\U0001D315\U0010C64D\U000D64C8\U00080588\U0006424B"
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResetPasswordResponseBody'
              example:
                success: false
        "500":
          description: 'unknown_error: Error not identified (500)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
      security:
      - OAuth2_header_Authorization:
        - api:read
        jwt_header_jwtToken:
        - api:read
        - api:write
  /v1/bo/datas/{offset}/{limit}:
    get:
      tags:
      - bo
      summary: getBoData bo
      description: Get All data
      operationId: bo#getBoData
      parameters:
      - name: field
        in: query
        description: Items order by {field}
        allowEmptyValue: true
        schema:
          type: string
          description: Items order by {field}
          default: name
          example: name
        example: name
      - name: direction
        in: query
        description: Items order by {field} ASC/DESC
        allowEmptyValue: true
        schema:
          type: string
          description: Items order by {field} ASC/DESC
          default: asc
          example: asc
          enum:
          - asc
          - desc
        example: asc
      - name: offset
        in: path
        description: Offset for pagination
        required: true
        schema:
          type: integer
          description: Offset for pagination
          example: 0
          format: int32
        example: 0
      - name: limit
        in: path
        description: Limit of items listed for pagination
        required: true
        schema:
          type: integer
          description: Limit of items listed for pagination
          example: 9
          format: int32
        example: 9
      - name: jwtToken
        in: header
        description: Jwt token
        allowEmptyValue: true
        schema:
          type: string
          description: Jwt token
          example: "Bearer \U0007FD8E\U0008989D"
          pattern: ^Bearer [^ ]+$
        example: "Bearer \U00049157\U0005B65E\U000D858F\U000CCFA5\U0005C212"
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDataMostRecentResponseBody'
              example:
                count: 3937526645573723134
                data:
                - category: space
                  description: Unique Air max restant au monde
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  image: Facere natus.
                  title: Air max360 d'il y a 10 millions d'années
                  user_id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                - category: space
                  description: Unique Air max restant au monde
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  image: Facere natus.
                  title: Air max360 d'il y a 10 millions d'années
                  user_id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                - category: space
                  description: Unique Air max restant au monde
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  image: Facere natus.
                  title: Air max360 d'il y a 10 millions d'années
                  user_id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                - category: space
                  description: Unique Air max restant au monde
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  image: Facere natus.
                  title: Air max360 d'il y a 10 millions d'années
                  user_id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                success: false
        "500":
          description: 'unknown_error: Error not identified (500)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
      security:
      - OAuth2_header_Authorization:
        - api:read
        jwt_header_jwtToken:
        - api:read
        - api:write
  /v1/bo/file/add:
    post:
      tags:
      - files
      summary: importFile files
      description: Import file
      operationId: files#importFile
      parameters:
      - name: jwtToken
        in: header
        description: Jwt token
        allowEmptyValue: true
        schema:
          type: string
          description: Jwt token
          example: "Bearer \U001033D2\U0005831D缒\U00025102"
          pattern: ^Bearer [^ ]+$
        example: "Bearer \U00054D0F\U000B981Dꇸ\U00056603"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ImportFileRequestBody'
            example:
              content:
              - 73
              - 116
              - 97
              - 113
              - 117
              - 101
              - 32
              - 116
              - 101
              - 109
              - 112
              - 111
              - 114
              - 101
              - 46
              filename: foo.jpg
              format: image/jpeg
              h: 8213129504107496369
              mime: Incidunt ipsam asperiores facilis.
              size: 7940255785138466612
              url: Enim et omnis deleniti exercitationem.
              w: 466048715731699887
      responses:
        "201":
          description: Created response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportFileResponseBody'
              example:
                file:
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  mime: Tenetur aut est voluptatibus fuga.
                  name: foo.png
                  size: 6477760254985632700
                  url: Alias sit iure ut.
                success: true
        "500":
          description: 'unknown_error: Error not identified (500)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
      security:
      - OAuth2_header_Authorization:
        - api:read
        jwt_header_jwtToken:
        - api:read
        - api:write
  /v1/bo/file/remove:
    patch:
      tags:
      - files
      summary: deleteFile files
      description: Delete one file by ID
      operationId: files#deleteFile
      parameters:
      - name: jwtToken
        in: header
        description: Jwt token
        allowEmptyValue: true
        schema:
          type: string
          description: Jwt token
          example: "Bearer \U000FE762\U000F7069鯬\U0009B65E\U0010D28B\U0010842D"
          pattern: ^Bearer [^ ]+$
        example: "Bearer \U00032DC4\U000599FA\U0001D1D3\U00057A5E\U000B1A96\U000E83A2"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteFileRequestBody'
            example:
              url: /public/uploads/2021/12/2ca51d10-b660-4b2c-b27f-f7a119642885.png
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResetPasswordResponseBody'
              example:
                success: false
        "500":
          description: 'unknown_error: Error not identified (500)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
      security:
      - OAuth2_header_Authorization:
        - api:read
        jwt_header_jwtToken:
        - api:read
        - api:write
  /v1/bo/user/{id}:
    get:
      tags:
      - bo
      summary: getBoUser bo
      description: Get one User
      operationId: bo#getBoUser
      parameters:
      - name: id
        in: path
        description: Unique ID of the User
        required: true
        schema:
          type: string
          description: Unique ID of the User
          example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          format: uuid
        example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
      - name: jwtToken
        in: header
        description: Jwt token
        allowEmptyValue: true
        schema:
          type: string
          description: Jwt token
          example: "Bearer \U00108E95\U000C0352\U0003C367\U000BEA18墦\U00065CEA"
          pattern: ^Bearer [^ ]+$
        example: "Bearer \U000F8E86"
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateBoUserResponseBody'
              example:
                success: false
                user:
                  avatar: /public/uploads/2022/02/eedf427a-559a-4faf-9e75-357fbb5d65fb.png
                  email: guillaume@gmail.com
                  firstname: Guillaume
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  lastname: Morin
                  role: Maiores et non dolor facilis et voluptatem.
                  username: guillaumemorin
        "500":
          description: 'unknown_error: Error not identified (500)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
      security:
      - OAuth2_header_Authorization:
        - api:read
        jwt_header_jwtToken:
        - api:read
        - api:write
    put:
      tags:
      - bo
      summary: updateBoUser bo
      description: Update one User
      operationId: bo#updateBoUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          format: uuid
        example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
      - name: jwtToken
        in: header
        description: Jwt token
        allowEmptyValue: true
        schema:
          type: string
          description: Jwt token
          example: "Bearer \U000F0BD5\U0006D41C\U000E9FF3\U0002ADB8\U000CFE01\U000F2C57"
          pattern: ^Bearer [^ ]+$
        example: "Bearer \U00044C2D"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBoUserRequestBody'
            example:
              user:
                avatar: Laborum ea cum ad ipsam facere.
                email: guillaume@gmail.com
                firstname: Guillaume
                lastname: Morin
                role: admin
                username: guillaumemoriin
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateBoUserResponseBody'
              example:
                success: true
                user:
                  avatar: /public/uploads/2022/02/eedf427a-559a-4faf-9e75-357fbb5d65fb.png
                  email: guillaume@gmail.com
                  firstname: Guillaume
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  lastname: Morin
                  role: Maiores et non dolor facilis et voluptatem.
                  username: guillaumemorin
        "500":
          description: 'unknown_error: Error not identified (500)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
      security:
      - OAuth2_header_Authorization:
        - api:read
        jwt_header_jwtToken:
        - api:read
        - api:write
  /v1/bo/user/remove/{id}:
    delete:
      tags:
      - bo
      summary: deleteBoUser bo
      description: Delete one User by ID
      operationId: bo#deleteBoUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          format: uuid
        example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
      - name: jwtToken
        in: header
        description: Jwt token
        allowEmptyValue: true
        schema:
          type: string
          description: Jwt token
          example: "Bearer \U0007B8F3\U00052C8F\U00017C88\U00059813"
          pattern: ^Bearer [^ ]+$
        example: "Bearer \U000C36CA\U00097315"
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResetPasswordResponseBody'
              example:
                success: false
        "500":
          description: 'unknown_error: Error not identified (500)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
      security:
      - OAuth2_header_Authorization:
        - api:read
        jwt_header_jwtToken:
        - api:read
        - api:write
  /v1/bo/users/{offset}/{limit}:
    get:
      tags:
      - bo
      summary: getBoUsers bo
      description: Get All users
      operationId: bo#getBoUsers
      parameters:
      - name: field
        in: query
        description: Items order by {field}
        allowEmptyValue: true
        schema:
          type: string
          description: Items order by {field}
          default: name
          example: name
        example: name
      - name: direction
        in: query
        description: Items order by {field} ASC/DESC
        allowEmptyValue: true
        schema:
          type: string
          description: Items order by {field} ASC/DESC
          default: asc
          example: asc
          enum:
          - asc
          - desc
        example: asc
      - name: offset
        in: path
        description: Offset for pagination
        required: true
        schema:
          type: integer
          description: Offset for pagination
          example: 0
          format: int32
        example: 0
      - name: limit
        in: path
        description: Limit of items listed for pagination
        required: true
        schema:
          type: integer
          description: Limit of items listed for pagination
          example: 9
          format: int32
        example: 9
      - name: jwtToken
        in: header
        description: Jwt token
        allowEmptyValue: true
        schema:
          type: string
          description: Jwt token
          example: "Bearer \U00099594\U0008572E\U000A3DF9\U00023A7F\U000402B0\U0003B577"
          pattern: ^Bearer [^ ]+$
        example: "Bearer \U00053D84\U00053F11"
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBoUsersResponseBody'
              example:
                count: 6354963821237493231
                success: true
                users:
                - avatar: /public/uploads/2022/02/eedf427a-559a-4faf-9e75-357fbb5d65fb.png
                  email: guillaume@gmail.com
                  firstname: Guillaume
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  lastname: Morin
                  role: Maiores et non dolor facilis et voluptatem.
                  username: guillaumemorin
                - avatar: /public/uploads/2022/02/eedf427a-559a-4faf-9e75-357fbb5d65fb.png
                  email: guillaume@gmail.com
                  firstname: Guillaume
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  lastname: Morin
                  role: Maiores et non dolor facilis et voluptatem.
                  username: guillaumemorin
        "500":
          description: 'unknown_error: Error not identified (500)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
      security:
      - OAuth2_header_Authorization:
        - api:read
        jwt_header_jwtToken:
        - api:read
        - api:write
  /v1/bo/users/remove:
    patch:
      tags:
      - bo
      summary: deleteBoManyUsers bo
      description: Delete many users with IDs send in body
      operationId: bo#deleteBoManyUsers
      parameters:
      - name: jwtToken
        in: header
        description: Jwt token
        allowEmptyValue: true
        schema:
          type: string
          description: Jwt token
          example: "Bearer \U000B19D2\U00077C41\U00072646\U00022043"
          pattern: ^Bearer [^ ]+$
        example: "Bearer \U0010AC6B\U000E89C6\U000660DB桒\U000C1039"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteBoManyContactRequestBody'
            example:
              tab:
              - Et et quidem quae quos est.
              - Sapiente consequuntur aut est alias eaque cupiditate.
              - Architecto vel soluta necessitatibus animi quaerat architecto.
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResetPasswordResponseBody'
              example:
                success: false
        "500":
          description: 'unknown_error: Error not identified (500)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
      security:
      - OAuth2_header_Authorization:
        - api:read
        jwt_header_jwtToken:
        - api:read
        - api:write
  /v1/email-exist:
    post:
      tags:
      - auth
      summary: email-exist auth
      description: Check if email exist in database
      operationId: auth#email-exist
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailExistRequestBody'
            example:
              email: guillaume@gmail.com
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailExistResponseBody'
              example:
                exist: true
                success: true
        "500":
          description: 'unknown_error: Error not identified (500)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
      security:
      - OAuth2_header_Authorization:
        - api:read
  /v1/lost:
    post:
      tags:
      - auth
      summary: send-confirmation auth
      description: Check if email exist in database and send code by email to reset
        password
      operationId: auth#send-confirmation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailExistRequestBody'
            example:
              email: guillaume@gmail.com
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailExistResponseBody'
              example:
                exist: false
                success: true
        "500":
          description: 'unknown_error: Error not identified (500)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
      security:
      - OAuth2_header_Authorization:
        - api:read
  /v1/reset-password:
    put:
      tags:
      - auth
      summary: reset-password auth
      description: Reset forget password of the user with the correct confirm code
      operationId: auth#reset-password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequestBody'
            example:
              code: ZGI5E
              confirm_password: JeSuisUnTest974
              email: guillaume@gmail.com
              password: JeSuisUnTest974
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResetPasswordResponseBody'
              example:
                success: true
        "500":
          description: 'unknown_error: Error not identified (500)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
      security:
      - OAuth2_header_Authorization:
        - api:read
  /v1/web/contacts/add:
    post:
      tags:
      - contacts
      summary: addMessage contacts
      description: user ask for something
      operationId: contacts#addMessage
      parameters:
      - name: jwtToken
        in: header
        description: Jwt token
        allowEmptyValue: true
        schema:
          type: string
          description: Jwt token
          example: "Bearer \U0010D749\U000DDB74웠\U0010545D"
          pattern: ^Bearer [^ ]+$
        example: "Bearer \U000F46B1\U00098CAB\U0002A625\U00040A1F"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddMessageRequestBody'
            example:
              msg: Je reprends l'app pour un million
              user_id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
      responses:
        "201":
          description: Created response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResetPasswordResponseBody'
              example:
                success: false
        "500":
          description: 'unknown_error: Error not identified (500)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
      security:
      - OAuth2_header_Authorization:
        - api:read
        jwt_header_jwtToken:
        - api:read
        - api:write
  /v1/web/public/user/{username}:
    get:
      tags:
      - publicUsers
      summary: getUserByUsername publicUsers
      description: Get one User by username
      operationId: publicUsers#getUserByUsername
      parameters:
      - name: username
        in: path
        required: true
        schema:
          type: string
          example: guillaumemoriin
          pattern: ^[a-z0-9_\-]+$
          minLength: 3
          maxLength: 20
        example: guillaumemoriin
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateBoUserResponseBody'
              example:
                success: true
                user:
                  avatar: /public/uploads/2022/02/eedf427a-559a-4faf-9e75-357fbb5d65fb.png
                  email: guillaume@gmail.com
                  firstname: Guillaume
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  lastname: Morin
                  role: Maiores et non dolor facilis et voluptatem.
                  username: guillaumemorin
        "403":
          description: 'oauth_error: Forbidden response.'
          content:
            application/json:
              schema:
                type: string
                example: Accusamus fugiat exercitationem iusto ex commodi.
        "500":
          description: 'unknown_error: Error not identified (500)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
      security:
      - OAuth2_header_Authorization:
        - api:read
  /v1/web/public/user/recents/{offset}/{limit}:
    get:
      tags:
      - publicUsers
      summary: listUsersMostRecent publicUsers
      description: List users the most recent
      operationId: publicUsers#listUsersMostRecent
      parameters:
      - name: offset
        in: path
        description: Offset for pagination
        required: true
        schema:
          type: integer
          description: Offset for pagination
          example: 0
          minimum: 0
        example: 0
      - name: limit
        in: path
        description: Limit of items listed for pagination
        required: true
        schema:
          type: integer
          description: Limit of items listed for pagination
          example: 5
          minimum: 0
        example: 5
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBoUsersResponseBody'
              example:
                count: 5983299183887173977
                success: true
                users:
                - avatar: /public/uploads/2022/02/eedf427a-559a-4faf-9e75-357fbb5d65fb.png
                  email: guillaume@gmail.com
                  firstname: Guillaume
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  lastname: Morin
                  role: Maiores et non dolor facilis et voluptatem.
                  username: guillaumemorin
                - avatar: /public/uploads/2022/02/eedf427a-559a-4faf-9e75-357fbb5d65fb.png
                  email: guillaume@gmail.com
                  firstname: Guillaume
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  lastname: Morin
                  role: Maiores et non dolor facilis et voluptatem.
                  username: guillaumemorin
        "403":
          description: 'oauth_error: Forbidden response.'
          content:
            application/json:
              schema:
                type: string
                example: Iusto beatae.
        "500":
          description: 'unknown_error: Error not identified (500)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
      security:
      - OAuth2_header_Authorization:
        - api:read
  /v1/web/public/user/search:
    patch:
      tags:
      - publicUsers
      summary: listUsers publicUsers
      description: List users for search bar
      operationId: publicUsers#listUsers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListDataRequestBody'
            example:
              key: guillaumemoriin
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUsersResponseBody'
              example:
                success: false
                users:
                - avatar: /public/uploads/2022/02/eedf427a-559a-4faf-9e75-357fbb5d65fb.png
                  email: guillaume@gmail.com
                  firstname: Guillaume
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  lastname: Morin
                  role: Maiores et non dolor facilis et voluptatem.
                  username: guillaumemorin
                - avatar: /public/uploads/2022/02/eedf427a-559a-4faf-9e75-357fbb5d65fb.png
                  email: guillaume@gmail.com
                  firstname: Guillaume
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  lastname: Morin
                  role: Maiores et non dolor facilis et voluptatem.
                  username: guillaumemorin
        "403":
          description: 'oauth_error: Forbidden response.'
          content:
            application/json:
              schema:
                type: string
                example: Fuga tempora quidem.
        "500":
          description: 'unknown_error: Error not identified (500)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
      security:
      - OAuth2_header_Authorization:
        - api:read
  /v1/web/user/{id}:
    get:
      tags:
      - users
      summary: getUserByID users
      description: Get one User
      operationId: users#getUserByID
      parameters:
      - name: id
        in: path
        description: Unique ID of the User
        required: true
        schema:
          type: string
          description: Unique ID of the User
          example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          format: uuid
        example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
      - name: jwtToken
        in: header
        description: Jwt token
        allowEmptyValue: true
        schema:
          type: string
          description: Jwt token
          example: "Bearer \U0003A808\U0010250E\U000B0E58\U00051A29\U0009D7F6\U000565DC"
          pattern: ^Bearer [^ ]+$
        example: "Bearer \U00105C3F\U00021D3F\U000FECFB\U000DE5FA"
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateBoUserResponseBody'
              example:
                success: true
                user:
                  avatar: /public/uploads/2022/02/eedf427a-559a-4faf-9e75-357fbb5d65fb.png
                  email: guillaume@gmail.com
                  firstname: Guillaume
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  lastname: Morin
                  role: Maiores et non dolor facilis et voluptatem.
                  username: guillaumemorin
        "500":
          description: 'unknown_error: Error not identified (500)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
      security:
      - OAuth2_header_Authorization:
        - api:read
        jwt_header_jwtToken:
        - api:read
        - api:write
  /v1/web/user/edit:
    put:
      tags:
      - users
      summary: updateDescription users
      description: Update main info like email, username, firstname, lastname
      operationId: users#updateDescription
      parameters:
      - name: jwtToken
        in: header
        description: Jwt token
        allowEmptyValue: true
        schema:
          type: string
          description: Jwt token
          example: "Bearer \U0006982F"
          pattern: ^Bearer [^ ]+$
        example: "Bearer \U000AF9E5"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDescriptionRequestBody'
            example:
              email: guillaume@gmail.com
              firstname: Guillaume
              id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
              lastname: Morin
              username: guillaumemoriin
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateAvatarResponseBody'
              example:
                success: false
                user:
                  avatar: /public/uploads/2022/02/eedf427a-559a-4faf-9e75-357fbb5d65fb.png
                  email: guillaume@gmail.com
                  firstname: Guillaume
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  lastname: Morin
                  role: Maiores et non dolor facilis et voluptatem.
                  username: guillaumemorin
        "500":
          description: 'unknown_error: Error not identified (500)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
      security:
      - OAuth2_header_Authorization:
        - api:read
        jwt_header_jwtToken:
        - api:read
        - api:write
  /v1/web/user/edit/avatar:
    put:
      tags:
      - users
      summary: updateAvatar users
      description: Update avatar
      operationId: users#updateAvatar
      parameters:
      - name: jwtToken
        in: header
        description: Jwt token
        allowEmptyValue: true
        schema:
          type: string
          description: Jwt token
          example: "Bearer \U000ADA18"
          pattern: ^Bearer [^ ]+$
        example: "Bearer \U000491C5\U0007B29B\U000EB6F9\U000BAC5A\U000D83AF"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAvatarRequestBody'
            example:
              avatar: Cumque quia optio rerum.
              id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateAvatarResponseBody'
              example:
                success: false
                user:
                  avatar: /public/uploads/2022/02/eedf427a-559a-4faf-9e75-357fbb5d65fb.png
                  email: guillaume@gmail.com
                  firstname: Guillaume
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  lastname: Morin
                  role: Maiores et non dolor facilis et voluptatem.
                  username: guillaumemorin
        "500":
          description: 'unknown_error: Error not identified (500)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
      security:
      - OAuth2_header_Authorization:
        - api:read
        jwt_header_jwtToken:
        - api:read
        - api:write
  /v1/web/user/edit/stock:
    put:
      tags:
      - users
      summary: updateNumberStockage users
      description: Update number stockage
      operationId: users#updateNumberStockage
      parameters:
      - name: jwtToken
        in: header
        description: Jwt token
        allowEmptyValue: true
        schema:
          type: string
          description: Jwt token
          example: "Bearer \U0005D0FD\U0006A3FF㾂\U000843AA"
          pattern: ^Bearer [^ ]+$
        example: Bearer 浢
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateNumberStockageRequestBody'
            example:
              id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
              number: 2285170554064599612
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResetPasswordResponseBody'
              example:
                success: true
        "500":
          description: 'unknown_error: Error not identified (500)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
      security:
      - OAuth2_header_Authorization:
        - api:read
        jwt_header_jwtToken:
        - api:read
        - api:write
  /v1/web/user/remove/{id}:
    delete:
      tags:
      - users
      summary: deleteUser users
      description: Delete one User by ID
      operationId: users#deleteUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          format: uuid
        example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
      - name: jwtToken
        in: header
        description: Jwt token
        allowEmptyValue: true
        schema:
          type: string
          description: Jwt token
          example: "Bearer \U0007C9BA\U00070BFA\U00068603\U000FB027\U0008276C"
          pattern: ^Bearer [^ ]+$
        example: "Bearer \U0005C022\U000758BA\U000415EF"
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResetPasswordResponseBody'
              example:
                success: false
        "500":
          description: 'unknown_error: Error not identified (500)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
      security:
      - OAuth2_header_Authorization:
        - api:read
        jwt_header_jwtToken:
        - api:read
        - api:write
  /web/data/{id}:
    get:
      tags:
      - data
      summary: getDataByID data
      description: Get one data by id
      operationId: data#getDataByID
      parameters:
      - name: id
        in: path
        description: Unique ID of the data
        required: true
        schema:
          type: string
          description: Unique ID of the data
          example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          format: uuid
        example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
      - name: jwtToken
        in: header
        description: Jwt token
        allowEmptyValue: true
        schema:
          type: string
          description: Jwt token
          example: "Bearer \U000E6DCE"
          pattern: ^Bearer [^ ]+$
        example: "Bearer \U000B9D08\U000DDE24"
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateDataResponseBody'
              example:
                data:
                  category: space
                  description: Unique Air max restant au monde
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  image: Facere natus.
                  title: Air max360 d'il y a 10 millions d'années
                  user_id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                success: false
        "500":
          description: 'unknown_error: Error not identified (500)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
      security:
      - OAuth2_header_Authorization:
        - api:read
        jwt_header_jwtToken:
        - api:read
        - api:write
    put:
      tags:
      - data
      summary: updateData data
      description: Update one data
      operationId: data#updateData
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          format: uuid
        example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
      - name: jwtToken
        in: header
        description: Jwt token
        allowEmptyValue: true
        schema:
          type: string
          description: Jwt token
          example: "Bearer \U0008E261\U000B01FC\U00026B1C\U00091858\U0001980E"
          pattern: ^Bearer [^ ]+$
        example: "Bearer \U000E4423"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDataRequestBody'
            example:
              data:
                category: autre
                description: Unique Air max restant au monde
                image: Minus rerum ea sed non nobis.
                title: Air max360 d'il y a 10 millions d'années
                user_id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateDataResponseBody'
              example:
                data:
                  category: space
                  description: Unique Air max restant au monde
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  image: Facere natus.
                  title: Air max360 d'il y a 10 millions d'années
                  user_id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                success: true
        "500":
          description: 'unknown_error: Error not identified (500)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
      security:
      - OAuth2_header_Authorization:
        - api:read
        jwt_header_jwtToken:
        - api:read
        - api:write
  /web/data/add:
    post:
      tags:
      - data
      summary: createData data
      description: Create one data
      operationId: data#createData
      parameters:
      - name: jwtToken
        in: header
        description: Jwt token
        allowEmptyValue: true
        schema:
          type: string
          description: Jwt token
          example: "Bearer \U000C1595\U000E383B\U00017267"
          pattern: ^Bearer [^ ]+$
        example: "Bearer \U00103049\U0003E8E7눻\U000E37F0\U0006CF89\U00044382"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDataRequestBody'
            example:
              data:
                category: autre
                description: Unique Air max restant au monde
                image: Minus rerum ea sed non nobis.
                title: Air max360 d'il y a 10 millions d'années
                user_id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
      responses:
        "201":
          description: Created response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateDataResponseBody'
              example:
                data:
                  category: space
                  description: Unique Air max restant au monde
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  image: Facere natus.
                  title: Air max360 d'il y a 10 millions d'années
                  user_id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                success: false
        "500":
          description: 'unknown_error: Error not identified (500)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
      security:
      - OAuth2_header_Authorization:
        - api:read
        jwt_header_jwtToken:
        - api:read
        - api:write
  /web/data/recents/{offset}/{limit}:
    get:
      tags:
      - data
      summary: listDataMostRecent data
      description: List data the most recent
      operationId: data#listDataMostRecent
      parameters:
      - name: offset
        in: path
        description: Offset for pagination
        required: true
        schema:
          type: integer
          description: Offset for pagination
          example: 0
          minimum: 0
        example: 0
      - name: limit
        in: path
        description: Limit of items listed for pagination
        required: true
        schema:
          type: integer
          description: Limit of items listed for pagination
          example: 5
          minimum: 0
        example: 5
      - name: jwtToken
        in: header
        description: Jwt token
        allowEmptyValue: true
        schema:
          type: string
          description: Jwt token
          example: "Bearer \U0010846B\U000BC184\U000ACF17"
          pattern: ^Bearer [^ ]+$
        example: "Bearer \U0001DAC9\U0002B68D\U00058EF7\U0004EB2F\U00065C70\U00021439"
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDataMostRecentResponseBody'
              example:
                count: 1970069621566387455
                data:
                - category: space
                  description: Unique Air max restant au monde
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  image: Facere natus.
                  title: Air max360 d'il y a 10 millions d'années
                  user_id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                - category: space
                  description: Unique Air max restant au monde
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  image: Facere natus.
                  title: Air max360 d'il y a 10 millions d'années
                  user_id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                success: true
        "500":
          description: 'unknown_error: Error not identified (500)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
      security:
      - OAuth2_header_Authorization:
        - api:read
        jwt_header_jwtToken:
        - api:read
        - api:write
  /web/data/search:
    patch:
      tags:
      - data
      summary: listData data
      description: List data for search bar
      operationId: data#listData
      parameters:
      - name: jwtToken
        in: header
        description: Jwt token
        allowEmptyValue: true
        schema:
          type: string
          description: Jwt token
          example: "Bearer \U000A4AAA\U00094DB1\U0009DE6D\U0006E1D8"
          pattern: ^Bearer [^ ]+$
        example: "Bearer \U00073A8F\U0004093F\U0005301D뭘"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListDataRequestBody'
            example:
              key: Mars
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDataResponseBody'
              example:
                data:
                - category: space
                  description: Unique Air max restant au monde
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  image: Facere natus.
                  title: Air max360 d'il y a 10 millions d'années
                  user_id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                - category: space
                  description: Unique Air max restant au monde
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  image: Facere natus.
                  title: Air max360 d'il y a 10 millions d'années
                  user_id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                success: false
        "500":
          description: 'unknown_error: Error not identified (500)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
      security:
      - OAuth2_header_Authorization:
        - api:read
        jwt_header_jwtToken:
        - api:read
        - api:write
  /web/data/user/{user_id}/{offset}/{limit}:
    get:
      tags:
      - data
      summary: getDataByUserID data
      description: Get one data user id
      operationId: data#getDataByUserID
      parameters:
      - name: user_id
        in: path
        description: Unique ID of the user
        required: true
        schema:
          type: string
          description: Unique ID of the user
          example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          format: uuid
        example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
      - name: offset
        in: path
        description: Offset for pagination
        required: true
        schema:
          type: integer
          description: Offset for pagination
          example: 0
          minimum: 0
        example: 0
      - name: limit
        in: path
        description: Limit of items listed for pagination
        required: true
        schema:
          type: integer
          description: Limit of items listed for pagination
          example: 5
          minimum: 0
        example: 5
      - name: jwtToken
        in: header
        description: Jwt token
        allowEmptyValue: true
        schema:
          type: string
          description: Jwt token
          example: "Bearer �\U00088786\U00080C65\U0010DA1D"
          pattern: ^Bearer [^ ]+$
        example: "Bearer \U00024B30\U00021C16\U0003F7DE\U00077D87\U00105B0D\U000F0D46"
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDataMostRecentResponseBody'
              example:
                count: 312839799197293562
                data:
                - category: space
                  description: Unique Air max restant au monde
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  image: Facere natus.
                  title: Air max360 d'il y a 10 millions d'années
                  user_id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                - category: space
                  description: Unique Air max restant au monde
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  image: Facere natus.
                  title: Air max360 d'il y a 10 millions d'années
                  user_id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                - category: space
                  description: Unique Air max restant au monde
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  image: Facere natus.
                  title: Air max360 d'il y a 10 millions d'années
                  user_id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                - category: space
                  description: Unique Air max restant au monde
                  id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                  image: Facere natus.
                  title: Air max360 d'il y a 10 millions d'années
                  user_id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
                success: false
        "500":
          description: 'unknown_error: Error not identified (500)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownError'
      security:
      - OAuth2_header_Authorization:
        - api:read
        jwt_header_jwtToken:
        - api:read
        - api:write
components:
  schemas:
    AddMessageRequestBody:
      type: object
      properties:
        msg:
          type: string
          example: Je reprends l'app pour un million
          minLength: 2
          maxLength: 500
        user_id:
          type: string
          example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          format: uuid
      example:
        msg: Je reprends l'app pour un million
        user_id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
      required:
      - user_id
      - msg
    CreateDataRequestBody:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/PayloadData'
      example:
        data:
          category: autre
          description: Unique Air max restant au monde
          image: Minus rerum ea sed non nobis.
          title: Air max360 d'il y a 10 millions d'années
          user_id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
      required:
      - data
    CreateDataResponseBody:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/ResData'
        success:
          type: boolean
          example: false
      example:
        data:
          category: space
          description: Unique Air max restant au monde
          id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          image: Facere natus.
          title: Air max360 d'il y a 10 millions d'années
          user_id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
        success: false
      required:
      - data
      - success
    DeleteBoManyContactRequestBody:
      type: object
      properties:
        tab:
          type: array
          items:
            type: string
            example: Aut nihil velit et repellat optio hic.
          example:
          - Mollitia praesentium accusamus qui aut maxime consectetur.
          - Pariatur harum quia aliquam qui blanditiis esse.
      example:
        tab:
        - Eius sed voluptatum nisi sit eos accusantium.
        - Voluptatum nisi ad vitae alias ea architecto.
        - Soluta veniam nulla molestias ipsa.
      required:
      - tab
    DeleteFileRequestBody:
      type: object
      properties:
        url:
          type: string
          example: /public/uploads/2021/12/2ca51d10-b660-4b2c-b27f-f7a119642885.png
      example:
        url: /public/uploads/2021/12/2ca51d10-b660-4b2c-b27f-f7a119642885.png
      required:
      - url
    EmailExistRequestBody:
      type: object
      properties:
        email:
          type: string
          example: guillaume@gmail.com
          format: email
      example:
        email: guillaume@gmail.com
      required:
      - email
    EmailExistResponseBody:
      type: object
      properties:
        exist:
          type: boolean
          example: true
        success:
          type: boolean
          example: true
      example:
        exist: false
        success: true
      required:
      - exist
      - success
    GetBoContactByIDResponseBody:
      type: object
      properties:
        contact:
          $ref: '#/components/schemas/ResContact'
        success:
          type: boolean
          example: false
      example:
        contact:
          email: guillaume@gmail.com
          id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          message: Vous embauchez ?
          user_id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
        success: true
      required:
      - success
    GetBoContactResponseBody:
      type: object
      properties:
        contacts:
          type: array
          items:
            $ref: '#/components/schemas/ResContact'
          description: All messages
          example:
          - email: guillaume@gmail.com
            id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
            message: Vous embauchez ?
            user_id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          - email: guillaume@gmail.com
            id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
            message: Vous embauchez ?
            user_id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          - email: guillaume@gmail.com
            id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
            message: Vous embauchez ?
            user_id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
        count:
          type: integer
          description: total of messages
          example: 5884970500282370533
          format: int64
        success:
          type: boolean
          example: false
      example:
        contacts:
        - email: guillaume@gmail.com
          id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          message: Vous embauchez ?
          user_id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
        - email: guillaume@gmail.com
          id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          message: Vous embauchez ?
          user_id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
        count: 723723875477646817
        success: false
      required:
      - contacts
      - success
      - count
    GetBoUsersResponseBody:
      type: object
      properties:
        count:
          type: integer
          description: total of users
          example: 6845117260586266030
          format: int64
        success:
          type: boolean
          example: false
        users:
          type: array
          items:
            $ref: '#/components/schemas/ResUser'
          description: All users
          example:
          - avatar: /public/uploads/2022/02/eedf427a-559a-4faf-9e75-357fbb5d65fb.png
            email: guillaume@gmail.com
            firstname: Guillaume
            id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
            lastname: Morin
            role: Maiores et non dolor facilis et voluptatem.
            username: guillaumemorin
          - avatar: /public/uploads/2022/02/eedf427a-559a-4faf-9e75-357fbb5d65fb.png
            email: guillaume@gmail.com
            firstname: Guillaume
            id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
            lastname: Morin
            role: Maiores et non dolor facilis et voluptatem.
            username: guillaumemorin
      example:
        count: 3810859879622229518
        success: true
        users:
        - avatar: /public/uploads/2022/02/eedf427a-559a-4faf-9e75-357fbb5d65fb.png
          email: guillaume@gmail.com
          firstname: Guillaume
          id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          lastname: Morin
          role: Maiores et non dolor facilis et voluptatem.
          username: guillaumemorin
        - avatar: /public/uploads/2022/02/eedf427a-559a-4faf-9e75-357fbb5d65fb.png
          email: guillaume@gmail.com
          firstname: Guillaume
          id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          lastname: Morin
          role: Maiores et non dolor facilis et voluptatem.
          username: guillaumemorin
        - avatar: /public/uploads/2022/02/eedf427a-559a-4faf-9e75-357fbb5d65fb.png
          email: guillaume@gmail.com
          firstname: Guillaume
          id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          lastname: Morin
          role: Maiores et non dolor facilis et voluptatem.
          username: guillaumemorin
        - avatar: /public/uploads/2022/02/eedf427a-559a-4faf-9e75-357fbb5d65fb.png
          email: guillaume@gmail.com
          firstname: Guillaume
          id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          lastname: Morin
          role: Maiores et non dolor facilis et voluptatem.
          username: guillaumemorin
      required:
      - users
      - success
      - count
    ImportFileRequestBody:
      type: object
      properties:
        content:
          type: string
          description: content of image
          example:
          - 78
          - 111
          - 110
          - 32
          - 97
          - 112
          - 101
          - 114
          - 105
          - 97
          - 109
          - 32
          - 97
          - 100
          - 105
          - 112
          - 105
          - 115
          - 99
          - 105
          - 46
          format: binary
        filename:
          type: string
          description: uploaded file name
          example: foo.jpg
        format:
          type: string
          description: uploaded file format
          example: image/jpeg
        h:
          type: integer
          description: height of image if you crop
          example: 779309785250283982
          format: int64
        mime:
          type: string
          description: url file
          example: Id qui vitae quis nihil maxime dolorem.
        size:
          type: integer
          description: size of image
          example: 2650996123944027409
          format: int64
        url:
          type: string
          description: url file
          example: Consequatur ratione praesentium repellat sit sit quia.
        w:
          type: integer
          description: width of image if you crop
          example: 9133522365644655952
          format: int64
      example:
        content:
        - 69
        - 116
        - 32
        - 113
        - 117
        - 105
        - 115
        - 32
        - 115
        - 117
        - 110
        - 116
        - 32
        - 101
        - 117
        - 109
        - 46
        filename: foo.jpg
        format: image/jpeg
        h: 4581769862265689623
        mime: Odit ratione hic.
        size: 1595949279084269978
        url: Dolor dignissimos corrupti.
        w: 4839082704448106939
      required:
      - filename
      - content
      - format
    ImportFileResponseBody:
      type: object
      properties:
        file:
          $ref: '#/components/schemas/ResFile'
        success:
          type: boolean
          example: false
      example:
        file:
          id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          mime: Tenetur aut est voluptatibus fuga.
          name: foo.png
          size: 6477760254985632700
          url: Alias sit iure ut.
        success: true
      required:
      - success
      - file
    ListDataMostRecentResponseBody:
      type: object
      properties:
        count:
          type: integer
          description: total of datas
          example: 1925422419388765693
          format: int64
        data:
          type: array
          items:
            $ref: '#/components/schemas/ResData'
          description: Result is an an array of data
          example:
          - category: space
            description: Unique Air max restant au monde
            id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
            image: Facere natus.
            title: Air max360 d'il y a 10 millions d'années
            user_id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          - category: space
            description: Unique Air max restant au monde
            id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
            image: Facere natus.
            title: Air max360 d'il y a 10 millions d'années
            user_id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          - category: space
            description: Unique Air max restant au monde
            id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
            image: Facere natus.
            title: Air max360 d'il y a 10 millions d'années
            user_id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
        success:
          type: boolean
          example: true
      example:
        count: 4781939491337536228
        data:
        - category: space
          description: Unique Air max restant au monde
          id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          image: Facere natus.
          title: Air max360 d'il y a 10 millions d'années
          user_id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
        - category: space
          description: Unique Air max restant au monde
          id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          image: Facere natus.
          title: Air max360 d'il y a 10 millions d'années
          user_id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
        - category: space
          description: Unique Air max restant au monde
          id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          image: Facere natus.
          title: Air max360 d'il y a 10 millions d'années
          user_id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
        success: true
      required:
      - data
      - success
      - count
    ListDataRequestBody:
      type: object
      properties:
        key:
          type: string
          example: Mars
      example:
        key: Mars
      required:
      - key
    ListDataResponseBody:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ResData'
          description: Result is an an array of user
          example:
          - category: space
            description: Unique Air max restant au monde
            id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
            image: Facere natus.
            title: Air max360 d'il y a 10 millions d'années
            user_id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          - category: space
            description: Unique Air max restant au monde
            id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
            image: Facere natus.
            title: Air max360 d'il y a 10 millions d'années
            user_id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          - category: space
            description: Unique Air max restant au monde
            id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
            image: Facere natus.
            title: Air max360 d'il y a 10 millions d'années
            user_id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
        success:
          type: boolean
          example: false
      example:
        data:
        - category: space
          description: Unique Air max restant au monde
          id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          image: Facere natus.
          title: Air max360 d'il y a 10 millions d'années
          user_id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
        - category: space
          description: Unique Air max restant au monde
          id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          image: Facere natus.
          title: Air max360 d'il y a 10 millions d'années
          user_id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
        - category: space
          description: Unique Air max restant au monde
          id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          image: Facere natus.
          title: Air max360 d'il y a 10 millions d'années
          user_id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
        success: true
      required:
      - data
      - success
    ListUsersResponseBody:
      type: object
      properties:
        success:
          type: boolean
          example: true
        users:
          type: array
          items:
            $ref: '#/components/schemas/ResUser'
          description: Result is an an array of user
          example:
          - avatar: /public/uploads/2022/02/eedf427a-559a-4faf-9e75-357fbb5d65fb.png
            email: guillaume@gmail.com
            firstname: Guillaume
            id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
            lastname: Morin
            role: Maiores et non dolor facilis et voluptatem.
            username: guillaumemorin
          - avatar: /public/uploads/2022/02/eedf427a-559a-4faf-9e75-357fbb5d65fb.png
            email: guillaume@gmail.com
            firstname: Guillaume
            id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
            lastname: Morin
            role: Maiores et non dolor facilis et voluptatem.
            username: guillaumemorin
      example:
        success: true
        users:
        - avatar: /public/uploads/2022/02/eedf427a-559a-4faf-9e75-357fbb5d65fb.png
          email: guillaume@gmail.com
          firstname: Guillaume
          id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          lastname: Morin
          role: Maiores et non dolor facilis et voluptatem.
          username: guillaumemorin
        - avatar: /public/uploads/2022/02/eedf427a-559a-4faf-9e75-357fbb5d65fb.png
          email: guillaume@gmail.com
          firstname: Guillaume
          id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          lastname: Morin
          role: Maiores et non dolor facilis et voluptatem.
          username: guillaumemorin
      required:
      - users
      - success
    OAuthRequestBody:
      type: object
      properties:
        client_id:
          type: string
          example: Praesentium cum dolorem.
        client_secret:
          type: string
          example: Possimus exercitationem quasi.
        grant_type:
          type: string
          example: Ducimus sint pariatur laborum quis id pariatur.
      example:
        client_id: Alias et molestias nobis.
        client_secret: Quis quod itaque ducimus sed at.
        grant_type: Sit numquam.
      required:
      - client_id
      - client_secret
      - grant_type
    OAuthResponse:
      type: object
      properties:
        access_token:
          type: string
          example: Amet nostrum eveniet nisi et.
        expires_in:
          type: integer
          example: 8141662905809446472
          format: int64
        success:
          type: boolean
          example: false
        token_type:
          type: string
          example: Iste eum aspernatur voluptatum.
      example:
        access_token: Sit consequuntur quisquam placeat.
        expires_in: 4135014651227265522
        success: false
        token_type: Ipsam velit voluptatum autem dicta.
      required:
      - access_token
      - token_type
      - expires_in
      - success
    PayloadData:
      type: object
      properties:
        category:
          type: string
          default: robotics
          example: space
          enum:
          - robotics
          - space
          - brain
          - animals
          - autre
        description:
          type: string
          example: Unique Air max restant au monde
          minLength: 2
          maxLength: 500
        image:
          type: string
          description: Url of the logo and stock in db
          example: Dolores nihil sapiente autem autem numquam.
        title:
          type: string
          example: Air max360 d'il y a 10 millions d'années
          minLength: 3
          maxLength: 20
        user_id:
          type: string
          example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          format: uuid
      example:
        category: space
        description: Unique Air max restant au monde
        image: At aut laboriosam distinctio et.
        title: Air max360 d'il y a 10 millions d'années
        user_id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
      required:
      - title
      - description
      - category
      - user_id
    PayloadUser:
      type: object
      properties:
        avatar:
          type: string
          description: Url of the avatar and stock in db
          example: Earum inventore nam totam reiciendis.
        email:
          type: string
          example: guillaume@gmail.com
          format: email
        firstname:
          type: string
          example: Guillaume
          minLength: 3
          maxLength: 20
        lastname:
          type: string
          example: Morin
          minLength: 3
          maxLength: 20
        role:
          type: string
          description: role of the user
          example: user
          enum:
          - admin
          - user
          - pro
        username:
          type: string
          example: guillaumemoriin
          pattern: ^[a-z0-9_\-]+$
          minLength: 2
          maxLength: 20
      example:
        avatar: Vitae nobis vero et ut.
        email: guillaume@gmail.com
        firstname: Guillaume
        lastname: Morin
        role: admin
        username: guillaumemoriin
      required:
      - email
      - username
      - firstname
      - lastname
      - avatar
      - role
    RefreshRequestBody:
      type: object
      properties:
        refresh_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
      example:
        refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
      required:
      - refresh_token
    ResContact:
      type: object
      properties:
        email:
          type: string
          example: guillaume@gmail.com
        id:
          type: string
          example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
        message:
          type: string
          example: Vous embauchez ?
        user_id:
          type: string
          example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
      example:
        email: guillaume@gmail.com
        id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
        message: Vous embauchez ?
        user_id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
      required:
      - id
      - email
      - user_id
      - message
    ResData:
      type: object
      properties:
        category:
          type: string
          default: robotics
          example: brain
          enum:
          - robotics
          - space
          - brain
          - animals
          - autre
        description:
          type: string
          example: Unique Air max restant au monde
          minLength: 2
          maxLength: 500
        id:
          type: string
          example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          format: uuid
        image:
          type: string
          description: Url of the logo and stock in db
          example: Eos enim earum.
        title:
          type: string
          example: Air max360 d'il y a 10 millions d'années
          minLength: 3
          maxLength: 20
        user_id:
          type: string
          example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          format: uuid
      example:
        category: autre
        description: Unique Air max restant au monde
        id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
        image: Quidem dolores non dolore eaque.
        title: Air max360 d'il y a 10 millions d'années
        user_id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
      required:
      - id
      - title
      - description
      - image
      - category
      - user_id
    ResFile:
      type: object
      properties:
        id:
          type: string
          example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          format: uuid
        mime:
          type: string
          example: Repellendus dolor rem alias unde ad in.
        name:
          type: string
          example: foo.png
        size:
          type: integer
          example: 3432256459834041744
          format: int64
        url:
          type: string
          example: Aut ut.
      example:
        id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
        mime: Maiores laborum maiores harum et quam.
        name: foo.png
        size: 9020329461380384661
        url: Quibusdam rem explicabo consequatur sapiente possimus voluptas.
      required:
      - id
      - name
      - url
    ResUser:
      type: object
      properties:
        avatar:
          type: string
          example: /public/uploads/2022/02/eedf427a-559a-4faf-9e75-357fbb5d65fb.png
        email:
          type: string
          example: guillaume@gmail.com
        firstname:
          type: string
          example: Guillaume
        id:
          type: string
          example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
        lastname:
          type: string
          example: Morin
        role:
          type: string
          description: User is admin or not
          example: Neque similique saepe repudiandae fugit velit sed.
        username:
          type: string
          example: guillaumemorin
      example:
        avatar: /public/uploads/2022/02/eedf427a-559a-4faf-9e75-357fbb5d65fb.png
        email: guillaume@gmail.com
        firstname: Guillaume
        id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
        lastname: Morin
        role: Quaerat cumque qui quo.
        username: guillaumemorin
      required:
      - id
      - email
      - username
      - firstname
      - lastname
      - avatar
      - role
    ResetPasswordRequestBody:
      type: object
      properties:
        code:
          type: string
          example: ZGI5E
          minLength: 5
          maxLength: 5
        confirm_password:
          type: string
          description: Minimum 9 charactères / Chiffre Obligatoire
          example: JeSuisUnTest974
          pattern: \d
          minLength: 9
        email:
          type: string
          example: guillaume@gmail.com
          format: email
        password:
          type: string
          description: Minimum 9 charactères / Chiffre Obligatoire
          example: JeSuisUnTest974
          pattern: \d
          minLength: 9
      example:
        code: ZGI5E
        confirm_password: JeSuisUnTest974
        email: guillaume@gmail.com
        password: JeSuisUnTest974
      required:
      - email
      - code
      - password
      - confirm_password
    ResetPasswordResponseBody:
      type: object
      properties:
        success:
          type: boolean
          example: false
      example:
        success: false
      required:
      - success
    Sign:
      type: object
      properties:
        access_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
        refresh_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
        success:
          type: boolean
          example: true
      example:
        access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
        refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
        success: true
      required:
      - access_token
      - refresh_token
      - success
    SigninRequestBody:
      type: object
      properties:
        email:
          type: string
          example: guillaume@epitech.eu
          format: email
        password:
          type: string
          description: Minimum 9 charactères / Chiffre Obligatoire
          example: JeSuisUnTest974
          pattern: \d
          minLength: 9
      example:
        email: guillaume@epitech.eu
        password: JeSuisUnTest974
      required:
      - password
      - email
    SignupRequestBody:
      type: object
      properties:
        confirm_password:
          type: string
          description: Minimum 9 charactères / Chiffre Obligatoire
          example: JeSuisUnTest974
          pattern: \d
          minLength: 9
        email:
          type: string
          example: guillaume@epitech.eu
          format: email
        password:
          type: string
          description: Minimum 9 charactères / Chiffre Obligatoire
          example: JeSuisUnTest974
          pattern: \d
          minLength: 9
        username:
          type: string
          example: guillaumemoriin
          minLength: 3
          maxLength: 20
      example:
        confirm_password: JeSuisUnTest974
        email: guillaume@epitech.eu
        password: JeSuisUnTest974
        username: guillaumemoriin
      required:
      - email
      - password
      - confirm_password
      - username
    UnknownError:
      type: object
      properties:
        err:
          type: string
          example: sql no rows affected
        error_code:
          type: string
          example: TX_UPDATE_ITEM
        success:
          type: boolean
          default: false
          example: false
      description: Error not identified (500)
      example:
        err: sql no rows affected
        error_code: TX_UPDATE_ITEM
        success: false
      required:
      - err
      - success
      - error_code
    UpdateAvatarRequestBody:
      type: object
      properties:
        avatar:
          type: string
          description: Url of the avatar and stock in db
          example: Veritatis temporibus ut dolorem natus ipsum.
        id:
          type: string
          example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          format: uuid
      example:
        avatar: Soluta nulla.
        id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
      required:
      - id
      - avatar
    UpdateAvatarResponseBody:
      type: object
      properties:
        success:
          type: boolean
          example: false
        user:
          $ref: '#/components/schemas/ResUser'
      example:
        success: true
        user:
          avatar: /public/uploads/2022/02/eedf427a-559a-4faf-9e75-357fbb5d65fb.png
          email: guillaume@gmail.com
          firstname: Guillaume
          id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          lastname: Morin
          role: Maiores et non dolor facilis et voluptatem.
          username: guillaumemorin
      required:
      - success
    UpdateBoUserRequestBody:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/PayloadUser'
      example:
        user:
          avatar: Laborum ea cum ad ipsam facere.
          email: guillaume@gmail.com
          firstname: Guillaume
          lastname: Morin
          role: admin
          username: guillaumemoriin
      required:
      - user
    UpdateBoUserResponseBody:
      type: object
      properties:
        success:
          type: boolean
          example: false
        user:
          $ref: '#/components/schemas/ResUser'
      example:
        success: true
        user:
          avatar: /public/uploads/2022/02/eedf427a-559a-4faf-9e75-357fbb5d65fb.png
          email: guillaume@gmail.com
          firstname: Guillaume
          id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          lastname: Morin
          role: Maiores et non dolor facilis et voluptatem.
          username: guillaumemorin
      required:
      - user
      - success
    UpdateDescriptionRequestBody:
      type: object
      properties:
        email:
          type: string
          example: guillaume@gmail.com
          format: email
        firstname:
          type: string
          example: Guillaume
          minLength: 3
          maxLength: 20
        id:
          type: string
          example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          format: uuid
        lastname:
          type: string
          example: Morin
          minLength: 3
          maxLength: 20
        username:
          type: string
          example: guillaumemoriin
          pattern: ^[a-z0-9_\-]+$
          minLength: 3
          maxLength: 20
      example:
        email: guillaume@gmail.com
        firstname: Guillaume
        id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
        lastname: Morin
        username: guillaumemoriin
      required:
      - email
      - id
      - username
    UpdateNumberStockageRequestBody:
      type: object
      properties:
        id:
          type: string
          example: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
          format: uuid
        number:
          type: integer
          example: 2269417093727514736
          format: int64
      example:
        id: 5dfb0bf7-597a-4250-b7ad-63a43ff59c25
        number: 1972916839102469043
      required:
      - id
      - number
  securitySchemes:
    OAuth2_header_Authorization:
      type: oauth2
      description: Use OAuth2 to authenticate
      flows:
        clientCredentials:
          tokenUrl: /authorization
          refreshUrl: /refresh
          scopes:
            api:read: Provides read access
    jwt_header_jwtToken:
      type: http
      description: Secures endpoint by requiring a valid JWT token retrieved via the
        signin endpoint. Supports scopes "api:read" and "api:write".
      scheme: bearer
tags:
- name: openapi
- name: fileapi
- name: auth
  description: Forget password / reset password / send Email Code
- name: boContact
  description: back office contacts of the api
- name: contacts
  description: contacts of the api
- name: data
  description: futristics data of the api
- name: files
  description: files of the api
- name: jwtToken
  description: Use Token to authenticate. Signin and Signup
- name: oAuth
  description: Oauth to authentificate
- name: bo
  description: bo of the api
- name: publicUsers
  description: public route of users
- name: users
  description: users of the api
