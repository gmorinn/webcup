// Code generated by goa v3.7.3, DO NOT EDIT.
//
// publicUsers HTTP server types
//
// Command:
// $ goa gen webcup/design

package server

import (
	publicusers "webcup/gen/public_users"

	goa "goa.design/goa/v3/pkg"
)

// ListUsersRequestBody is the type of the "publicUsers" service "listUsers"
// endpoint HTTP request body.
type ListUsersRequestBody struct {
	Key *string `form:"key,omitempty" json:"key,omitempty" xml:"key,omitempty"`
}

// GetUserByUsernameResponseBody is the type of the "publicUsers" service
// "getUserByUsername" endpoint HTTP response body.
type GetUserByUsernameResponseBody struct {
	// Result is an object
	User    *ResUserResponseBody `form:"user" json:"user" xml:"user"`
	Success bool                 `form:"success" json:"success" xml:"success"`
}

// ListUsersResponseBody is the type of the "publicUsers" service "listUsers"
// endpoint HTTP response body.
type ListUsersResponseBody struct {
	// Result is an an array of user
	Users   []*ResUserResponseBody `form:"users" json:"users" xml:"users"`
	Success bool                   `form:"success" json:"success" xml:"success"`
}

// ListUsersMostRecentResponseBody is the type of the "publicUsers" service
// "listUsersMostRecent" endpoint HTTP response body.
type ListUsersMostRecentResponseBody struct {
	// Result is an an array of user
	Users   []*ResUserResponseBody `form:"users" json:"users" xml:"users"`
	Success bool                   `form:"success" json:"success" xml:"success"`
	// total of users
	Count int64 `form:"count" json:"count" xml:"count"`
}

// GetUserByUsernameUnknownErrorResponseBody is the type of the "publicUsers"
// service "getUserByUsername" endpoint HTTP response body for the
// "unknown_error" error.
type GetUserByUsernameUnknownErrorResponseBody struct {
	Err       string `form:"err" json:"err" xml:"err"`
	ErrorCode string `form:"error_code" json:"error_code" xml:"error_code"`
	Success   bool   `form:"success" json:"success" xml:"success"`
}

// ListUsersUnknownErrorResponseBody is the type of the "publicUsers" service
// "listUsers" endpoint HTTP response body for the "unknown_error" error.
type ListUsersUnknownErrorResponseBody struct {
	Err       string `form:"err" json:"err" xml:"err"`
	ErrorCode string `form:"error_code" json:"error_code" xml:"error_code"`
	Success   bool   `form:"success" json:"success" xml:"success"`
}

// ListUsersMostRecentUnknownErrorResponseBody is the type of the "publicUsers"
// service "listUsersMostRecent" endpoint HTTP response body for the
// "unknown_error" error.
type ListUsersMostRecentUnknownErrorResponseBody struct {
	Err       string `form:"err" json:"err" xml:"err"`
	ErrorCode string `form:"error_code" json:"error_code" xml:"error_code"`
	Success   bool   `form:"success" json:"success" xml:"success"`
}

// ResUserResponseBody is used to define fields on response body types.
type ResUserResponseBody struct {
	ID        string `form:"id" json:"id" xml:"id"`
	Firstname string `form:"firstname" json:"firstname" xml:"firstname"`
	Lastname  string `form:"lastname" json:"lastname" xml:"lastname"`
	Username  string `form:"username" json:"username" xml:"username"`
	Email     string `form:"email" json:"email" xml:"email"`
	// User is admin or not
	Role   string `form:"role" json:"role" xml:"role"`
	Avatar string `form:"avatar" json:"avatar" xml:"avatar"`
}

// NewGetUserByUsernameResponseBody builds the HTTP response body from the
// result of the "getUserByUsername" endpoint of the "publicUsers" service.
func NewGetUserByUsernameResponseBody(res *publicusers.GetUserByUsernameResult) *GetUserByUsernameResponseBody {
	body := &GetUserByUsernameResponseBody{
		Success: res.Success,
	}
	if res.User != nil {
		body.User = marshalPublicusersResUserToResUserResponseBody(res.User)
	}
	return body
}

// NewListUsersResponseBody builds the HTTP response body from the result of
// the "listUsers" endpoint of the "publicUsers" service.
func NewListUsersResponseBody(res *publicusers.ListUsersResult) *ListUsersResponseBody {
	body := &ListUsersResponseBody{
		Success: res.Success,
	}
	if res.Users != nil {
		body.Users = make([]*ResUserResponseBody, len(res.Users))
		for i, val := range res.Users {
			body.Users[i] = marshalPublicusersResUserToResUserResponseBody(val)
		}
	}
	return body
}

// NewListUsersMostRecentResponseBody builds the HTTP response body from the
// result of the "listUsersMostRecent" endpoint of the "publicUsers" service.
func NewListUsersMostRecentResponseBody(res *publicusers.ListUsersMostRecentResult) *ListUsersMostRecentResponseBody {
	body := &ListUsersMostRecentResponseBody{
		Success: res.Success,
		Count:   res.Count,
	}
	if res.Users != nil {
		body.Users = make([]*ResUserResponseBody, len(res.Users))
		for i, val := range res.Users {
			body.Users[i] = marshalPublicusersResUserToResUserResponseBody(val)
		}
	}
	return body
}

// NewGetUserByUsernameUnknownErrorResponseBody builds the HTTP response body
// from the result of the "getUserByUsername" endpoint of the "publicUsers"
// service.
func NewGetUserByUsernameUnknownErrorResponseBody(res *publicusers.UnknownError) *GetUserByUsernameUnknownErrorResponseBody {
	body := &GetUserByUsernameUnknownErrorResponseBody{
		Err:       res.Err,
		ErrorCode: res.ErrorCode,
		Success:   res.Success,
	}
	return body
}

// NewListUsersUnknownErrorResponseBody builds the HTTP response body from the
// result of the "listUsers" endpoint of the "publicUsers" service.
func NewListUsersUnknownErrorResponseBody(res *publicusers.UnknownError) *ListUsersUnknownErrorResponseBody {
	body := &ListUsersUnknownErrorResponseBody{
		Err:       res.Err,
		ErrorCode: res.ErrorCode,
		Success:   res.Success,
	}
	return body
}

// NewListUsersMostRecentUnknownErrorResponseBody builds the HTTP response body
// from the result of the "listUsersMostRecent" endpoint of the "publicUsers"
// service.
func NewListUsersMostRecentUnknownErrorResponseBody(res *publicusers.UnknownError) *ListUsersMostRecentUnknownErrorResponseBody {
	body := &ListUsersMostRecentUnknownErrorResponseBody{
		Err:       res.Err,
		ErrorCode: res.ErrorCode,
		Success:   res.Success,
	}
	return body
}

// NewGetUserByUsernamePayload builds a publicUsers service getUserByUsername
// endpoint payload.
func NewGetUserByUsernamePayload(username string, oauth *string) *publicusers.GetUserByUsernamePayload {
	v := &publicusers.GetUserByUsernamePayload{}
	v.Username = username
	v.Oauth = oauth

	return v
}

// NewListUsersPayload builds a publicUsers service listUsers endpoint payload.
func NewListUsersPayload(body *ListUsersRequestBody, oauth *string) *publicusers.ListUsersPayload {
	v := &publicusers.ListUsersPayload{
		Key: *body.Key,
	}
	v.Oauth = oauth

	return v
}

// NewListUsersMostRecentPayload builds a publicUsers service
// listUsersMostRecent endpoint payload.
func NewListUsersMostRecentPayload(offset int32, limit int32, oauth *string) *publicusers.ListUsersMostRecentPayload {
	v := &publicusers.ListUsersMostRecentPayload{}
	v.Offset = offset
	v.Limit = limit
	v.Oauth = oauth

	return v
}

// ValidateListUsersRequestBody runs the validations defined on
// ListUsersRequestBody
func ValidateListUsersRequestBody(body *ListUsersRequestBody) (err error) {
	if body.Key == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("key", "body"))
	}
	return
}
