// Code generated by goa v3.7.3, DO NOT EDIT.
//
// publicUsers HTTP server encoders and decoders
//
// Command:
// $ goa gen webcup/design

package server

import (
	"context"
	"errors"
	"io"
	"net/http"
	"strconv"
	"strings"
	"unicode/utf8"
	publicusers "webcup/gen/public_users"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeGetUserByUsernameResponse returns an encoder for responses returned by
// the publicUsers getUserByUsername endpoint.
func EncodeGetUserByUsernameResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*publicusers.GetUserByUsernameResult)
		enc := encoder(ctx, w)
		body := NewGetUserByUsernameResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetUserByUsernameRequest returns a decoder for requests sent to the
// publicUsers getUserByUsername endpoint.
func DecodeGetUserByUsernameRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			username string
			oauth    *string
			err      error

			params = mux.Vars(r)
		)
		username = params["username"]
		err = goa.MergeErrors(err, goa.ValidatePattern("username", username, "^[a-z0-9_\\-]+$"))
		if utf8.RuneCountInString(username) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("username", username, utf8.RuneCountInString(username), 3, true))
		}
		if utf8.RuneCountInString(username) > 20 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("username", username, utf8.RuneCountInString(username), 20, false))
		}
		oauthRaw := r.Header.Get("Authorization")
		if oauthRaw != "" {
			oauth = &oauthRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetUserByUsernamePayload(username, oauth)
		if payload.Oauth != nil {
			if strings.Contains(*payload.Oauth, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.Oauth, " ", 2)[1]
				payload.Oauth = &cred
			}
		}

		return payload, nil
	}
}

// EncodeGetUserByUsernameError returns an encoder for errors returned by the
// getUserByUsername publicUsers endpoint.
func EncodeGetUserByUsernameError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en ErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "unknown_error":
			var res *publicusers.UnknownError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGetUserByUsernameUnknownErrorResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "oauth_error":
			var res publicusers.OauthError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeListUsersResponse returns an encoder for responses returned by the
// publicUsers listUsers endpoint.
func EncodeListUsersResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*publicusers.ListUsersResult)
		enc := encoder(ctx, w)
		body := NewListUsersResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeListUsersRequest returns a decoder for requests sent to the
// publicUsers listUsers endpoint.
func DecodeListUsersRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body ListUsersRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateListUsersRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			oauth *string
		)
		oauthRaw := r.Header.Get("Authorization")
		if oauthRaw != "" {
			oauth = &oauthRaw
		}
		payload := NewListUsersPayload(&body, oauth)
		if payload.Oauth != nil {
			if strings.Contains(*payload.Oauth, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.Oauth, " ", 2)[1]
				payload.Oauth = &cred
			}
		}

		return payload, nil
	}
}

// EncodeListUsersError returns an encoder for errors returned by the listUsers
// publicUsers endpoint.
func EncodeListUsersError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en ErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "unknown_error":
			var res *publicusers.UnknownError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewListUsersUnknownErrorResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "oauth_error":
			var res publicusers.OauthError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeListUsersMostRecentResponse returns an encoder for responses returned
// by the publicUsers listUsersMostRecent endpoint.
func EncodeListUsersMostRecentResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*publicusers.ListUsersMostRecentResult)
		enc := encoder(ctx, w)
		body := NewListUsersMostRecentResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeListUsersMostRecentRequest returns a decoder for requests sent to the
// publicUsers listUsersMostRecent endpoint.
func DecodeListUsersMostRecentRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			offset int32
			limit  int32
			oauth  *string
			err    error

			params = mux.Vars(r)
		)
		{
			offsetRaw := params["offset"]
			v, err2 := strconv.ParseInt(offsetRaw, 10, 32)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("offset", offsetRaw, "integer"))
			}
			offset = int32(v)
		}
		if offset < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("offset", offset, 0, true))
		}
		{
			limitRaw := params["limit"]
			v, err2 := strconv.ParseInt(limitRaw, 10, 32)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("limit", limitRaw, "integer"))
			}
			limit = int32(v)
		}
		if limit < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("limit", limit, 0, true))
		}
		oauthRaw := r.Header.Get("Authorization")
		if oauthRaw != "" {
			oauth = &oauthRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewListUsersMostRecentPayload(offset, limit, oauth)
		if payload.Oauth != nil {
			if strings.Contains(*payload.Oauth, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.Oauth, " ", 2)[1]
				payload.Oauth = &cred
			}
		}

		return payload, nil
	}
}

// EncodeListUsersMostRecentError returns an encoder for errors returned by the
// listUsersMostRecent publicUsers endpoint.
func EncodeListUsersMostRecentError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en ErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "unknown_error":
			var res *publicusers.UnknownError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewListUsersMostRecentUnknownErrorResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "oauth_error":
			var res publicusers.OauthError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// marshalPublicusersResUserToResUserResponseBody builds a value of type
// *ResUserResponseBody from a value of type *publicusers.ResUser.
func marshalPublicusersResUserToResUserResponseBody(v *publicusers.ResUser) *ResUserResponseBody {
	res := &ResUserResponseBody{
		ID:        v.ID,
		Firstname: v.Firstname,
		Lastname:  v.Lastname,
		Username:  v.Username,
		Email:     v.Email,
		Role:      v.Role,
		Avatar:    v.Avatar,
	}

	return res
}
