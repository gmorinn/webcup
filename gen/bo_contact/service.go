// Code generated by goa v3.7.3, DO NOT EDIT.
//
// boContact service
//
// Command:
// $ goa gen webcup/design

package bocontact

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// back office contacts of the api
type Service interface {
	// Get All messages
	GetBoContact(context.Context, *GetBoContactPayload) (res *GetBoContactResult, err error)
	// Delete one contact by ID
	DeleteBoContact(context.Context, *DeleteBoContactPayload) (res *DeleteBoContactResult, err error)
	// get one contact by ID
	GetBoContactByID(context.Context, *GetBoContactByIDPayload) (res *GetBoContactByIDResult, err error)
	// Delete many contact with IDs send in body
	DeleteBoManyContact(context.Context, *DeleteBoManyContactPayload) (res *DeleteBoManyContactResult, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// OAuth2Auth implements the authorization logic for the OAuth2 security scheme.
	OAuth2Auth(ctx context.Context, token string, schema *security.OAuth2Scheme) (context.Context, error)
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "boContact"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [4]string{"getBoContact", "deleteBoContact", "getBoContactByID", "deleteBoManyContact"}

// DeleteBoContactPayload is the payload type of the boContact service
// deleteBoContact method.
type DeleteBoContactPayload struct {
	ID string
	// JWT used for authentication after Signin/Signup
	JWTToken *string
	// Use to generate Oauth with /authorization
	Oauth *string
}

// DeleteBoContactResult is the result type of the boContact service
// deleteBoContact method.
type DeleteBoContactResult struct {
	Success bool
}

// DeleteBoManyContactPayload is the payload type of the boContact service
// deleteBoManyContact method.
type DeleteBoManyContactPayload struct {
	Tab []string
	// JWT used for authentication after Signin/Signup
	JWTToken *string
	// Use to generate Oauth with /authorization
	Oauth *string
}

// DeleteBoManyContactResult is the result type of the boContact service
// deleteBoManyContact method.
type DeleteBoManyContactResult struct {
	Success bool
}

// GetBoContactByIDPayload is the payload type of the boContact service
// getBoContactByID method.
type GetBoContactByIDPayload struct {
	ID string
	// JWT used for authentication after Signin/Signup
	JWTToken *string
	// Use to generate Oauth with /authorization
	Oauth *string
}

// GetBoContactByIDResult is the result type of the boContact service
// getBoContactByID method.
type GetBoContactByIDResult struct {
	Success bool
	// One message
	Contact *ResContact
}

// GetBoContactPayload is the payload type of the boContact service
// getBoContact method.
type GetBoContactPayload struct {
	// Offset for pagination
	Offset int32
	// Limit of items listed for pagination
	Limit int32
	// Items order by {field}
	Field string
	// Items order by {field} ASC/DESC
	Direction string
	// JWT used for authentication after Signin/Signup
	JWTToken *string
	// Use to generate Oauth with /authorization
	Oauth *string
}

// GetBoContactResult is the result type of the boContact service getBoContact
// method.
type GetBoContactResult struct {
	// All messages
	Contacts []*ResContact
	// total of messages
	Count   int64
	Success bool
}

type ResContact struct {
	ID      string
	UserID  string
	Email   string
	Message string
}

type UnknownError struct {
	Err       string
	ErrorCode string
	Success   bool
}

// Error returns an error description.
func (e *UnknownError) Error() string {
	return ""
}

// ErrorName returns "unknownError".
func (e *UnknownError) ErrorName() string {
	return "unknown_error"
}

// MakeTimeout builds a goa.ServiceError from an error.
func MakeTimeout(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "timeout",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
		Timeout: true,
	}
}
