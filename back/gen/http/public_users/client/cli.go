// Code generated by goa v3.7.2, DO NOT EDIT.
//
// publicUsers HTTP client CLI support package
//
// Command:
// $ goa gen webcup/back/design

package client

import (
	"encoding/json"
	"fmt"
	"strconv"
	"unicode/utf8"
	publicusers "webcup/back/gen/public_users"

	goa "goa.design/goa/v3/pkg"
)

// BuildGetUserByUsernamePayload builds the payload for the publicUsers
// getUserByUsername endpoint from CLI flags.
func BuildGetUserByUsernamePayload(publicUsersGetUserByUsernameUsername string, publicUsersGetUserByUsernameOauth string) (*publicusers.GetUserByUsernamePayload, error) {
	var err error
	var username string
	{
		username = publicUsersGetUserByUsernameUsername
		err = goa.MergeErrors(err, goa.ValidatePattern("username", username, "^[a-z0-9_\\-]+$"))
		if utf8.RuneCountInString(username) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("username", username, utf8.RuneCountInString(username), 3, true))
		}
		if utf8.RuneCountInString(username) > 20 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("username", username, utf8.RuneCountInString(username), 20, false))
		}
		if err != nil {
			return nil, err
		}
	}
	var oauth *string
	{
		if publicUsersGetUserByUsernameOauth != "" {
			oauth = &publicUsersGetUserByUsernameOauth
		}
	}
	v := &publicusers.GetUserByUsernamePayload{}
	v.Username = username
	v.Oauth = oauth

	return v, nil
}

// BuildListUsersPayload builds the payload for the publicUsers listUsers
// endpoint from CLI flags.
func BuildListUsersPayload(publicUsersListUsersBody string, publicUsersListUsersOauth string) (*publicusers.ListUsersPayload, error) {
	var err error
	var body ListUsersRequestBody
	{
		err = json.Unmarshal([]byte(publicUsersListUsersBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"key\": \"guillaumemoriin\"\n   }'")
		}
	}
	var oauth *string
	{
		if publicUsersListUsersOauth != "" {
			oauth = &publicUsersListUsersOauth
		}
	}
	v := &publicusers.ListUsersPayload{
		Key: body.Key,
	}
	v.Oauth = oauth

	return v, nil
}

// BuildListUsersMostRecentPayload builds the payload for the publicUsers
// listUsersMostRecent endpoint from CLI flags.
func BuildListUsersMostRecentPayload(publicUsersListUsersMostRecentOffset string, publicUsersListUsersMostRecentLimit string, publicUsersListUsersMostRecentOauth string) (*publicusers.ListUsersMostRecentPayload, error) {
	var err error
	var offset int32
	{
		var v int64
		v, err = strconv.ParseInt(publicUsersListUsersMostRecentOffset, 10, 32)
		offset = int32(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for offset, must be INT32")
		}
		if offset < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("offset", offset, 0, true))
		}
		if err != nil {
			return nil, err
		}
	}
	var limit int32
	{
		var v int64
		v, err = strconv.ParseInt(publicUsersListUsersMostRecentLimit, 10, 32)
		limit = int32(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for limit, must be INT32")
		}
		if limit < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("limit", limit, 0, true))
		}
		if err != nil {
			return nil, err
		}
	}
	var oauth *string
	{
		if publicUsersListUsersMostRecentOauth != "" {
			oauth = &publicUsersListUsersMostRecentOauth
		}
	}
	v := &publicusers.ListUsersMostRecentPayload{}
	v.Offset = offset
	v.Limit = limit
	v.Oauth = oauth

	return v, nil
}
