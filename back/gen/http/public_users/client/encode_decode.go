// Code generated by goa v3.7.2, DO NOT EDIT.
//
// publicUsers HTTP client encoders and decoders
//
// Command:
// $ goa gen webcup/back/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	publicusers "webcup/back/gen/public_users"

	goahttp "goa.design/goa/v3/http"
)

// BuildGetUserByUsernameRequest instantiates a HTTP request object with method
// and path set to call the "publicUsers" service "getUserByUsername" endpoint
func (c *Client) BuildGetUserByUsernameRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		username string
	)
	{
		p, ok := v.(*publicusers.GetUserByUsernamePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("publicUsers", "getUserByUsername", "*publicusers.GetUserByUsernamePayload", v)
		}
		username = p.Username
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetUserByUsernamePublicUsersPath(username)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("publicUsers", "getUserByUsername", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetUserByUsernameRequest returns an encoder for requests sent to the
// publicUsers getUserByUsername server.
func EncodeGetUserByUsernameRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*publicusers.GetUserByUsernamePayload)
		if !ok {
			return goahttp.ErrInvalidType("publicUsers", "getUserByUsername", "*publicusers.GetUserByUsernamePayload", v)
		}
		if p.Oauth != nil {
			head := *p.Oauth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeGetUserByUsernameResponse returns a decoder for responses returned by
// the publicUsers getUserByUsername endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeGetUserByUsernameResponse may return the following errors:
//	- "unknown_error" (type *publicusers.UnknownError): http.StatusInternalServerError
//	- "oauth_error" (type publicusers.OauthError): http.StatusForbidden
//	- error: internal error
func DecodeGetUserByUsernameResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetUserByUsernameResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("publicUsers", "getUserByUsername", err)
			}
			err = ValidateGetUserByUsernameResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("publicUsers", "getUserByUsername", err)
			}
			res := NewGetUserByUsernameResultOK(&body)
			return res, nil
		case http.StatusInternalServerError:
			var (
				body GetUserByUsernameUnknownErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("publicUsers", "getUserByUsername", err)
			}
			err = ValidateGetUserByUsernameUnknownErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("publicUsers", "getUserByUsername", err)
			}
			return nil, NewGetUserByUsernameUnknownError(&body)
		case http.StatusForbidden:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("publicUsers", "getUserByUsername", err)
			}
			return nil, NewGetUserByUsernameOauthError(body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("publicUsers", "getUserByUsername", resp.StatusCode, string(body))
		}
	}
}

// BuildListUsersRequest instantiates a HTTP request object with method and
// path set to call the "publicUsers" service "listUsers" endpoint
func (c *Client) BuildListUsersRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListUsersPublicUsersPath()}
	req, err := http.NewRequest("PATCH", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("publicUsers", "listUsers", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListUsersRequest returns an encoder for requests sent to the
// publicUsers listUsers server.
func EncodeListUsersRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*publicusers.ListUsersPayload)
		if !ok {
			return goahttp.ErrInvalidType("publicUsers", "listUsers", "*publicusers.ListUsersPayload", v)
		}
		if p.Oauth != nil {
			head := *p.Oauth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewListUsersRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("publicUsers", "listUsers", err)
		}
		return nil
	}
}

// DecodeListUsersResponse returns a decoder for responses returned by the
// publicUsers listUsers endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeListUsersResponse may return the following errors:
//	- "unknown_error" (type *publicusers.UnknownError): http.StatusInternalServerError
//	- "oauth_error" (type publicusers.OauthError): http.StatusForbidden
//	- error: internal error
func DecodeListUsersResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListUsersResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("publicUsers", "listUsers", err)
			}
			err = ValidateListUsersResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("publicUsers", "listUsers", err)
			}
			res := NewListUsersResultOK(&body)
			return res, nil
		case http.StatusInternalServerError:
			var (
				body ListUsersUnknownErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("publicUsers", "listUsers", err)
			}
			err = ValidateListUsersUnknownErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("publicUsers", "listUsers", err)
			}
			return nil, NewListUsersUnknownError(&body)
		case http.StatusForbidden:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("publicUsers", "listUsers", err)
			}
			return nil, NewListUsersOauthError(body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("publicUsers", "listUsers", resp.StatusCode, string(body))
		}
	}
}

// BuildListUsersMostRecentRequest instantiates a HTTP request object with
// method and path set to call the "publicUsers" service "listUsersMostRecent"
// endpoint
func (c *Client) BuildListUsersMostRecentRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		offset int32
		limit  int32
	)
	{
		p, ok := v.(*publicusers.ListUsersMostRecentPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("publicUsers", "listUsersMostRecent", "*publicusers.ListUsersMostRecentPayload", v)
		}
		offset = p.Offset
		limit = p.Limit
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListUsersMostRecentPublicUsersPath(offset, limit)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("publicUsers", "listUsersMostRecent", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListUsersMostRecentRequest returns an encoder for requests sent to the
// publicUsers listUsersMostRecent server.
func EncodeListUsersMostRecentRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*publicusers.ListUsersMostRecentPayload)
		if !ok {
			return goahttp.ErrInvalidType("publicUsers", "listUsersMostRecent", "*publicusers.ListUsersMostRecentPayload", v)
		}
		if p.Oauth != nil {
			head := *p.Oauth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeListUsersMostRecentResponse returns a decoder for responses returned
// by the publicUsers listUsersMostRecent endpoint. restoreBody controls
// whether the response body should be restored after having been read.
// DecodeListUsersMostRecentResponse may return the following errors:
//	- "unknown_error" (type *publicusers.UnknownError): http.StatusInternalServerError
//	- "oauth_error" (type publicusers.OauthError): http.StatusForbidden
//	- error: internal error
func DecodeListUsersMostRecentResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListUsersMostRecentResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("publicUsers", "listUsersMostRecent", err)
			}
			err = ValidateListUsersMostRecentResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("publicUsers", "listUsersMostRecent", err)
			}
			res := NewListUsersMostRecentResultOK(&body)
			return res, nil
		case http.StatusInternalServerError:
			var (
				body ListUsersMostRecentUnknownErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("publicUsers", "listUsersMostRecent", err)
			}
			err = ValidateListUsersMostRecentUnknownErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("publicUsers", "listUsersMostRecent", err)
			}
			return nil, NewListUsersMostRecentUnknownError(&body)
		case http.StatusForbidden:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("publicUsers", "listUsersMostRecent", err)
			}
			return nil, NewListUsersMostRecentOauthError(body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("publicUsers", "listUsersMostRecent", resp.StatusCode, string(body))
		}
	}
}

// unmarshalResUserResponseBodyToPublicusersResUser builds a value of type
// *publicusers.ResUser from a value of type *ResUserResponseBody.
func unmarshalResUserResponseBodyToPublicusersResUser(v *ResUserResponseBody) *publicusers.ResUser {
	res := &publicusers.ResUser{
		ID:        *v.ID,
		Firstname: *v.Firstname,
		Lastname:  *v.Lastname,
		Username:  *v.Username,
		Email:     *v.Email,
		Role:      *v.Role,
		Avatar:    *v.Avatar,
	}

	return res
}
