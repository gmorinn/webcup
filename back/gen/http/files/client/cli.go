// Code generated by goa v3.7.2, DO NOT EDIT.
//
// files HTTP client CLI support package
//
// Command:
// $ goa gen webcup/back/design

package client

import (
	"encoding/json"
	"fmt"
	files "webcup/back/gen/files"

	goa "goa.design/goa/v3/pkg"
)

// BuildImportFilePayload builds the payload for the files importFile endpoint
// from CLI flags.
func BuildImportFilePayload(filesImportFileBody string, filesImportFileOauth string, filesImportFileJWTToken string) (*files.ImportFilePayload, error) {
	var err error
	var body ImportFileRequestBody
	{
		err = json.Unmarshal([]byte(filesImportFileBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"content\": \"SWxsbyBxdW8gYWxpcXVpZCBhbWV0IG5vYmlzLg==\",\n      \"filename\": \"foo.jpg\",\n      \"format\": \"image/jpeg\",\n      \"h\": 3954212567730331431,\n      \"mime\": \"Vel mollitia.\",\n      \"size\": 3028238973827103103,\n      \"url\": \"Autem vero dolorem aperiam cum reprehenderit ad.\",\n      \"w\": 6083434384460884878\n   }'")
		}
		if body.Content == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("content", "body"))
		}
		if err != nil {
			return nil, err
		}
	}
	var oauth *string
	{
		if filesImportFileOauth != "" {
			oauth = &filesImportFileOauth
		}
	}
	var jwtToken *string
	{
		if filesImportFileJWTToken != "" {
			jwtToken = &filesImportFileJWTToken
		}
	}
	v := &files.ImportFilePayload{
		Filename: body.Filename,
		URL:      body.URL,
		W:        body.W,
		H:        body.H,
		Mime:     body.Mime,
		Content:  body.Content,
		Size:     body.Size,
		Format:   body.Format,
	}
	v.Oauth = oauth
	v.JWTToken = jwtToken

	return v, nil
}

// BuildDeleteFilePayload builds the payload for the files deleteFile endpoint
// from CLI flags.
func BuildDeleteFilePayload(filesDeleteFileBody string, filesDeleteFileOauth string, filesDeleteFileJWTToken string) (*files.DeleteFilePayload, error) {
	var err error
	var body DeleteFileRequestBody
	{
		err = json.Unmarshal([]byte(filesDeleteFileBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"url\": \"/public/uploads/2021/12/2ca51d10-b660-4b2c-b27f-f7a119642885.png\"\n   }'")
		}
	}
	var oauth *string
	{
		if filesDeleteFileOauth != "" {
			oauth = &filesDeleteFileOauth
		}
	}
	var jwtToken *string
	{
		if filesDeleteFileJWTToken != "" {
			jwtToken = &filesDeleteFileJWTToken
		}
	}
	v := &files.DeleteFilePayload{
		URL: body.URL,
	}
	v.Oauth = oauth
	v.JWTToken = jwtToken

	return v, nil
}
